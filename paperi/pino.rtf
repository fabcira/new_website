{\rtf1\ansi \deff8\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\fdecor\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman{\*\falt Times};}{\f5\fswiss\fcharset0\fprq2 Arial{\*\falt Helvetica};}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times{\*\falt Times New Roman};}
{\f9\fswiss\fcharset0\fprq2 Helvetica{\*\falt Arial};}{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\fdecor\fcharset2\fprq2 Wingdings;}{\f13\froman\fcharset0\fprq2 Book Antiqua;}
{\f14\fnil\fcharset2\fprq2 Monotype Sorts;}{\f15\fswiss\fcharset0\fprq2 Arial Narrow;}{\f16\froman\fcharset0\fprq2 Bookman Old Style;}{\f17\fswiss\fcharset0\fprq2 Century Gothic;}{\f18\fscript\fcharset0\fprq2 Monotype Corsiva;}
{\f19\froman\fcharset0\fprq2 Century Schoolbook;}{\f20\fdecor\fcharset2\fprq2 MT Extra;}{\f21\fmodern\fcharset2\fprq1 MS LineDraw;}{\f22\fdecor\fcharset0\fprq2 Algerian;}{\f23\froman\fcharset0\fprq2 Arial Rounded MT Bold;}
{\f24\fdecor\fcharset0\fprq2 Braggadocio;}{\f25\fswiss\fcharset0\fprq2 Britannic Bold;}{\f26\fscript\fcharset0\fprq2 Brush Script MT;}{\f27\fdecor\fcharset0\fprq2 Colonna MT;}{\f28\fdecor\fcharset0\fprq2 Desdemona;}
{\f29\froman\fcharset0\fprq2 Footlight MT Light;}{\f30\fswiss\fcharset0\fprq2 Impact;}{\f31\fdecor\fcharset0\fprq2 Kino MT;}{\f32\froman\fcharset0\fprq2 Wide Latin;}{\f33\fscript\fcharset0\fprq2 Matura MT Script Capitals;}
{\f34\fdecor\fcharset0\fprq2 Playbill;}{\f35\fswiss\fcharset0\fprq2 AvantGarde;}{\f36\froman\fcharset0\fprq2 Bookman{\*\falt Bookman Old Style};}{\f37\fswiss\fcharset0\fprq2 Helvetica-Narrow;}{\f38\froman\fcharset0\fprq2 NewCenturySchlbk;}
{\f39\froman\fcharset0\fprq2 Palatino;}{\f40\fscript\fcharset0\fprq2 ZapfChancery;}{\f41\fdecor\fcharset2\fprq2 ZapfDingbats;}{\f42\froman\fcharset255\fprq2 Roman;}{\f43\fscript\fcharset255\fprq2 Script;}{\f44\fmodern\fcharset255\fprq2 Modern;}
{\f45\fswiss\fcharset0\fprq1 MS Dialog;}{\f46\fnil\fcharset0\fprq2 Courier Neu;}{\f47\froman\fcharset0\fprq0 TimesNewRomanPS;}{\f48\fswiss\fcharset2\fprq2 GreekMathSymbols;}{\f49\fnil\fcharset77\fprq2 New York;}{\f50\fnil\fcharset77\fprq2 Geneva;}
{\f51\fnil\fcharset77\fprq2 Apple Chancery;}{\f52\fnil\fcharset77\fprq2 Chicago;}{\f53\fnil\fcharset77\fprq2 Hoefler Text;}{\f54\fnil\fcharset77\fprq2 Hoefler Text Ornaments;}{\f55\fnil\fcharset77\fprq2 Monaco;}{\f56\fnil\fcharset77\fprq2 Skia;}
{\f57\fnil\fcharset77\fprq2 Tekton Plus Regular;}{\f58\fnil\fcharset77\fprq2 Zapf Dingbats;}{\f59\froman\fcharset238\fprq2 Times New Roman CE{\*\falt Times};}{\f60\froman\fcharset204\fprq2 Times New Roman Cyr{\*\falt Times};}
{\f61\froman\fcharset161\fprq2 Times New Roman Greek{\*\falt Times};}{\f62\froman\fcharset162\fprq2 Times New Roman Tur{\*\falt Times};}{\f63\froman\fcharset186\fprq2 Times New Roman Baltic{\*\falt Times};}
{\f64\froman\fcharset238\fprq2 TIMES CE{\*\falt Times New Roman};}{\f65\froman\fcharset204\fprq2 TIMES Cyr{\*\falt Times New Roman};}{\f66\froman\fcharset161\fprq2 TIMES Greek{\*\falt Times New Roman};}
{\f67\froman\fcharset162\fprq2 TIMES Tur{\*\falt Times New Roman};}{\f68\froman\fcharset186\fprq2 TIMES Baltic{\*\falt Times New Roman};}{\f69\froman\fcharset0\fprq2 Garamond;}{\f70\fswiss\fcharset238\fprq2 Arial CE{\*\falt Helvetica};}
{\f71\fswiss\fcharset204\fprq2 Arial Cyr{\*\falt Helvetica};}{\f72\fswiss\fcharset161\fprq2 Arial Greek{\*\falt Helvetica};}{\f73\fswiss\fcharset162\fprq2 Arial Tur{\*\falt Helvetica};}{\f74\fswiss\fcharset186\fprq2 Arial Baltic{\*\falt Helvetica};}
{\f75\fmodern\fcharset238\fprq1 Courier New CE;}{\f76\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f77\fmodern\fcharset161\fprq1 Courier New Greek;}{\f78\fmodern\fcharset162\fprq1 Courier New Tur;}{\f79\fmodern\fcharset186\fprq1 Courier New Baltic;}
{\f80\fswiss\fcharset238\fprq2 HELVETICA CE{\*\falt Arial};}{\f81\fswiss\fcharset204\fprq2 HELVETICA Cyr{\*\falt Arial};}{\f82\fswiss\fcharset161\fprq2 HELVETICA Greek{\*\falt Arial};}{\f83\fswiss\fcharset162\fprq2 HELVETICA Tur{\*\falt Arial};}
{\f84\fswiss\fcharset186\fprq2 HELVETICA Baltic{\*\falt Arial};}{\f85\froman\fcharset238\fprq2 Garamond CE;}{\f86\froman\fcharset204\fprq2 Garamond Cyr;}{\f87\froman\fcharset161\fprq2 Garamond Greek;}{\f88\froman\fcharset162\fprq2 Garamond Tur;}
{\f89\froman\fcharset186\fprq2 Garamond Baltic;}{\f90\fswiss\fcharset0\fprq2 Tahoma;}{\f91\fnil\fcharset177\fprq2 Miriam;}{\f92\fnil\fcharset177\fprq2 David;}{\f93\fmodern\fcharset0\fprq1 Courier (PCL6);}
{\f94\fmodern\fcharset177\fprq2 TIMES NEW ROMAN (HEBREW){\*\falt Times};}{\f95\fmodern\fcharset177\fprq2 Narkisim;}{\f96\fmodern\fcharset177\fprq1 COURIER NEW (HEBREW);}{\f97\froman\fcharset178\fprq2 Times New Roman (Arabic){\*\falt Times};}
{\f98\fswiss\fcharset177\fprq2 Arial (Hebrew){\*\falt Helvetica};}{\f99\fswiss\fcharset178\fprq2 Arial (Arabic){\*\falt Helvetica};}{\f100\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f101\fmodern\fcharset177\fprq2 Symbol (Hebrew);}
{\f102\froman\fcharset177\fprq2 TIMES (Hebrew){\*\falt Times New Roman};}{\f103\froman\fcharset178\fprq2 TIMES (Arabic){\*\falt Times New Roman};}{\f104\fswiss\fcharset177\fprq2 HELVETICA (Hebrew){\*\falt Arial};}
{\f105\fswiss\fcharset178\fprq2 HELVETICA (Arabic){\*\falt Arial};}{\f106\fswiss\fcharset177\fprq1 Courier (Hebrew);}{\f107\fswiss\fcharset177\fprq2 Geneva (Hebrew);}{\f108\fswiss\fcharset177\fprq2 Tms Rmn (Hebrew);}
{\f109\fswiss\fcharset177\fprq2 Helv (Hebrew);}{\f110\fswiss\fcharset177\fprq2 MS Serif (Hebrew);}{\f111\fswiss\fcharset177\fprq2 MS Sans Serif (Hebrew);}{\f112\fswiss\fcharset177\fprq2 New York (Hebrew);}{\f113\fswiss\fcharset177\fprq2 System (Hebrew);}
{\f114\fswiss\fcharset177\fprq2 Wingdings (Hebrew);}{\f115\fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f116\fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f117\fswiss\fcharset177\fprq1 Courier (PCL6) (Hebrew);}
{\f118\fswiss\fcharset177\fprq2 Apple Chancery (Hebrew);}{\f119\fswiss\fcharset177\fprq2 Book Antiqua (Hebrew);}{\f120\fswiss\fcharset177\fprq2 Chicago (Hebrew);}{\f121\fswiss\fcharset177\fprq2 Hoefler Text (Hebrew);}
{\f122\fswiss\fcharset177\fprq2 Hoefler Text Ornaments (Hebrew);}{\f123\fswiss\fcharset177\fprq2 Monaco (Hebrew);}{\f124\fswiss\fcharset177\fprq2 Monotype Sorts (Hebrew);}{\f125\fswiss\fcharset177\fprq2 Palatino (Hebrew);}
{\f126\fswiss\fcharset177\fprq2 Skia (Hebrew);}{\f127\fswiss\fcharset177\fprq2 Tekton Plus Regular (Hebrew);}{\f128\fswiss\fcharset177\fprq2 Zapf Dingbats (Hebrew);}{\f129\froman\fcharset177\fprq2 Century Gothic (Hebrew);}
{\f130\froman\fcharset177\fprq0 Monotype Corsiva (Hebrew);}{\f131\froman\fcharset177\fprq2 Century Schoolbook (Hebrew);}{\f132\froman\fcharset177\fprq2 MT Extra (Hebrew);}{\f133\froman\fcharset177\fprq0 MS LineDraw (Hebrew);}
{\f134\froman\fcharset177\fprq2 Algerian (Hebrew);}{\f135\froman\fcharset177\fprq2 Arial Rounded MT Bold (Hebrew);}{\f136\froman\fcharset177\fprq2 Braggadocio (Hebrew);}{\f137\froman\fcharset177\fprq2 Britannic Bold (Hebrew);}
{\f138\froman\fcharset177\fprq2 Brush Script MT (Hebrew);}{\f139\froman\fcharset177\fprq2 Colonna MT (Hebrew);}{\f140\fdecor\fcharset177\fprq2 Footlight MT Light (Hebrew);}{\f141\fswiss\fcharset177\fprq2 Kino MT (Hebrew);}
{\f142\fswiss\fcharset177\fprq2 Wide Latin (Hebrew);}{\f143\fswiss\fcharset177\fprq2 Matura MT Script Capitals (Hebr;}{\f144\fswiss\fcharset177\fprq2 Playbill (Hebrew);}{\f145\fswiss\fcharset177\fprq0 AvantGarde (Hebrew);}
{\f146\fswiss\fcharset177\fprq0 Bookman (Hebrew){\*\falt Bookman Old Style};}{\f147\fswiss\fcharset177\fprq0 Helvetica-Narrow (Hebrew);}{\f148\fswiss\fcharset177\fprq0 NewCenturySchlbk (Hebrew);}{\f149\fswiss\fcharset177\fprq0 ZapfChancery (Hebrew);}
{\f150\fswiss\fcharset177\fprq0 ZapfDingbats (Hebrew);}{\f151\fswiss\fcharset177\fprq0 Roman (Hebrew);}{\f152\fswiss\fcharset177\fprq0 Script (Hebrew);}{\f153\fswiss\fcharset177\fprq0 Modern (Hebrew);}{\f154\fswiss\fcharset177\fprq0 MS Dialog (Hebrew);}
{\f155\froman\fcharset204\fprq2 TIMES NEW ROMAN CE Cyr;}{\f156\froman\fcharset161\fprq2 TIMES NEW ROMAN CE Greek;}{\f157\froman\fcharset162\fprq2 TIMES NEW ROMAN CE Tur;}{\f158\froman\fcharset177\fprq2 TIMES NEW ROMAN CE (Hebrew);}
{\f159\froman\fcharset178\fprq2 TIMES NEW ROMAN CE (Arabic);}{\f160\froman\fcharset186\fprq2 TIMES NEW ROMAN CE Baltic;}{\f161\froman\fcharset238\fprq2 TIMES NEW ROMAN CYR CE;}{\f162\froman\fcharset161\fprq2 TIMES NEW ROMAN CYR Greek;}
{\f163\froman\fcharset162\fprq2 TIMES NEW ROMAN CYR Tur;}{\f164\froman\fcharset177\fprq2 TIMES NEW ROMAN CYR (Hebrew);}{\f165\froman\fcharset178\fprq2 TIMES NEW ROMAN CYR (Arabic);}{\f166\froman\fcharset186\fprq2 TIMES NEW ROMAN CYR Baltic;}
{\f167\froman\fcharset238\fprq2 TIMES NEW ROMAN GREEK CE;}{\f168\froman\fcharset204\fprq2 TIMES NEW ROMAN GREEK Cyr;}{\f169\froman\fcharset162\fprq2 TIMES NEW ROMAN GREEK Tur;}{\f170\froman\fcharset177\fprq2 TIMES NEW ROMAN GREEK (Hebrew);}
{\f171\froman\fcharset178\fprq2 TIMES NEW ROMAN GREEK (Arabic);}{\f172\froman\fcharset186\fprq2 TIMES NEW ROMAN GREEK Baltic;}{\f173\froman\fcharset238\fprq2 TIMES NEW ROMAN TUR CE;}{\f174\froman\fcharset204\fprq2 TIMES NEW ROMAN TUR Cyr;}
{\f175\froman\fcharset161\fprq2 TIMES NEW ROMAN TUR Greek;}{\f176\froman\fcharset177\fprq2 TIMES NEW ROMAN TUR (Hebrew);}{\f177\froman\fcharset178\fprq2 TIMES NEW ROMAN TUR (Arabic);}{\f178\froman\fcharset186\fprq2 TIMES NEW ROMAN TUR Baltic;}
{\f179\fswiss\fcharset204\fprq2 ARIAL CE Cyr;}{\f180\fswiss\fcharset161\fprq2 ARIAL CE Greek;}{\f181\fswiss\fcharset162\fprq2 ARIAL CE Tur;}{\f182\fswiss\fcharset177\fprq2 ARIAL CE (Hebrew);}{\f183\fswiss\fcharset178\fprq2 ARIAL CE (Arabic);}
{\f184\fswiss\fcharset186\fprq2 ARIAL CE Baltic;}{\f185\fswiss\fcharset238\fprq2 ARIAL CYR CE;}{\f186\fswiss\fcharset161\fprq2 ARIAL CYR Greek;}{\f187\fswiss\fcharset162\fprq2 ARIAL CYR Tur;}{\f188\fswiss\fcharset177\fprq2 ARIAL CYR (Hebrew);}
{\f189\fswiss\fcharset178\fprq2 ARIAL CYR (Arabic);}{\f190\fswiss\fcharset186\fprq2 ARIAL CYR Baltic;}{\f191\fswiss\fcharset238\fprq2 ARIAL GREEK CE;}{\f192\fswiss\fcharset204\fprq2 ARIAL GREEK Cyr;}{\f193\fswiss\fcharset162\fprq2 ARIAL GREEK Tur;}
{\f194\fswiss\fcharset177\fprq2 ARIAL GREEK (Hebrew);}{\f195\fswiss\fcharset178\fprq2 ARIAL GREEK (Arabic);}{\f196\fswiss\fcharset186\fprq2 ARIAL GREEK Baltic;}{\f197\fswiss\fcharset238\fprq2 ARIAL TUR CE;}{\f198\fswiss\fcharset204\fprq2 ARIAL TUR Cyr;}
{\f199\fswiss\fcharset161\fprq2 ARIAL TUR Greek;}{\f200\fswiss\fcharset177\fprq2 ARIAL TUR (Hebrew);}{\f201\fswiss\fcharset178\fprq2 ARIAL TUR (Arabic);}{\f202\fswiss\fcharset186\fprq2 ARIAL TUR Baltic;}
{\f203\fmodern\fcharset204\fprq1 COURIER NEW CE Cyr;}{\f204\fmodern\fcharset161\fprq1 COURIER NEW CE Greek;}{\f205\fmodern\fcharset162\fprq1 COURIER NEW CE Tur;}{\f206\fmodern\fcharset177\fprq1 COURIER NEW CE (Hebrew);}
{\f207\fmodern\fcharset178\fprq1 COURIER NEW CE (Arabic);}{\f208\fmodern\fcharset186\fprq1 COURIER NEW CE Baltic;}{\f209\fmodern\fcharset238\fprq1 COURIER NEW CYR CE;}{\f210\fmodern\fcharset161\fprq1 COURIER NEW CYR Greek;}
{\f211\fmodern\fcharset162\fprq1 COURIER NEW CYR Tur;}{\f212\fmodern\fcharset177\fprq1 COURIER NEW CYR (Hebrew);}{\f213\fmodern\fcharset178\fprq1 COURIER NEW CYR (Arabic);}{\f214\fmodern\fcharset186\fprq1 COURIER NEW CYR Baltic;}
{\f215\fmodern\fcharset238\fprq1 COURIER NEW GREEK CE;}{\f216\fmodern\fcharset204\fprq1 COURIER NEW GREEK Cyr;}{\f217\fmodern\fcharset162\fprq1 COURIER NEW GREEK Tur;}{\f218\fmodern\fcharset177\fprq1 COURIER NEW GREEK (Hebrew);}
{\f219\fmodern\fcharset178\fprq1 COURIER NEW GREEK (Arabic);}{\f220\fmodern\fcharset186\fprq1 COURIER NEW GREEK Baltic;}{\f221\fmodern\fcharset238\fprq1 COURIER NEW TUR CE;}{\f222\fmodern\fcharset204\fprq1 COURIER NEW TUR Cyr;}
{\f223\fmodern\fcharset161\fprq1 COURIER NEW TUR Greek;}{\f224\fmodern\fcharset177\fprq1 COURIER NEW TUR (Hebrew);}{\f225\fmodern\fcharset178\fprq1 COURIER NEW TUR (Arabic);}{\f226\fmodern\fcharset186\fprq1 COURIER NEW TUR Baltic;}
{\f227\fdecor\fcharset161\fprq2 Desdemona Greek;}{\f228\fswiss\fcharset238\fprq2 Tahoma CE;}{\f229\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f230\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f231\fswiss\fcharset162\fprq2 Tahoma Tur;}
{\f232\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f233\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f234\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f235\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f236\fswiss\fcharset162\fprq2 Arial Narrow Tur;}
{\f237\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}{\f238\froman\fcharset238\fprq2 Bookman Old Style CE;}{\f239\froman\fcharset204\fprq2 Bookman Old Style Cyr;}{\f240\froman\fcharset161\fprq2 Bookman Old Style Greek;}
{\f241\froman\fcharset162\fprq2 Bookman Old Style Tur;}{\f242\froman\fcharset186\fprq2 Bookman Old Style Baltic;}{\f243\fswiss\fcharset238\fprq2 Century Gothic CE;}{\f244\fswiss\fcharset204\fprq2 Century Gothic Cyr;}
{\f245\fswiss\fcharset161\fprq2 Century Gothic Greek;}{\f246\fswiss\fcharset162\fprq2 Century Gothic Tur;}{\f247\fswiss\fcharset186\fprq2 Century Gothic Baltic;}{\f248\fswiss\fcharset238\fprq2 Impact CE;}{\f249\fswiss\fcharset204\fprq2 Impact Cyr;}
{\f250\fswiss\fcharset161\fprq2 Impact Greek;}{\f251\fswiss\fcharset162\fprq2 Impact Tur;}{\f252\fswiss\fcharset186\fprq2 Impact Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ri100\sb80\sa80\nowidctlpar \f8\lang1024 \snext0 Normal;}{\s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 \sbasedon0\snext0 heading 1;}{\s2\ri-2\sb240\sa240\keepn\nowidctlpar 
\b\scaps\f8\fs28\lang1024 \sbasedon1\snext0 heading 2;}{\s3\ri-2\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 \sbasedon2\snext0 heading 3;}{\s4\sb240\keepn\nowidctlpar \scaps\f8\fs20\lang1024 \sbasedon3\snext0 heading 4;}{
\s5\sb60\sa60\keepn\nowidctlpar \b\f8\ul\lang1024 \sbasedon4\snext0 heading 5;}{\s6\li720\ri100\sb80\sa80\nowidctlpar \f8\ul\lang1024 \sbasedon0\snext0 heading 6;}{\s7\li720\ri100\sb80\sa80\nowidctlpar \i\f8\lang1024 \sbasedon0\snext0 heading 7;}{
\s8\li720\ri100\sb80\sa80\nowidctlpar \i\f8\lang1024 \sbasedon0\snext0 heading 8;}{\s9\li720\ri100\sb80\sa80\nowidctlpar \i\f8\lang1024 \sbasedon0\snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li560\ri100\sb80\sa80\nowidctlpar 
\b\f8\fs28\lang1024 \sbasedon0\snext15 ~author;}{\s16\li280\ri574\sa120\nowidctlpar \f8\fs22\lang1024 \sbasedon17\snext17 ~manual description;}{\s17\fi-560\li560\ri294\sb160\sa40\keepn\nowidctlpar\tqr\tx9920 \f8\fs22\lang1024 \sbasedon0\snext16 
~manual-entry;}{\s18\li560\ri100\sb1440\sa360\keepn\nowidctlpar \b\f8\fs72\lang1024 \sbasedon0\snext18 ~Title;}{\s19\ri100\sb80\sa120\nowidctlpar \f8\fs22\lang1024 \sbasedon0\snext19 Body Text;}{\s20\ri100\sb120\sa120\nowidctlpar \b\f8\lang1024 
\sbasedon0\snext0 caption;}{\s21\ri100\sb80\sa80\keep\keepn\nowidctlpar\box\brdrs\brdrw15 \tx1040\tx1720\tx2380\tx3260\tx3820\tx4640\tx5380\tx6000\tx6620\tx7220\tx8100\tx8700\posxc\posyt\dxfrtext180\dfrmtxtx180\dfrmtxty180 \f8\fs18\lang1024 
\sbasedon22\snext21 con-tab;}{\s22\ri100\sb80\sa80\nowidctlpar \f8\lang1024 \sbasedon0\snext22 footnote text;}{\*\cs23 \additive\super \sbasedon10 endnote reference;}{\s24\qc\li300\ri274\sb120\sa120\nowidctlpar\box\brdrs\brdrw15 \f8\lang1024 
\sbasedon0\snext24 figura;}{\s25\ri100\sb80\sa80\sl360\slmult1\nowidctlpar \f8\lang1024 \sbasedon0\snext25 footer;}{\*\cs26 \additive\fs16\up6 \sbasedon10 footnote reference;}{\s27\ri100\sb80\sa80\nowidctlpar\tqc\tx4320\tqr\tx8640 \f8\lang1024 
\sbasedon0\snext0 header;}{\s28\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 \sbasedon1\snext28 Heading 1 No Title;}{\s29\fi-240\li240\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 \sbasedon0\snext0 index 1;}{
\s30\fi-240\li480\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 \sbasedon29\snext0 index 2;}{\s31\fi-240\li720\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 \sbasedon30\snext0 index 3;}{\s32\fi-240\li960\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 
\sbasedon31\snext0 index 4;}{\s33\fi-240\li1200\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 \sbasedon0\snext0 index 5;}{\s34\fi-240\li1440\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 \sbasedon0\snext0 index 6;}{
\s35\fi-240\li1680\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 \sbasedon0\snext0 index 7;}{\s36\fi-340\li340\ri100\sb60\sa60\nowidctlpar \f8\lang1024 \sbasedon0\snext0 Itemized;}{\s37\fi-340\li640\ri294\sa120\nowidctlpar \f8\lang1024 
\sbasedon36\snext37 Itemized 2;}{\s38\fi-340\li1020\ri294\sa120\nowidctlpar \f8\lang1024 \sbasedon37\snext38 itemized 3;}{\s39\fi-440\li800\ri100\nowidctlpar \f8\lang1024 \sbasedon36\snext39 Itemized2;}{\s40\fi-388\li1160\ri100\sb60\sa60\nowidctlpar 
\f8\lang1024 \sbasedon36\snext40 itemized3;}{\*\cs41 \additive\fs20 \sbasedon10 line number;}{\s42\li360\ri101\sb80\sa80\nowidctlpar \f3\lang1024 \sbasedon0\snext42 listing;}{\*\cs43 \additive\sbasedon10 page number;}{
\s44\fi-360\li360\ri100\sb80\sa80\keep\nowidctlpar \f8\lang1024 \sbasedon0\snext44 Reference;}{\s45\qj\sb40\sa40\nowidctlpar \f8\lang1024 \sbasedon0\snext45 Table Entry;}{\s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 \sbasedon0\snext0 
toc 1;}{\s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 \sbasedon46\snext0 toc 2;}{\s48\li480\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 \sbasedon47\snext0 toc 3;}{\s49\li720\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 
\sbasedon48\snext0 toc 4;}{\s50\li960\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 \sbasedon49\snext0 toc 5;}{\s51\li1200\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 \sbasedon50\snext0 toc 6;}{\s52\li1440\ri100\nowidctlpar\tqr\tx8306 
\f4\fs20\lang1024 \sbasedon0\snext0 toc 7;}{\s53\li1680\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 \sbasedon0\snext0 toc 8;}{\s54\li1920\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 \sbasedon0\snext0 toc 9;}{\*\cs55 \additive\fs16 \sbasedon10 
annotation reference;}{\s56\ri100\sb80\sa80\nowidctlpar \f8\fs20\lang1024 \sbasedon0\snext56 annotation text;}{\s57\fi-283\li566\ri100\sb80\sa80\nowidctlpar \f8\lang1024 \sbasedon0\snext57 List 2;}{
\s58\fi-283\li566\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvl11\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}\f8\lang1024 \sbasedon0\snext58 List Bullet 2;}{\s59\li283\ri100\sb80\sa120\nowidctlpar \f8\lang1024 \sbasedon0\snext59 Body Text Indent;}{
\s60\li283\ri100\sb80\sa120\nowidctlpar \f8\lang1024 \sbasedon59\snext60 Body Text 3;}{\s61\li283\ri100\sb80\sa120\nowidctlpar \f8\lang1024 \sbasedon59\snext61 Body Text 4;}{\s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 \sbasedon0\snext62 
example;}{\s63\fi-240\li1920\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 \sbasedon0\snext0 index 8;}{\s64\fi-240\li2160\ri100\nowidctlpar\tqr\tx8306 \f8\fs18\lang1024 \sbasedon0\snext0 index 9;}{\s65\qc\ri100\sb240\sa120\nowidctlpar\box
\brdrsh\brdrdb\brdrw15 \b\f9\fs22\lang1024 \sbasedon0\snext29 index heading;}{\s66\fi-408\li1128\ri102\nowidctlpar \b\f3\fs20\lang2057 \sbasedon0\snext66 e;}{\s67\fi-410\li410\ri-482\sb40\sa40\nowidctlpar \f3\fs22\lang2057 \sbasedon0\snext67 exampl;}{
\s68\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs36\lang1024 \sbasedon2\snext68 Heading2a;}}{\info{\title LE 2444_FACILE}{\author ITC}{\operator ITC}{\creatim\yr1998\mo10\dy14\hr12\min16}{\printim\yr1998\mo10\dy15\hr16\min48}{\version1}{\edmins66}
{\nofpages0}{\nofwords0}{\nofchars0}{\vern49203}}\paperw11901\paperh16817\margl1440\margr1440\margt1622\margb1400 \widowctrl\ftnbj\aenddoc\hyphhotz283\hyphcaps0\formshade \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\titlepg {\header 
\pard\plain \s27\ri100\sb80\sa80\nowidctlpar\tqc\tx4320\tqr\tx8640 \f8\lang1024 Fabio Ciravegna\tab \tab ITC-irst
\par }{\footer \trowd \trgaph108\trleft-108 \cellx8364 \pard\plain \sb80\intbl \f8\lang1024 Pinocchio V3.1                                            {\field{\*\fldinst  DATE  \\l }{\fldrslt 05/07/99}}                                        {\field{\*\fldinst 
{\cs43  PAGE }}{\fldrslt {\cs43 3}}}\cell \pard \intbl \row \trowd \trgaph108\trleft-108 \cellx8364 \pard \sb80\intbl \cell \pard \intbl \row \pard 
\par }{\footerf \pard\plain \s25\qc\ri100\sb80\sa80\sl360\slmult1\nowidctlpar \f8\lang1024 
\par }{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\ri100\sb80\sa80\nowidctlpar\pvpara\phpg\posx1452\posy2842\dxfrtext180\dfrmtxtx180\dfrmtxty0 \f8\lang1024 {\b\scaps\fs28\lang2057 Fabio Ciravegna}
 
\par 
\par {{\pict\wmetafile8\picw8316\pich7262\picwgoal4715\pichgoal4117 \picscalex110\picscaley110 
0100090000037623000008007815000000000e00000026060f001200ffffffff000008000000aafcbbf708042afe0a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02bbf7aafc050000000c026f065e072b020000f700000313010000000000ffff003333cc0042b5e7005239630063738400840010008c001800947b8400a59c9c00c0c0
c000c6002100de7b7300dece0000f79c7300ffceb500ffef0000ffef6300ffffff0000000000fffffe019b9b9b02fffe0003807f0004ffff6605ff00fe0680008007ff66ff080000fe0900007e0a6666ff0ba0615f0cbf1f2f0d5f0f170ed979820f00fffe1000807f1166ffff1261616113ffff2a149d9d9d1580801516ff
ff7e1716161618c7c7c7198787871a9494941bff05651c5a63631d21848c1e08638c1f00314a2000109c210010ff222131ff23bd4a18249c8c7b25adc69c26ffffbf27ffff3f28ffbfff29ffbfbf2affbf7f2bffbf3f2cffbf002dff7fff2eff7fbf2fff7f3f30ff7f0031ff3fff32ff3fbf33ff3f7f34ff3f3f35ff3f0036
ff00bf37ff007f38ff003f39bfffff3abfffbf3bbfff7f3cbfff3f3dbfff003ebfbfff3fbfbf7f40bfbf3f41bf7fff42bf7fbf43bf7f7f44bf7f3f45bf7f0046bf3fff47bf3fbf48bf3f7f49bf3f3f4abf3f004bbf00ff4cbf007f4dbf003f4e7fffff4f7fffbf507fff3f517fff00527fbfff537fbfbf547fbf7f557fbf3f
567fbf00577f7fbf587f7f3f597f3fff5a7f3fbf5b7f3f7f5c7f3f3f5d7f3f005e7f00ff5f7f00bf607f003f613fffff623fffbf633fff7f643fff3f653fff00663fbfff673fbfbf683fbf7f693fbf3f6a3fbf006b3f7fff6c3f7fbf6d3f7f7f6e3f7f3f6f3f7f00703f3fff713f3fbf723f3f7f733f3f3f743f3f00753f00
ff763f00bf773f007f783f003f793f00007a00ffbf7b00ff7f7c00ff3f7d00bfff7e00bf7f7f00bf3f80007fff81007fbf82007f3f83003fff84003fbf85003f7f86003f3f87003f008800003f8900dfdf8a00cfcf8b00bfbf8c00afaf8d009f9f8e008f8f8f007f7f90ff00ff91df00df92cf00cf93bf00bf94af00af959f
009f968f008f977f007f98dfdf0099cfcf009abfbf009bafaf009c9f9f009d8f8f009e7f7f009f00df00a000cf00a100bf00a200af00a3009f00a4008f00a5007f00a6df0000a7cf0000a8bf0000a9af0000aa9f0000ab8f0000ac7f0000ad0000dfae0000cfaf0000bfb00000afb100009fb200008fb300007fb4dfdfdfb5
cfcfcfb6afafafb79f9f9fb88f8f8fb9ff66ccba00373cbb00ffffbcff6633bd222222be429aa7bf9999ffc0008000c1333366c26666ccc3808080c4808000c5800000c6008080c7ffffccc8990066c9c0c0c0ca395f60cbafcfd0ccbebebecd696969ce2f4f4fcf40a0c0d0f4f4f4d1666666d2b7b7b7d3ccccccd4840010
d58c0018d6c60021d7947b84d8523963d9637384da42b5e7dbdece00dcffef00ddffef63deffceb5dff79c73e0de7b73e1a59c9ce200fa9ae34c4c4ce4bfbfbfe57f7f7fe6e9e9e9e7000080e87f7feae9d5d5d5ea0000d5eb999999ec990000edff7f7feeff0000ef26867df0a0f0e8f140e0d0f25f9ea0f3999900f4ffff
7ff5ffff00f6009900f77fff7ff800ff00f9000099fa7f7ffffb0000fffcd3d3d3fd000000feffffffff04000000340200000300000035000e00000026060f001200ffffffff000008000000b0feb9f75502b4fc08000000fa02050000000000ffffff00040000002d01010007000000fc020100000000000000040000002d
010200030000001e00070000001604b4fc5502b9f7b0fe0b00000026060f000c00544e50500200020000000300030000001e00040000002e010000050000000a020000000005000000090200000000050000000102ffffff0007000000fc020000ffffff000000040000002d01030008000000fa0200000000000000000000
040000002d0104001100000026060f001800ffffffff00001000c0090000c0060000c80c0000e80a00000900000026060f000800ffffffff020000001700000026060f002300ffffffff04001b00544e5050140070f000300000000014000000440d84000000000000000a00000026060f000a00544e505000000200f40309
00000026060f000800ffffffff030000000e00000026060f001200544e5050040008000000010001000000000008000000fa0205000100010000000002040000002d010500040000002d0102001000000026060f001600ffffffff0000bf090000bf060000c10c0000e10a0000040000000701030078150000430f2000cc00
0000b500710000000000f1049b03b9f7b0fe2800000071000000b500000001000400000000006c2a000077b900009ab800001000000010000000000000001000840018008c002100c6006339520084736300847b9400737bde009c9ca500739cf700e7b5420000cede00b5ceff0000efff0063efff00ffffff00ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffebbbbbbbbdeffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbbbbbbbbbbbefffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffff
fffffffffffffffffffffffffffffffff8dbbbbbdbbbbdeffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbbbdddddddddbffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffbbdddddddddddffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffebbddddddddbeffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffcdddddddddddeffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbbdddddddddeffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8bbddddd
ddddeffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffcfffffffffffedbbddddddddcffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffacffffffffffb1dbddddddddffffffffff
ffffffffffffffffffcffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffcfcffffffffffcbdbbdddddddbfffffffffffffffffffffffffcfcacfccffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffeb3dddddddddeffffffffffffffffffffffcf
faccfcfa88cffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffcffffcfffffbdbbdddddddbefffffffffffffffffffffcaf8cffca8cfffcfffffff0000000ffffffffffffffffffffcebcffffffffffffffffffffacffc78c7fffcb3dbddddddddefffffffffffffffffffcf6cfff58fffffff8ff
fffff0000000ffffffffffffffffffceddddffffffffffffffffffcfcffc8ffffcffb7bbbddddddddcffffffffffffffffffca8fff88ffffffffcffffffff0000000ffffffffffffffffedddbbddcfffffffffffffffffffff7cffffffffbbbbdddddddddfffffffffffffffcfc8fcfc88fffffff688a88ffffff0000000ff
ffffffffffffeddddddb7bdcffffffffffffffffffcccffffffffcbbbbddbddddddffffffffffffffcacacff8acfffff888ffffc6ffffff0000000ffffffffffffedddddddb133bdffffffffffffffffffc8fffffffffbbbbbddbbddddbffffffffffffff8ccfa6cffacfc6cfffff88f5cfffff0000000fffffffffceddddd
dddb73333ddfffffffffffffffff7ffffffffffbbbbdb3333dddeffffffffffff88fff88fcffc88afffcac8ffc6acffff0000000fffffffcdddddddddddd33333ddefffffffffffffff7ffffffffffcbbbddb3333dddeffffffffff88fff58fffffc6ffcf68fcff888fcaffff0000000fffffcddddddddddddddb333bdddcf
fffffffffffff8fffffffffffebbdb93333bddeffffffffc8ffc88fffffc8acff88ffca88fffff8ffff0000000fffeddddddddddddddddddbbddddcffffffffffffaaaffffffffffffbbddb3333dddffffffff6fff6afffff8acfff5cfff88fffffffffcfff0000000fffddddddddddddddddddddddddbffffffffffcfaaaa
aafffffffffffbddbd9bddbdcfffffc8fff6fcfff86fcf888fff88ffffffcf88ccfff0000000ffcdbddddddddddddddddddddddeffffffffffaaaaaaaafffffffffffcbdebeeceecffff8affc6affffc5fffc6ffff58ffffff88acffa8fff0000000ffebddddddddddddddddddddddbcfffffffffaaaaaaaaaaaffffffffff
ffffffffffff8c8fc8acfcff88fff8acff88ffffff888ffffff8fff0000000ffbbbddddddddddddddbdbdbbbeffffffffcaaaaaaaaaaaafffffffffffffffffffff8fffc8cffcf58fff58fff5cffffff58fffffffff8fff0000000ffebbbdddddddddddbbbbbbbbccffffffff7aaaaaaaaaaaaaafffffffffffffffffc8ffc
8acfffa8cff88cff88fffff888fffffffffff88ff0000000ffcbbbbdddddddbbb6bbcccfffffffffff7faaaaaaaaaaaaaaffffffffffffffcf8fff5cfffff6cff68ffcc6fffffc5fffffffffffffff4ff0000000fffebbbddddddbbbeccffffffcfffffffc8ffaaaaaaaaaaaaaaffffffffffffca8ff86fffff88fff6fff88
afffca88ffffffffffffffff5ff0000000ffffbbbbbddbbecffffffffffcfffffff6cfaaaaaaaaaaaaaaaafffffffffff6fff5fffcf88fff5cfcf5fffffc5cfffffffffffffcffff5ff0000000ffffebbbbbbbcfffffffffffff7fffff8cfffaaaaaaaaaaaaaaaafffffffffffcf8fffca88ff86ffca8ffffc88ffffffffff
fffc8fffffccf0000000fffffbbbbbbbffffffffffffff87fff7cffffaaaaaaaaaaaaaaaaaffffffffff8f6fff5cffc5fff5acffff58ffffffffffcff8ffffffff8af0000000fffffcbbbbbffffffffffffffffc8c8cfffffaaaaaaaaaaaaaaaaaaffffffffff8f888fff88ff88cffff88cffffffffffcaccfffcffffffcf0
000000ffffffcbbecffffffffffffffffffffffffffaaaaaaaaaaaaaaaaaaaffffffffff86fff58fff5fffcf88ffffffffffffc8fffffcacfffff8f0000000fffffffffffffffffffffffffffffffffffffaaaaaaaaaaaaaaaaaaaafffffffff8ff86fff88fffff88fffffffffcfccafffff8cfffffffcf0000000ffffffff
fffffffffffffffffffffffffffffcaaaaaaaaaaaaaaaaaaaaffffffffc85fffc5fffff5cfffffffffafaccffff88ffffffffff8f0000000ffffffffffffffffffffffffffffffffffffffaaaaaaaaaaaaaaaaaaaaaffffffca8fff88ffff88fffffffffffc8cffffc8ffffffffffffcf0000000ffffffffffffffffffffff
ffffffffffffffffaaaaaaaaaaaaaaaaaaaaaaffffffcfc88fffff5ffffffffffcf8fffcf8cffffffff8fffffaf0000000fffffffffffffffffffffffffffffffffffffffaaaaaaaaaaaaaaaaaaaaaaffffff8f5ffff88ffffffffcfcacfffca8ffffffff8cffffffcf0000000ffffffffffffffffffffffffffffffffffff
ffaaaaaaaaaaaaaaaaaaaaaaaaffffffcf6f88ffffffffffacffffc8ffffffff88fffffffff8f0000000ffffffffffffffffffffffffffffffffffffffaaaaaaaaaaaaaaaaaaaaaaaaafffff8fc88ffffffffff8cffff88fffffffc8ffffffffffff80000000fffffffffffffffffffffffffffffffffffffffaaaaaaaaaaa
aaaaaaaaaaaaaacffff58fffffffff8cffffc8cffffffaccfffffffffffffcf0000000fffffffffffffffffffffffffffffffffffffffaaaaaaaaaaaaaaaaaaaaaaaaaafffffcffffffff8ffff8caffffffc8cfffffffffc8cfffff0000000fffffffffffffffffffffffffffffffc88acfffaaaaaaaaaaaaaaaaaaaaaaaaa
aacfff8fffffffcfff8cfffffff8cffffffcff8cacfaffff80000000ffffffffffffffffffffffffffffcf68fffc5ffaaaaaaaaaaaaaaaaaaaaaaaaaaaaffffcffffffff88ffffff868ffffffffaf8fffffcffffc0000000ffffffffffffffffffffffffffffa8fffffff5faaaaaaaaaaaaaaaaaaaaaaaaaaaaacffacfffff
ff5ffffccc5fffffffffffcffffffcffff80000000fffffffffffffffffffffffffff5cfffffffff5faaaaaaaaaaaaaaaaaaaaaaaaaaaaafff8ffffff85fff8ffa6ffffffffffcfffffff8ffff80000000ffffffffffffffffffffffffff8fffffffffffc5aaaaaaaaaaaaaaaaaaaaaaaaaaff8ffff6fffff6cf868688ffff
ffffffffffffffffffffc0000000ffffffffffffffffffffffff558ffffffffffff8aaaaaaaaaaaaaaaaaaaaaaafffff8fffff8fffff585c85cfff5ffffff8f8fffffff8ffffa0000000ffffffffffffffffffffff86cc6cffffffffffff5aaaaaaaaaaaaaaaaaafffffffff8fffff6fffff86cccc5ff8cfff8fcfffcfffff
fcffffc0000000ffffffffffffffffffffff8cccc4fffffffffffffaaaaaaaaaaaaaaaffffffffffff8ffffff5cffc4ccccc45555f8cfffffcaffffff8ffff80000000fffffffffffffffffffff88cccc6ffffffffffffaaaaaaaaaaaafaffffffffffffff8fffff8caffa7ccccc48558fffffffffcffffffffffff0000000
fffffffffffffffffffff4458cc5fffffffffffffaaaaaaaaafffffffffffffffffff5ffffff6ffc6cccc88fcfffffffacff8ffffff8fffff0000000fffffffffffffffffff855496684cffffffffffffaaaaafffffffffffffffffffffff8fffff8c6ff48cc86ffffffffcccfff8fff8f8ffffff0000000ffffffffffffff
fffff8f444c848affffffffffffaffffffffffffffffffffffffffff8cfcf8f88586458fffffff8caffffff888fffffffff0000000ffffffffffffffffffff485558c5cffffffffccffffffffffffffffffffffffffffffff88ac8555fffffffffff8fcffff8fffffffffffffff0000000fffffffffffffffffffff556ffff
ffffffffcccccffffffffffffffffffffffffffffffffffff8f8ffffffff88fffff88fffffffffffcffff0000000ffffffffffffffffffffc8ffffffffffffffccccccffffffffffffffffffffffffffffffffff88c8fffff8f8ffff8cfffffffffff8f8fffff0000000ffffffffffffffffffffffffffffffffffffcccccc
ccfffffffffffffffffffffffffffffffffcacffff8fffff88ffffffffffc8cffffffff0000000fffffffffffffffffffffffffffffffffffccccccccccfffffffffffffffffffffffffffffffffcacffffff8cfffffffffc8f8fffffffffcc0000000fffffffffffffffffffffffffffffffffffccccccccccccfffffffff
ffffffffffffffffffffffcf8ffff88ffffffffc88fffffffffff88ff0000000ffffffffffffffffffffffffffffffffffccccccccccccccffffffffffffffffffffffffffffff8f8fffffffffff8f8fffffffffff8cfffff0000000ffffffffffffffffffffffffffffffffffccccccccccccccccffffffffffffffffffff
fffffffffcaffffffffc88fffffffffffc8cfffffff0000000ffcccccccccccfcfcffffffffffffffffccccccccccccccccccfffffffffffffffffffffffffffff8ffff8c8ffffffffffffcc8ffffffffff0000000ffffc997999999999799999999ccccccf9ccccccccccccfccccccffffffffffffffffffffffffff8f8ff
ffffffffffffff88fffffffffffff0000000fffffffc899999999999756999999999999999cccccccccffcccfffffffffffffffffffffffffffcccfffffffffffff8cffffffffffffffff0000000fffffffff577997999946974799997999979999cccccccc7cfcccffffffffffffffffffffffffffffaffffffffffc8cfff
fffffffffffffff0000000ffffffff6fff8998994999994999999799999999cccccc937cccfffffffffffffffffffffffffffffcffffffff8cfffffffffffffffffffff0000000fffffffc8fffff8c96799997769999999997999ccccccc7317fccfffffffffffffffffffffffffffffcffffc8cffffffffffffffffffffff
f0000000fffffff5ffffffc6f58979999499999999999799cccccc7333ccffffffffffffffffffffffffffffff8fcc8ffffffffffffffffffffffffff0000000fffffff6fffffff5f5ffc797949979999999999ccccccc733ccccfffffffffffffffffffffffffffffc8fffffffffffffffffffffffffffff0000000ffffff
f5fffffff5f5ffffcc84467799999999cccccccccc9cccfffffcfffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffff5fffffff5f5fffffff5c9844799999ccccccccccccccccfffff68fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffff8ffffff8cf8cf
ffff8cffc996647ccccccccccccccccccffffff88ffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffff5fffff5fff5fffff5ffffccccc8469ccccccccccccccffffffff8cfffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffc5ff86fffff68ac5ffffcccccc
cc88668ccccccccccccfffffffcacffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffff85cffffffffccfffffcccccccccccc656ccccccccccffffffff8fffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffcccc96ccccccc9c88668c
ccccffffffffcacffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffcccc85ccccccc5ccccc648ccccfffffffacfffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffcccc74cccccc94ccccccc8668cfffffff8f
fffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffccccc60cccccc84cccccccccc855ffffff8ffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffccccc64eccccc60ccccccccccccf888888ffffffffffffffff
fffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffcccccc64cccccc64ccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffcccccc84cccccc849cccccccccccfffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffff0000000fffffffffffffffffffffffffccccccc4cccccc94ccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffcccccccccccccccc5ccccccccccccfffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffff0000000ffffffffffffffffffffffffcccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000
00fffffffffffffffffffffffccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffff
ffffffffffcccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffcccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffccccc
cccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffccccccccccccccccccc
cccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffcccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffcccccccccccccccccccccccccccccccccc
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffccccccccccccccccccccccccccccccccccfffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffccccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffff0000000fffffffffffffffffccccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffccccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffff0000000ffffffffffffffffcccccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffcccccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fff0000000ffffffffffffffffcccccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffccccccccccccccccccccccccccccccccccccccfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffff
fffffffffffccccccccccccccccccccccccccccccccccccccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffcccccccccccccccccccccccccccccccccccccccfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffcccc
ccccccccccccccccccccccccccccccccccccfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffcccccccccccccccccccccccccccccccccccccccfcffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffccccccccccccccccccc
ccccccccccccccccccccc9676ccffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffccccccccccccccccccccccccccccccccccccccccc222222cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffccccccccccccccccccccccccccccccccc
cccccccc2222226ffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffccccccccccccccccccccccccccccccccc9877763622222217ffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffcccccccccccccccccccccccc987724322222222222222223
7ffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffccccccccccccccc77636342222222222222222222222221337ffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffcccfcfcfffff82222222222222222222222222222222133338fffffffffffff
fffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffff8222222222222222222222222222222133333337ffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffff832222222222222222222222222222123333333337fffffffffffffffffffffffffff
fffffffffffffffffffffffff0000000ffffffffffffffffff722222222222222222222222222121333333333333cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffff12222222222222222222222221233333333333333337fffffffffffffffffffffffffffffffffffffffff
fffffffffff0000000ffffffffffffffffc2222222222222222222121313333333333333333331cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffff12121222222222121233333333333333333333333338ffffffffffffffffffffffffffffffffffffffffffffffffffff000
0000ffffffffffffffffff332322131331333333333333333333333333333333cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffc33333333333333333333333333333333333333333cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffff
fffffffff71333333333333333333333333333333333333331cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffff7333333333333333333333333333333333333333fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffc333
333333333333333333333333333333333333cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffc13333333333333333333333333333333333333cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffff7333333333333333
3333333333333333333333cffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffff3333333333333333333333333333333333333fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffff3333333333333333333333333333
33333333fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffff733333333333333333333333333333333333fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffff73333333333333333333333333333333333ffffff
fffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffff3333333333333333333333333333333333fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffc333333333333333333333333333333333ffffffffffffffffffff
fffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffff733333333333333333333333333333333fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffff83333333333333333333333333333337ffffffffffffffffffffffffffffffffff
fffffffffffffffffff0000000ffffffffffffffffffffffffffffc3333333333333333333333333333333fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffc333333333333333333333333333337ffffffffffffffffffffffffffffffffffffffffffffffff
fffff0000000ffffffffffffffffffffffffffffff733333333333333333333333333337fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffc73333333333333333333333333337fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ff
ffffffffffffffffffffffffffffff3333333333333333333333333337fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffc333333333333333333333333337fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffff
fffffffffffffffff71333333333333333333333333cfffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffff73333333333333333333333337fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffff
ffffc333333333333333333333333cfffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffc333333333333333333333338fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffff73333333
333333333333333cfffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffc7333333333333333333331cfffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffc33333333333333333333
3cfffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffff833333333333333333333ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffff73333333333333333333cffffffffffff
fffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffff3333333333333333333ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffc133333333333333333fffffffffffffffffffffffffff
fffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffc33333333333333333ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffff73333333333333333fffffffffffffffffffffffffffffffffffffffff
fffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffff3333333333333331ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffc333333333333337ffffffffffffffffffffffffffffffffffffffffffffffffffffff0
000000ffffffffffffffffffffffffffffffffffffffffffff733333333333333ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffff33333333333333ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffff
ffffffffffffffffffffffffffffffffffffff3333333333317ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffff7333333333333ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffff
fffffffffffffffffffffffff733333333337ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffff33333333333ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffff
ffffffffffffc3333333317ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffff7333333337ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffff
733333337ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffffff33333337ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffff3333337fffff
fffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffff7133337ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffffffff733337fffffffffffffffffff
fffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffffffffc33338ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffc3337fffffffffffffffffffffffffffffffff
fffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffffffffff733cffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff737fffffffffffffffffffffffffffffffffffffffffffffff
fffffff0000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3cffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9ffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000800000026060f000600ffffffff0100040000002d010500040000002d0102000e00000026060f001200544e505004000800000000000000000000000900000026060f
000800ffffffff01000000040000002701ffff04000000f00105000a00000026060f000a00544e5050030000000000040000002d010100040000002d010200040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a9fc3dfc080428fe040000002d010100
040000002d010200030000001e0007000000160428fe08043dfca9fc0b00000026060f000c00544e50500200020000000200030000001e00040000002e010000050000000a020000000005000000090200000000050000000102ffffff00040000002d010300040000002d0104001100000026060f001800ffffffff000010
003d0800004d010000cb0d0000bb0200000900000026060f000800ffffffff020000001700000026060f002300ffffffff04001b00544e5050140070f000300000000014000000440d84000000000000000a00000026060f000a00544e505000000200f4030900000026060f000800ffffffff030000000e00000026060f00
1200544e5050040008000000010001000000000008000000fa0205000100010000000002040000002d010500040000002d0102001000000026060f001600ffffffff00003c0800004c010000c20d0000b2020000040000002d01050007000000fc020000c0c0c0020000040000002d010600800000003805020028001500c2
fc56fcf2fc56fc20fd56fc33fd56fc43fd59fc52fd5bfc5cfd5ffc6dfd67fc75fd6cfc7bfd73fc80fd7bfc84fd83fc89fd96fc8bfda0fc8cfdaffc8dfdbffc8dfdd3fc8dfde6fc8dfdf9fc8dfd0dfd8cfd1efd89fd2cfd85fd38fd81fd41fd7cfd49fd74fd50fd6cfd55fd61fd59fd56fd5dfd48fd5ffd3afd60fd2efd60fd
20fd60fd20fdb9fd20fd13fef2fc13fec2fc13fec2fc35fdc2fc56fcc2fc56fc20fda3fc20fd14fd24fd14fd27fd14fd2efd14fd33fd12fd3afd0cfd3bfd06fd3cfd00fd3efdf6fc3efdebfc3efdc7fc3efdbcfc3cfdb4fc3bfdaefc38fdaafc34fda7fc2ffda4fc28fda3fc20fda3fc20fda3fc2e000000380502000a000a
0002fe56fc02fe74fc02fe90fcd4fd90fca5fd90fca5fd74fca5fd56fcd4fd56fc02fe56fc02fe56fc02fea7fc02fe5cfd02fe13fed4fd13fea5fd13fea5fd5cfda5fda7fcd4fda7fc02fea7fc02fea7fc6000000024032e007ffea7fc7dfeb7fc7cfec9fc81febffc87feb7fc95feaafc9cfea6fca4fea3fcb5fea0fcc1fe
a2fccafea3fcd4fea8fcdcfeaefce8febcfcecfec6fceefecffcf0fedbfcf1feeafcf2fefdfcf2fe14fdf2fe93fdf2fe13fec5fe13fe98fe13fe98fe94fd98fe16fd98fe05fd98fef7fc98feeefc97fee9fc93fee3fc8bfee1fc83fee3fc80fee6fc7ffeeafc7dfef1fc7dfefbfc7cfe0afd7cfe1dfd7cfe13fe4ffe13fe22
fe13fe22fe5cfd22fea7fc50fea7fc7ffea7fcac0000003805020037001c00deff26fddeff7ffddeff96fdddffaafddcffbafddaffc7fdd8ffd2fdd4ffddfdc9fff2fdc1fffcfdb9ff04fea7ff10fe91ff17fe84ff19fe77ff19fe5bff18fe4fff15fe44ff11fe32ff06fe2aff00fe25fff8fd1affe6fd16ffddfd13ffd1fd
12ffc5fd11ffb5fd0fffa1fd0fff8bfd0fff2efd0fff16fd12ff01fd13ffeffc17ffdffc1dffd2fc25ffc6fc2effbbfc39ffb2fc44ffaafc52ffa4fc62ffa2fc73ffa0fc82ffa0fc90ffa3fc9cffa6fca8ffabfcb3ffb2fcbbffb8fcc9ffc9fcd4ffdafcd9ffedfcdcfff7fcddff05fddeff15fddeff26fddeff26fd84ff0a
fd84fffefc83fff5fc83ffedfc82ffe7fc7effe2fc77ffe1fc70ffe2fc6cffe7fc6bffedfc6afff5fc6afffefc6aff0afd6affaffd6affbbfd6affc5fd6bffcbfd6cffd1fd70ffd8fd77ffd9fd7effd8fd82ffd1fd83ffcdfd83ffc6fd84ffbefd84ffb3fd84ff0afd84ff0afdb600000024035900c30030fd980030fd6e00
30fd6e001cfd6e0006fd6e00fbfc6c00f3fc6c00edfc6b00e9fc6700e3fc6000e1fc5a00e2fc5700e5fc5600e7fc5500ebfc5500f2fc5300fbfc530006fd53005cfd5300b2fd5500c2fd5600c9fd5700cefd5c00d6fd5f00d8fd6300d9fd6700d8fd6b00d6fd6e00d2fd6f00cefd7000c9fd7200bffd7300b6fd7300a9fd73
007cfdc3007cfdc30090fdc300a3fdc100b2fdc000befdbf00c9fdbb00d5fdb100eafdab00f5fda300fefd9a0006fe90000dfe860013fe7a0017fe6c0018fe5e0019fe4d0018fe3d0015fe2e0010fe220009fe170000fe0e00f6fd0800eafd0200dcfdfeffcbfdfcffb9fdf9ffa3fdf9ff8afdf9ff57fdf9ff22fdf9ff0dfd
fcfffafcfdffeafc0100ddfc0500d1fc0d00c6fc1600bcfc2100b2fc2e00aafc3d00a4fc4d00a2fc5c00a0fc6e00a2fc7e00a4fc8c00aafc9a00b2fca400bcfcaf00c7fcb500d3fcbb00e1fcbf00f1fcc10002fdc30018fdc30030fdb600000024035900a60130fd7b0130fd510130fd51011cfd510106fd5101fbfc4f01f3
fc4e01edfc4d01e9fc4901e3fc4201e1fc3b01e2fc3a01e5fc3701e7fc3601ebfc3601f2fc3501fbfc350106fd35015cfd3501b2fd3601c2fd3701c9fd3901cefd3e01d6fd4101d8fd4501d9fd4901d8fd4d01d6fd5201cefd5301c9fd5301bffd5501b6fd5501a9fd55017cfd7e017cfda6017cfda60190fda401a3fda401
b2fda301befda201c9fd9e01d5fd9401eafd8e01f5fd8601fefd7c0106fe73010dfe690113fe5d0117fe4f0118fe410119fe2e0118fe1e0115fe100110fe040109fef90000fef100f6fde900eafde400dcfde000cbfddd00b9fddc00a3fddb008afddb0057fddb0022fddb000dfddd00fafcdf00eafce300ddfce800d1fcee
00c6fcf800bcfc0401b2fc1101aafc1e01a4fc2e01a2fc3f01a0fc5101a2fc6101a4fc6e01aafc7b01b2fc8701bcfc9001c7fc9801d3fc9e01e1fca201f1fca40102fda60118fda60130fd64000000240330001a0256fc1a02bbfc2602affc3402a7fc3a02a4fc4202a2fc5102a0fc5d02a2fc6702a4fc7102a8fc7902affc
8102b7fc8602bffc8a02c7fc8c02d1fc8e02ddfc8f02edfc900200fd900218fd900296fd900213fe630213fe360213fe360293fd360212fd360204fd3502f9fc3502effc3402eafc3202e6fc3002e3fc2902e1fc2502e1fc2102e3fc2002e6fc1d02eafc1c02effc1c02f7fc1a0202fd1a020efd1a0290fd1a0213feed0113
fec00113fec00135fdc00156fced0156fc1a0256fc2e000000380502000a000a000d0356fc0d0374fc0d0390fcdf0290fcb00290fcb00274fcb00256fcdf0256fc0d0356fc0d0356fc0d03a7fc0d035cfd0d0313fedf0213feb00213feb0025cfdb002a7fcdf02a7fc0d03a7fc0d03a7fcae0000003805020038001c00f903
26fdf9037ffdf90396fdf803aafdf703bafdf503c7fdf303d2fdef03ddfde403f2fdde03fcfdd60304fecc030afec20310feac0317fea00319fe930319fe770318fe5f0311fe4e0306fe460300fe4003f8fd3603e6fd3203ddfd3003d1fd2d03c5fd2c03b5fd2a03a1fd2a038bfd2a032efd2a0316fd2d0301fd3003effc34
03dffc3903d2fc4003c6fc4903bbfc5403b2fc5f03aafc6e03a4fc7e03a2fc8f03a0fc9e03a0fcab03a3fcb703a6fcc303abfcce03b2fcd703b8fcdf03c0fce403c9fcef03dafcf503edfcf703f7fcf80305fdf90315fdf90326fdf90326fd9f030afd9f03fefc9e03f5fc9e03edfc9d03e7fc9903e2fc9203e1fc8b03e2fc
8703e7fc8603edfc8603f5fc8503fefc85030afd8503affd8503bbfd8603c5fd8603cbfd8703d1fd8b03d8fd9203d9fd9903d8fd9d03d1fd9e03cdfd9e03c6fd9f03befd9f03b3fd9f030afd9f030afd040000002d010500040000002d01020004000000f001060008000000fa0200000800080000ffff02040000002d0106
0007000000fc0200003333cc020000040000002d010700800000003805020028001500adfc41fcddfc41fc0bfd41fc1efd41fc2efd44fc3cfd45fc47fd49fc58fd51fc60fd56fc65fd5dfc6bfd65fc6ffd6dfc74fd80fc75fd8bfc77fd9afc78fdaafc78fdbefc78fdd1fc78fde3fc78fdf7fc77fd09fd74fd16fd70fd22fd
6cfd2cfd67fd34fd5ffd3bfd57fd40fd4cfd44fd40fd48fd33fd49fd24fd4bfd18fd4bfd0bfd4bfd0bfda3fd0bfdfdfdddfcfdfdadfcfdfdadfc20fdadfc41fcadfc41fc0bfd8dfc0bfdfefc0ffdfefc12fdfefc18fdfefc1efdfdfc24fdf6fc26fdf1fc27fdeafc28fde1fc28fdd6fc28fdb2fc28fda7fc27fd9ffc26fd98
fc23fd94fc1ffd92fc1afd8ffc13fd8dfc0bfd8dfc0bfd8dfc2e000000380502000a000a00edfd41fcedfd5ffcedfd7bfcbefd7bfc90fd7bfc90fd5ffc90fd41fcbefd41fcedfd41fcedfd41fcedfd92fcedfd47fdedfdfdfdbefdfdfd90fdfdfd90fd47fd90fd92fcbefd92fcedfd92fcedfd92fc6000000024032e006afe
92fc68fea2fc67feb3fc6cfeaafc71fea2fc80fe94fc87fe90fc8ffe8dfca0fe8bfcacfe8cfcb5fe8dfcbefe93fcc6fe98fcd2fea7fcd6feb0fcd9febafcdafec6fcdcfed5fcddfee7fcddfefefcddfe7efdddfefdfdb0fefdfd83fefdfd83fe7ffd83fe01fd83feeffc83fee2fc83fed9fc81fed3fc7dfecefc75fecbfc6e
fecefc6bfed1fc6afed5fc68fedbfc68fee6fc67fef5fc67fe08fd67fefdfd3afefdfd0dfefdfd0dfe47fd0dfe92fc3bfe92fc6afe92fcac0000003805020037001c00c9ff11fdc9ff6afdc9ff80fdc8ff94fdc7ffa5fdc5ffb2fdc3ffbdfdbfffc7fdb4ffddfdacffe6fda4ffeefd91fffafd7cff01fe6fff04fe62ff04fe
46ff02fe3aff00fe2ffffcfd1dfff1fd15ffeafd0fffe2fd05ffd1fd01ffc7fdfefebbfdfdfeaffdfbfe9ffdfafe8bfdfafe76fdfafe19fdfafe01fdfdfeebfcfefedafc02ffcafc07ffbcfc0fffb0fc19ffa6fc23ff9cfc2fff94fc3dff8ffc4cff8cfc5eff8bfc6cff8bfc7bff8dfc87ff90fc93ff96fc9dff9cfca5ffa3
fcb4ffb3fcbfffc4fcc4ffd7fcc7ffe2fcc8ffeffcc9ff00fdc9ff11fdc9ff11fd6ffff5fc6fffe9fc6effdffc6effd7fc6cffd2fc68ffcdfc62ffcbfc5bffcdfc57ffd2fc56ffd7fc54ffdffc54ffe9fc54fff5fc54ff9afd54ffa6fd54ffaffd56ffb6fd57ffbbfd5bffc2fd62ffc3fd68ffc2fd6cffbbfd6effb7fd6eff
b1fd6fffa9fd6fff9efd6ffff5fc6ffff5fcb600000024035900ad001afd83001afd58001afd580006fd5800f1fc5800e6fc5700defc5700d7fc5600d3fc5200cefc4b00cbfc4500cdfc4200cffc4100d2fc3f00d6fc3f00ddfc3e00e6fc3e00f1fc3e0047fd3e009cfd3f00adfd4100b3fd4200b9fd4700c1fd4a00c2fd4e
00c3fd5200c2fd5600c1fd5800bdfd5a00b9fd5b00b3fd5c00aafd5e00a1fd5e0093fd5e0067fdad0067fdad007bfdad008efdac009cfdab00a9fda900b3fda500bffd9c00d5fd9600e0fd8e00e9fd8400f1fd7b00f8fd7000fdfd640001fe570002fe490004fe370002fe270000fe1900fafd0d00f4fd0200eafdf9ffe1fd
f2ffd5fdedffc6fde9ffb6fde6ffa3fde4ff8efde4ff74fde4ff41fde4ff0dfde4fff7fce6ffe5fce8ffd5fcecffc7fcf0ffbbfcf8ffb0fc0100a7fc0c009cfc190094fc27008ffc37008cfc47008bfc58008cfc68008ffc770094fc84009cfc8f00a7fc9a00b2fca000befca500cbfca900dbfcac00edfcad0002fdad001a
fdb60000002403590090011afd66011afd3b011afd3b0106fd3b01f1fc3b01e6fc3a01defc3901d7fc3701d3fc3301cefc2d01cbfc2601cdfc2501cffc2201d2fc2101d6fc2101ddfc2001e6fc2001f1fc200147fd20019cfd2101adfd2201b3fd2401b9fd2901c1fd2b01c2fd2f01c3fd3301c2fd3701c1fd3d01b9fd3e01
b3fd3e01aafd3f01a1fd3f0193fd3f0167fd690167fd900167fd90017bfd8f018efd8f019cfd8e01a9fd8c01b3fd8801bffd7f01d5fd7801e0fd7001e9fd6701f1fd5e01f8fd5301fdfd470101fe3a0102fe2b0104fe190102fe090100fefa00fafdee00f4fde400eafddc00e1fdd400d5fdcf00c6fdcb00b6fdc800a3fdc7
008efdc50074fdc50041fdc5000dfdc500f7fcc800e5fcc900d5fccd00c7fcd300bbfcd900b0fce300a7fcee009cfcfc0094fc09018ffc19018cfc2a018bfc3b018cfc4b018ffc590194fc66019cfc7201a7fc7b01b2fc8301befc8801cbfc8c01dbfc8f01edfc900102fd90011afd6400000024033000050241fc0502a6fc
11029afc1e0292fc25028ffc2d028cfc3c028bfc47028cfc52028ffc5b0293fc63029afc6b02a2fc7102aafc7502b2fc7702bbfc7902c7fc7a02d7fc7b02eafc7b0202fd7b0280fd7b02fdfd4e02fdfd2102fdfd21027efd2102fdfc2102eefc2002e3fc2002dafc1e02d5fc1d02d1fc1a02cefc1402cbfc1002cbfc0c02ce
fc0a02d1fc0802d5fc0602dafc0602e2fc0502edfc0502f9fc05027bfd0502fdfdd801fdfdab01fdfdab0120fdab0141fcd80141fc050241fc2e000000380502000a000a00f80241fcf8025ffcf8027bfcca027bfc9b027bfc9b025ffc9b0241fcca0241fcf80241fcf80241fcf80292fcf80247fdf802fdfdca02fdfd9b02
fdfd9b0247fd9b0292fcca0292fcf80292fcf80292fcae0000003805020038001c00e40311fde4036afde40380fde30394fde203a5fde003b2fdde03bdfdda03c7fdcf03ddfdc803e6fdc003eefdb703f5fdac03fafd970301fe8b0304fe7e0304fe620302fe4a03fcfd3903f1fd3103eafd2a03e2fd2103d1fd1d03c7fd1a
03bbfd1803affd16039ffd15038bfd150376fd150319fd150301fd1803ebfc1a03dafc1e03cafc2403bcfc2a03b0fc3403a6fc3e039cfc4a0394fc59038ffc69038cfc7a038bfc89038bfc96038dfca20390fcae0396fcb8039cfcc203a3fcca03abfccf03b3fcda03c4fce003d7fce203e2fce303effce40300fde40311fd
e40311fd8a03f5fc8a03e9fc8903dffc8903d7fc8703d2fc8303cdfc7d03cbfc7603cdfc7203d2fc7103d7fc7103dffc6f03e9fc6f03f5fc6f039afd6f03a6fd7103affd7103b6fd7203bbfd7603c2fd7d03c3fd8303c2fd8703bbfd8903b7fd8903b1fd8a03a9fd8a039efd8a03f5fc8a03f5fc040000002d010500040000
00f0010600040000002d01020004000000f00107000800000026060f000600ffffffff0100040000002d010500040000002d0102000e00000026060f001200544e505004000800000000000000000000000900000026060f000800ffffffff01000000040000002701ffff04000000f00105000a00000026060f000a00544e
5050030000000000040000002d010100040000002d010200040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010100040000002d0102000300000000000000000000
000000000000000000000000000000}}
\par {\b\scaps\fs28\lang2057 
\par User Manual V3.1}
\par \pard\plain \s18\qc\li560\ri-483\sb1440\sa360\keepn \b\f8\fs72\lang1024 {\b0\scaps\fs28\lang2057 \page }{\lang2057 Pinocchio V3.1
\par }\pard\plain \qc\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\fs28  Fabio Ciravegna
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\fs28 
\par ITC-irst
\par Centro per la Ricerca Scientifica e Tecnologica
\par via Sommarive 18,
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar\pvpara\phpg\posx4044\posy1363\dxfrtext180\dfrmtxtx180\dfrmtxty0 {\b\fs28\lang2057 {\pict\wmetafile8\picw6350\pich2685\picwgoal3600\pichgoal1522 \picscalex116\picscaley115 
0100090000037136000005003833000000000e00000026060f001200ffffffff00000800000035fddaf9d5023bfc0a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02daf935fd050000000c026102a0050d020000f7000003040100000000003f7f0042b5e700ffffff0000000000fffffe019b9b9b02fffe0003807f0004ffff6605ff00
fe0680008007ff66ff080000fe0900007e0a6666ff0ba0615f0cbf1f2f0d5f0f170ed979820f00fffe1000807f1166ffff1261616113ffff2a149d9d9d1580801516ffff7e1716161618c7c7c7198787871a9494941bff05651c5a63631d21848c1e08638c1f00314a2000109c210010ff222131ff23bd4a18249c8c7b25ad
c69c26ffffbf27ffff3f28ffbfff29ffbfbf2affbf7f2bffbf3f2cffbf002dff7fff2eff7fbf2fff7f3f30ff7f0031ff3fff32ff3fbf33ff3f7f34ff3f3f35ff3f0036ff00bf37ff007f38ff003f39bfffff3abfffbf3bbfff7f3cbfff3f3dbfff003ebfbfff3fbfbf7f40bfbf3f41bf7fff42bf7fbf43bf7f7f44bf7f3f45
bf7f0046bf3fff47bf3fbf48bf3f7f49bf3f3f4abf3f004bbf00ff4cbf007f4dbf003f4e7fffff4f7fffbf507fff3f517fff00527fbfff537fbfbf547fbf7f557fbf3f567fbf00577f7fbf587f7f3f597f3fff5a7f3fbf5b7f3f7f5c7f3f3f5d7f3f005e7f00ff5f7f00bf607f003f613fffff623fffbf633fff7f643fff3f
653fff00663fbfff673fbfbf683fbf7f693fbf3f6a3fbf006b3f7fff6c3f7fbf6d3f7f7f6e3f7f3f6f3f7f00703f3fff713f3fbf723f3f7f733f3f3f743f3f00753f00ff763f00bf773f007f783f003f793f00007a00ffbf7b00ff7f7c00ff3f7d00bfff7e00bf7f7f00bf3f80007fff81007fbf82007f3f83003fff84003f
bf85003f7f86003f3f87003f008800003f8900dfdf8a00cfcf8b00bfbf8c00afaf8d009f9f8e008f8f8f007f7f90ff00ff91df00df92cf00cf93bf00bf94af00af959f009f968f008f977f007f98dfdf0099cfcf009abfbf009bafaf009c9f9f009d8f8f009e7f7f009f00df00a000cf00a100bf00a200af00a3009f00a400
8f00a5007f00a6df0000a7cf0000a8bf0000a9af0000aa9f0000ab8f0000ac7f0000ad0000dfae0000cfaf0000bfb00000afb100009fb200008fb300007fb4dfdfdfb5cfcfcfb6afafafb79f9f9fb88f8f8fb9ff66ccba00373cbb00ffffbcff6633bd222222be429aa7bf9999ffc0008000c1333366c26666ccc3808080c4
808000c5800000c6008080c7ffffccc8990066c9c0c0c0ca395f60cbafcfd0ccbebebecd696969ce2f4f4fcf40a0c0d0f4f4f4d1666666d2b7b7b7d3ccccccd4840010d58c0018d6c60021d7947b84d8523963d9637384da42b5e7dbdece00dcffef00ddffef63deffceb5dff79c73e0de7b73e1a59c9ce200fa9ae34c4c4c
e4bfbfbfe57f7f7fe6e9e9e9e7000080e87f7feae9d5d5d5ea0000d5eb999999ec990000edff7f7feeff0000ef26867df0a0f0e8f140e0d0f25f9ea0f3999900f4ffff7ff5ffff00f6009900f77fff7ff800ff00f9000099fa7f7ffffb0000fffcd3d3d3fd000000feffffffff04000000340200000300000035000e000000
26060f001200ffffffff00000800000034fddaf9d5023cfc08000000fa02050000000000ffffff00040000002d01010007000000fc020100000000000000040000002d010200030000001e000700000016043cfcd502daf934fd0b00000026060f000c00544e50500200020000000300030000001e00040000002e01000005
0000000a020000000005000000090200000000050000000102ffffff0007000000fc020000ffffff000000040000002d01030008000000fa0200000000000000000000040000002d01040005000000090200000002050000000102ffffff020400000007010300040000000701030038330000430f2000cc0000006700f300
000000006202a105daf934fd28000000f30000006700000001000800000000002c62000000000000000000000000000000000000ffffff007f3f0000e7b54200ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff
00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffff
ff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ff
ffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00
ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff
00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffff
ff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ff
ffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00
ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020202000000020202020200020202020202
02020202000000020200000002020000020202020000000002020002020202020202020000000002020200000002020202020000000000000202000000020202020200000202020202020202000000020202000202020202020000020202020200020202020202000000020202020202000202000202020202020202000000
00000202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202000202000000000002020202000000000202000002020200
00000202000002020202000000000202020202000000000202000000000202000000000202000000000000000000020200000002000000000002020200000000020200000202020202020200000202020002000000000202020000020202000202020000000200020200020200000000020200000000020200000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202020000000000000202020200000000020200000202020000000202000002020202
00000000020202020000000000020202020202020200000000020200000000000000000002020000000200000000000202000000000002020000020202020202000000000202000200000000020200000000020200020200000000020002020202000000000000020202020202020000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020202000000000000020202020000000002020002020002000000020200000202020200000000020202000000
00000000020200000202000000000002020000000000000000000202000000020000000002020000000000000202000202000202020200000000000200020000000002000000000002020002000000000002000202020200000000000002020000000200000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020200020200000000000002020202020202000202000202000200000002020000020202020202020002020200000000000000020200000202
00000000000202020202000000000000020200000002020202020202000000000000020200020200020202020000000000020002000000000200000000000202000200000002020200020202020000000000000002020002020000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020200000002020000000000000202020200000000020202020000020000000202000002020202000000000202020200000000000000020200020000000000000202000000
00000000000002020000000200000000020200000000000002020202020002020202000000000202000200000000020200000000020200020000000000000002020202000000000000000202000202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202000000000202020000000000020202020000000002020202000002000000020200000202020200000000020202020000000000000002020202000000000000020200000000000000000002020000
00020000000000020200000000000202020200000202020200000000020200020000000002020000000002020002020000000000000202020200000000000000000202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000020200000000000202000000000002020202000000000202020000000200000002020000020202020000000002020002020000000000000202020200000000000002020000000000000000000202000000020000000000020202
00000000020202000000020200020200000202020002000000000202020000020200000202020000000200020200020202000000000000020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000020202020200000202020202000202020202020200020202000000020202020202020202020202020202020202000202020202020000000202000000000000000202020202000000000202020202020202020202020000020202020202020202000000
02020002020202020200000200000000000202020202020000000202020202020002020000020202020200000002020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202020200020202020200020200000002020000
00020200000202000000020200020202020200000000000002020000000002020202020202020000020202000000020202020202020000000000020000000002020000000200020000000202020202000202020202000202000002020000020202020202000000000000020200000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020000020002000000000002020000020202000000020200000202000002
02000202020002020200000000000202000000000202000000000202000002020000000002020000000202000000000202000000000202000002020002000202020200000200020200000000020200000202020202020000020202000000000202000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020000000000000200000000000202000002020200000002020000020200000202000200000000000202
00000000020200000000020200000000020200020200000000000202000000000202020202020200000000020200000202000200020200000000000002020000000002020002020002020000000000020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202000000000000020000000000020200020202020000000202000002020002020000020000000000020200000000020200000000
02020000000002020002020000000000020200000000020202020202000000000002020002020000020002020000000000000202000000000202000202000200000000000000020202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020200000000000002020202020002020202020202000000020200000202020202000002000000000002020000000002020202020002020202020002020202
02000000000002020000000002020000020200000000000202020202000002000200000000000000020202020200020202020200020000000000000002020200020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020000000000000200000000000202020200020200000002020000020200020202000200000000000202000000000202000002020202000000000202000202020000000002020000
00000002020202000000000000020200020202000200020200000000000002020000000002020002020202000000000000000002020002020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202000000000000020000000000020202000002020000000202000002020000020200020000000000020200000000020200000202020200000000020200000202000000000202000000000002020202000000
00000002020000020200020002020000000000000202000000000202000002020202000000000000000202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000202020000020002000000000002020200000202000000020200000202000202020002020200020202000000000002020002020202020000000002020002020200000000020200000000000202020200000000000002020002020200
02000202020200000200020200000000020200020202020202020000020000000202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000202020202000202020202000202000000020202020202020202020202020200000002020202020000000000000202020202000202020202000202020202000000000002020000000000000202000000000000000202020202000002000000020202020200
02020202020002020202020000000202020202000000020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202020200000000020202020200000000000000000000000000020202020202020202000000000000000000000000000002020202020202020000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000001010100000000000000000000000002020202020000000002020202020000000000000000000000020202020202020202020202000000000000000000000000020202020202020202000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000010101010101010100000000000000000000000202020202000000000202020202000000000000000000000002020202020202020202020202020000000000000000000202020202020202020200000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100000000010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000101010100000101010100000000000000000000020202020200000000020202020200000000000000000000000202020202020202020202020202000000000000000002020202020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101000101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
01010101000000000001010100000000000000000002020202020000000002020202020000000000000000000000020202020200000202020202020202000000000000000202020202020200000202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101000101010100000000000000000000000000000000000000000000000000000000000000000000010101000000000000000000000001010101010100000001010101
01010000000000000000000202020202000000000202020202000000000000000000000002000000000000000000020202020200000000000000020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010100000000000000000000000101010101010100000000000000000000000000000001010101010100000000000101010101010101000001010101010101010100000000000000
00020202020200000000020202020200000000000000000000000000000000000000000002020202020000000000000002020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010000000101010101010101010101010100000000000000000000000001010101010101010101010101010101010001010101000000000101010000000000000000020202020200000000
02020202020000000000000000000000000000000000000000020202020202000000000000000202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101000000000000000000010100000001010101010101010101010000000000010101000000000000000000000000000000000002020202020000000002020202020000000000
00000000000000000000000000000202020202020200000000000000020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000101010001010100000101010101010001010101010101010000000000000000000001010100000001010101010101000000000000000101010000000000000000000000000000000000000202020202000000000202020202000000000000000000000000000000
00000002020202020202020000000000000002020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000101000001010101010100010101010101010101010101000001010100000000000101010101010101010101010101010100000101010100000000000000000000000000000000000000020202020200000000020202020200000000000000000000000000000002020202020202020202
02000000000000000202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000010101010101010101010101010101010101010101010101000101010101000000000101010101010101010101010101000001010100000000000000000000000000000000000000000002020202020000000002020202020000000000000000000000000000020202020202020202020200000000000000000202
02020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101
00010101010101010101010101010101010101010101010101000000000101010101010101000000000000010101000000000000000000000000000000000000000000000202020202000000000202020202000000000000000000000000000202020202020202020202000000000000000000020202020200000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101000101
01010101010101010101010101010101010101010101010101010100000000000101010000000000000000000000000000000000000000000000020202020200000000020202020202000000000000000000000002020202020202020202000000000000000000000002020202020000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101000101010101010101000001010101010101010101
00010101010101010101010101010101000000000001010100000000000000000000000000000000000000000000000002020202020000000002020202020200000000000000000000020202020202020200000000000000000000000000000202020202000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010100000101010101010101000000000000000101000000000101010101010101
01010101010100000000010101000000000000000000000000000000000000000000000000000202020202000000000202020202020000000000000000000002020202020202000000000000000000000000000000020202020200000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010000000101010001010101010101000000010101010100000101010101010101010101000000000001
01010000000000000000000000000000000000000000000000000000020202020200000000020202020202020000000000000000000202020202020000000000000000000000000000000002020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101000000000001010100010101010101000001010101010101010101010101010101000000000000010100000000000000000000
00000000000000000000000000000000000002020202020000000002020202020202000000000000000000020202020202000000000000000000000000000000000202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010100000000000001010101010101010101000101010101010101010101010101010101010000000101010000000000000000000000000000000000000000
00000000000000000202020202000000000202020202020202000000000000000002020202020200000000000000000000000000000000020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010100000001000001010101010101010101010101010101010101010101010000000000000001010100000000000000000000000000000000000000000000000000000000000202
02020200000000020202020202020202020202020000000202020202020202020202020202000002020202020202020202020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010000000101000001010100000101010101010101010101010101010101010000000000010100000000000000000000000000000000000000000000000000000000000000020202020200000000020202
02020202020202020202000000000202020202020202020202020200000202020202020202020202020202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000010101010101010101000000010101010101010101000101010101010101010101010000000000000000000101010000000000000000000000000000000000000000000000000000000000000002020202020000000002020202020202020202020202
00000000000202020202020202020202020000020202020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001010101010101010100000001010101010101010101010101010101010101010101010101010101010001010100000000000000000000000000000000000000000000000000000000000000000202020202000000000202020202000202020202020200000000000002020202
02020202020202000002020202020202020202020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000101010101010001000000000101010101010101010101010101010101010101010100000000010100010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020202020000000000000000020202020202020000000000
00000000000202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101
01010101010100000000000101000101010101010101010101010100010100000101000000000101000000000000000001010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020202
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010000010100
00010101000101010101010101010101010101010101010101010001010000000000000101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202020200000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010100000001010101000101010101010101
01010101010101000000010000000000010100000000000001010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020202020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010101000000000101010101010100000100000101010101010101010101
01010000000101000000000000010101010101010101010000000000000000000000000000000000000000000002020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020202000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100000000000101010101010101010000000101010101010100000001010100010101000000
00000101010101010101010101010101010000000000000000000000000000000000000202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000101010101010101010100000000000001010000000100000101010100000001010101010101010101
01000001010101000000000000000000000000000000000000020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000101010100010101010101010101010101010000000001010101010101010101010101000101010101010101010100000000
00000000000000000000000000000002020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000001010101010000000000010101010001010101000101010100000000000000010101010101010101010101010101010101010101010101000000000000000000000000000000
00000000000202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000101010000000001010101010101000000010101000000010100000000000000000000000101010000000101010101010101010101010101010101010000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000010101010000000001010101010101010101010101010000000101010101010001000001010101010100010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000010101010100000001010101010101010101010101010101010101010101000100010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000001010101010100000001010100000001010101010101010101010100000000000101010101010101010101010101010101010101000000010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000001010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000001010101010101010101010101010100010101010100000000000000000001010101010101010100010100010101010100000000010101010101010101000000000000000000000000000000000000010101010100000000000000000000000000010101010101000000000000000000000000000000000000000001
01010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101
01010101010101010101010101010101010000000000010100010101000101010101010000010101010101010101010101010001010101000000000000000000000000000000000001010101010000000000000000000000000001010101010100000000000000000000000000000000000001010101010101010101010101
01010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010000010101010101010101
01010101010000000000000101010001010100010101010001010000000101010101010101010100010101010101000000000000000000000000000000000101010101000000000000000000000000000101010101010000000000000000000000000000000001010101010101010101010101010101010100000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010000000000010101000000000101000000010101000000010100000000
01010100000101010101010001000101000000000101010101010101010101010101010101000000000000000000000000000000010101010100000000000000000000000000010101010101000000000000000000000000000000010101010101010101010101010101010101010000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010100000000000101010000010000000000000001010101010000000001010000000001010101
01000100000101010100010101010101010101010101000101010100000000000000000000000000000001010101010000000000000000000000000001010101010100000000000000000000000000000101010101010101010100000000000000010101000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101000000000001010101010101010101010101010000000000010100000000000101010101000100000001010100
01010101010101010000000101010000010101010000000000000000000000000101010101000000000000000000000000000101010101010000000000000000000000000001010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100010101010101010101010101010101010101010101010100000001000101010000000000010101010100010000010101010101010101000001010101
01010000010101010101010101010000000000000000010101010100000000000000000000000000010101010101000000000000000000000000010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101000101010101010101010101010101010100000100000000000001010100000000000001010101010101000001010101010100010100000000000000000001010101010101
01010100000000000000000001010101010000000000000000000000000001010101010100000000000000000000000001010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101000101010101010000000000000000010101000001010100000101000000000000000101010101010100010101010101010001010100000000000000010101010101010101010000000000000000
00000101010101000000000000000000000000000101010101010000000000000000000000010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010100000001010000000000000000010100010101000101010101010101010001010101010101010101010101010101010101000000000000000000000101010101000000
00000000000000000000010101010101000000000000000000000001010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010100000000000101000000000000000000000000010101010101010101000101010001010101010101010101010101010101010000000000000000000000010101010100000000000000000000000000
01010101010100000000000000000000000101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000010101000101010101010101010101010101010101000000000001010000000000000000000000000000000101010101010100000101010101010101010101010101010101010101010000000000000000000001010101010000000000000000000000000001010101010100000000
00000000000000010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000010101010101010101010101010101010101010000010100010100000000000000000000000000000000010101010101010000010101010101010101010101010100000001010101000000000000000000000101010101000000000000000000000000000101010101010000000000000000000000010101
01010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101
01010000010101010100000001010100000101000101000000000000000000000000000000000001010101010101000101000101010101010101010101010101010101000000000000000000000000010101010100000000000000000000000000010101010101000000000000000000000001010101010000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101
01010101000000000000010000000000000000000000000000000000000101010101010000010101010101010101010100010101010101010100000000000000000000000001010101010000000000000000000000000001010101010100000000000000000000010101010101000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010001010101010101010101010101000000000101
01000000000000000000000000000000000000000101010100000001010101010101010101010101010101010101010100000000000000000000000101010101000000000000000000000000000101010101010000000000000000000001010101010100000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010000010101010101010101010000010101010100000000000000000000
00000000000000000000000101000000000101010101010001010001010101010101010101010000000000000000000000010101010100000000000000000000000000010101010101000000000000000000000101010101010000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101000101000101000000000000000000000000000000000000000000
00000000000000010001000101000101010101010101010101010101000000000000000000000001010101010000000000000000000000000001010101010100000000000000000000000101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010001010101010000000000000000000000000000000000000000000000000000000001010001
00010101000101010101010101010100000100000000000000000000000101010101000000000000000000000000000101010101010000000000000000000000010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010100010101010101010101010100000001010100000000000000000000000000000000000000000000000000000000000101000101010101000101010101
01010001010100000000000000000000000000010101010100000000000000000000000000010101010101000000000000000000000001010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010001010100000000000000000000000000000000000000000000000000000000000000010100010101010101000101010101010100010101000000
00000000000000000001010101010000000000000000000000000001010101010100000000000000000000000101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000010101010101010100010101000101010101010100000000000000000000000001
01010101000000000000000000000000000101010101010000000000000000000000010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000001010101010001010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000001010101010101010001010101010101000101010100000000000000000000000101010101000000000000
00000000000000010101010101000000000000000000000001010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000001010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000101010101000100000101000101010101010101010000000000000000000000010101010100000000000000000000000000010101
01010100000000000000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000010101010100010000000100000101010101010101000000000000000000000001010101010000000000000000000000000001010101010100000000000000
00000000000101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010100010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101000000010101010101010001010100000000000000000000000101010101000000000000000000000000000101010101010000000000000000000000000001010101
01010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101
01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000101010100000000010101010101000000010000000000000000000000010101010100000000000000000000000000010101010101000000000000000000000000000001010101010101010100000000
00000000010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000010101000000000000000101010100000000000000000000000000000001010101010000000001010101010101010101010101010101010101010101010101000000000001010101010101010101010101010101010101000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000001010100000000000000000101010000000000000000000000000000000101010101000000000101010101010101010101010101010101010101010101010100000000000001010101010101010101010101010101010100000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001000000000000000000010100000000000000000000000000000000010101010100000000010101010101010101010101010101010101010101010101010000000000000001010101010101010101010101010101010000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001010000000000000000000000000000000001010101010000000001010101010101010101010101010101010101010101010101000000000000000000010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000002701ffff0a00000026060f000a00544e5050030000000000040000002d010100040000002d010200040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f0012
00544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010100040000002d010200030000000000000000000000000000000000000000000000000000000000000000000000}}
\par \pard \qc\ri100\sb80\sa80\nowidctlpar {\fs28 38050   Povo, Trento Italy}{\v\fs28 \sect }\sectd \pgwsxn11906\pghsxn16838\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\linex0\headery709\footery709\colsx709\endnhere \pard\plain 
\qc\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\fs28 
\par }\pard \ri-58\sb80\sa80\tx1152\tx8789 {\lang2057 \page In this document the description of the software for PINOCCHIO V3.1 is contained, together with the instruction for adap
ting the resources to new domains and languages. The software described is used for the Italian version of PINOCCHIO, but it has been  used also for developing the English version of PINOCCHIO.
\par }\pard \ri-58\sb80\sa80\tx8789 {\lang2057 As the   PINOCCHIO has being developed on top of the }{\scaps\lang2057 Geppetto}{\lang2057  development environment, this document is obviously integrated by the }{\scaps\lang2057 Geppetto}{\lang2057 
 Manual [GPT 97], especially for the parts concerning the type hierarchy and  lexicon development and syntax-semantics interaction.
\par This manual is supposed to replace the V2.0 and V2.1 manual.
\par }\pard \ri100\sb80\sa80\nowidctlpar Pinocchio was originally developed as part of the FACILE project (LE-2440)> References to FACILE are contained in this document (especially to the FACILE integrated environment and the FACILE Preprocessor). In
 the FACILE world Pinocchio was known as DAM (Deep Analyser Module). Information about FACILE can be found in [Ciravegna et al. 99b] and at: http://ecate.itc.it:1024/projects/facile.html
\par \pard \ri-58\sb80\sa80\tx8789 {\lang2057 Pinocchio V3.1 still works in the FACILE environment and reads as input the output of the FACILE Preprocessor [Black et al 98]. Adapting Pinocchio to other preprocessors is easy and can be done via the provided 
API.
\par 
\par This manual is composed of four parts:
\par {\pntext\pard\plain\f8 1.\tab}}\pard \fi-283\li283\ri-58\sb80\sa80\tx8789{\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\lang2057 General introduction
\par {\pntext\pard\plain\f8 2.\tab}A reference manual
\par {\pntext\pard\plain\f8 3.\tab}A tutorial
\par {\pntext\pard\plain\f8 4.\tab}Release notes (where also details on the graphical interface are contained)
\par }\pard\plain \s18\li560\ri100\sb1440\sa360\keepn\nowidctlpar \b\f8\fs72\lang1024 {\lang2057 \page PART 1                    PINOCCHIO: an introduction
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104237}1. PINOCCHIO Architecture{\*\bkmkend _Toc433104237}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 PINOCCHIO
 receives as input the output of the preprocessor as integrated in the FACILE environment. It produces as output a list of filled templates. It is based on FST technology and its architecture is organised by tasks; these tasks are logical steps for mappin
g the input text into the final template. 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104238}1.1 FST-based Analysis{\*\bkmkend _Toc433104238}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 PINOCCHIO is based on cascades of FSTs. An FST is a memoryless device that reads an input string and produces as output  a new string  that has been \ldblquote rewritten\rdblquote 
 from the input.   These devices can  be used to implement general  rewriting rules.  In case the input and output strings are the  same, we say that (the rule represented by) the FST has failed  to apply.  A  cascade of FSTs is an 
ordered sequence of FSTs where each transducer feeds  with its output the input  of the next  transducer in the  sequence.  Since the transducers are deterministic, the cascade will translate each string into a unique string. 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 Resources in PINOCCHIO are composed 
by cascades of FSTs that progressively modify the input in order to fill the template by starting from the preprocessor results. Resources based on the FST approach used in PINOCCHIO 
are simple to develop and maintain, as they allow a deterministic pattern based processing based on local conditions. This means that when an FST is successfully applied to the input it immediately modifies the input. the following FST will find the input
 modified. In this way it is possible to debug a cascade by inspecting step by s
tep the modifications to the input. Debugging an FST is simple: it is just necessary to inspect its input and  output: if the input is right and the output is wrong, the problem is in the FST itself. If the input is not what it was expected, the problem i
s in an FST preceding the current one in the cascade (that FST can either modify the input in an unexpected way or not modify the input as expected). PINOCCHIO provides tracers, inspectors and graphers for debugging. 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The use of FSTs has an implication on the type of control the application developers have on speed. The time of analysis is linear, }{\i\fs28\lang2057 O(n l)}{\lang2057  where }{\i\lang2057 n}{\lang2057 
 is the number of FSTs used for the specific template application and }{\i\lang2057 l}{\lang2057 
 is the length of the input. This means that it is possible to reduce the execution time by reducing the number of FSTs in the resources, for example by conflating different rules into a more general rule (care is needed in this process). It is also possi
ble to lower the time of analysis by defining the FSTs in order to match before the c
onditions that fail more often or that are less expensive. In V3.0 it is possible to identify the rules that spend more time in the analysis by using the Allegro Composer Time Profiler during PINOCCHIO analysis.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104239}1.2 A task-based Architecture{\*\bkmkend _Toc433104239}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Cascades are grouped in PINOCCHIO according to the task they accomplish. Each cascade implements a logical step in each task. Since V2.1 the logical steps are the following:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\b\lang2057 preparsing}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\b\lang2057 parsing }{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}{\b\lang2057 normalisation }{\lang2057 (or Default Reasoning)
\par {\pntext\pard\plain\f1 \'b7\tab}}{\b\lang2057 discourse processing}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}{\b\lang2057 template filling and merging}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\b\lang2057 template result presentation}{\lang2057 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The tasks can be classified according to the kind of information they use:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 general information shareable across domains/applications/templates;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 preparsing
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 parsing (2 cascades out of 3)
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 information specific to the current template application (e.g. news about bond issues)
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 parsing (1 cascade out of 3)
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 normalisation
\par {\pntext\pard\plain\f1 \'b7\tab}discourse processing
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
information specific to the specific template format requested by the user (e.g. MUC template format):
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 template presentation
\par }\pard \ri-625\sb80\sa80\nowidctlpar {\fs20 {\pict\wmetafile8\picw24085\pich15919\picwgoal13654\pichgoal9025 \picscalex60\picscaley60 
010009000003611c000008001302000000000e00000026060f001200ffffffff00000800000042f513fa980a2d080a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0213fa42f5050000000c021a0e561513020000f700000307010000000000ff0000618ffd00cecece00fafd0000fc012800ffffff0000000000fffffe019b9b9b02fffe
0003807f0004ffff6605ff00fe0680008007ff66ff080000fe0900007e0a6666ff0ba0615f0cbf1f2f0d5f0f170ed979820f00fffe1000807f1166ffff1261616113ffff2a149d9d9d15ffffbf16ffff3f17ffbfff18ffbfbf19ffbf7f1affbf3f1bffbf001cff7fff1dff7fbf1eff7f3f1fff7f0020ff3fff21ff3fbf22ff
3f7f23ff3f3f24ff3f0025ff00bf26ff007f27ff003f28bfffff29bfffbf2abfff7f2bbfff3f2cbfff002dbfbfff2ebfbf7f2fbfbf3f30bf7fff31bf7fbf32bf7f7f33bf7f3f34bf7f0035bf3fff36bf3fbf37bf3f7f38bf3f3f39bf3f003abf00ff3bbf007f3cbf003f3d7fffff3e7fffbf3f7fff3f407fff00417fbfff42
7fbfbf437fbf7f447fbf3f457fbf00467f7fbf477f7f3f487f3fff497f3fbf4a7f3f7f4b7f3f3f4c7f3f004d7f00ff4e7f00bf4f7f003f503fffff513fffbf523fff7f533fff3f543fff00553fbfff563fbfbf573fbf7f583fbf3f593fbf005a3f7fff5b3f7fbf5c3f7f7f5d3f7f3f5e3f7f005f3f3fff603f3fbf613f3f7f
623f3f3f633f3f00643f00ff653f00bf663f007f673f003f683f00006900ffbf6a00ff7f6b00ff3f6c00bfff6d00bf7f6e00bf3f6f007fff70007fbf71007f3f72003fff73003fbf74003f7f75003f3f76003f007700003f7800dfdf7900cfcf7a00bfbf7b00afaf7c009f9f7d008f8f7e007f7f7fdf00df80cf00cf81bf00
bf82af00af839f009f848f008f857f007f86dfdf0087cfcf0088bfbf0089afaf008a9f9f008b8f8f008c7f7f008d00df008e00cf008f00bf009000af0091009f0092008f0093007f0094df000095cf000096bf000097af0000989f0000998f00009a7f00009b0000df9c0000cf9d0000bf9e0000af9f00009fa000008fa100
007fa2dfdfdfa3cfcfcfa4afafafa59f9f9fa68f8f8fa78b4789a8fff8dca9a020f0aaff00ffabb8860bac228b22ad4169e1aeb22222afa52a2ab000008bb1008b8bb2008b00b3ffc0cbb4d9d9d9b5006400b6ff1493b7b4eeb4b8afeeeeb9ff66ccba00373cbb00ffffbcff6633bd222222be429aa7bf9999ffc0008000c1
333366c26666ccc3808080c4808000c5800000c6008080c7ffffccc8990066c9c0c0c0ca395f60cbafcfd0ccbebebecd696969ce2f4f4fcf40a0c0d0f4f4f4d1666666d2b7b7b7d3ccccccd4840010d58c0018d6c60021d7947b84d8523963d9637384da42b5e7dbdece00dcffef00ddffef63deffceb5dff79c73e0de7b73
e1a59c9ce200fa9ae34c4c4ce4bfbfbfe57f7f7fe6e9e9e9e7000080e87f7feae9d5d5d5ea0000d5eb999999ec990000edff7f7feeff0000ef26867df0a0f0e8f140e0d0f25f9ea0f3999900f4ffff7ff5ffff00f6009900f77fff7ff800ff00f9000099fa7f7ffffb0000fffcd3d3d3fd000000feffffffff040000003402
00000300000035000e00000026060f001200ffffffff00000800000042f512fa940a2c080e00000026060f001200ffffffff0000080000000bff17fc0303f6fd07000000fc020000fafd00020000040000002d01010008000000fa02050000000000ffffff00040000002d01020008000000fa020600080008000000000204
0000002d010300070000001b04f6fd030317fc0bff050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000bff44040303230607000000fc020000fafd00020000040000002d01040004000000f0010100040000002d01020008000000fa0206000800
080000000002040000002d01010004000000f0010300070000001b042306030344040bff050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000bffd4fe0303460307000000fc020000cecece020000040000002d01030004000000f0010400040000
002d01020008000000fa0206000800080000000002040000002d01040004000000f0010100070000001b0446030303d4fe0bff050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060f7aefa58fbc8fe07000000fc020000fc012802000004000000
2d01010004000000f0010300040000002d01020008000000fa0206000800080000000002040000002d01030004000000f0010400070000001b04c8fe58fbaefa60f7050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060f7ceff58fbb506070000
00fc02000000ff00020000040000002d01040004000000f0010100040000002d01020008000000fa0206000800080000000002040000002d01010004000000f0010300070000001b04b50658fbceff60f7050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000
08000000b8f713fd00fb22fe07000000fc020000ffffff020000040000002d01030004000000f0010400040000002d01020008000000fa0206000800080000000002040000002d01040004000000f0010100070000001b0422fe00fb13fdb8f70500000014020000000015000000fb0280ff00000000000090010000000000
00001054696d6573204e657720526f6d616e000000040000002d010100040000002e011800050000000a020000000005000000090200000002040000000201010019000000320abcfdfff70c0000005072652d6368756e6b696e6747002b0039002a003900400040004000400024004000400004000000020102000a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8f7c90400fb1d0607000000fc020000ffffff020000040000002d01050004000000f0010300040000002d01020008000000fa0206000800080000000002040000002d01030004000000f0010400070000001b041d0600fbc904b8
f70500000014020000000015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01040004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a480564f8090000004d6f646966696572
200072004000400023002b00240038002b002000040000000201020015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01010004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001600000032
0ae2052df80a0000004174746163686d656e745c0024002400380039004000640039004000230004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8f7eafa00fbf9fb07000000fc020000ffffff020000040000002d01040004000000f00105000400
00002d01020008000000fa0206000800080000000002040000002d01050004000000f0010300070000001b04f9fb00fbeafab8f70500000014020000000015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01030004000000f0010100040000002e0118
00050000000a020000000005000000090200000002040000000201010016000000320a93fb46f80a00000050726570617273696e6747002b003900400038002b00320023004000400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000058f907fc60f9
15fd040000002d01020007000000fc020100000000000000040000002d01010004000000f001050004000000f001040010000000fb021400090000000000bc02000000000202022253797374656d0000040000002d01040004000000f0010300030000001e00070000001604d1fc00fa07fcb8f808000000fa020600080008
0000000002040000002d01030005000000140201fb58f905000000130213fe58f9040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030058f90efd7bf997fc35f997fc0a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff00000800000063ff8501ab02d90207000000fc020000ffffff020000040000002d01050004000000f001030008000000fa0206000800080000000002040000002d010300070000001b04d902ab02850163ff05000000140213fe58f915000000fb0280ff00000000000090010000000000
00001054696d6573204e657720526f6d616e000000040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a0402380008000000496d706c696369742b006300400024002300390024002300040000000201020015000000fb0280ff0000000000009001
000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a9e02aaff0d00000052656c6174696f6e205265732e00550039002400390023002400400040002000550039
003200200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009c06d2fa940a060107000000fc020000618ffd020000040000002d01060004000000f0010500040000002d01020008000000fa0206000800080000000002040000002d01050004000000
f0010300070000001b040601940ad2fa9c0605000000140213fe58f90a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f4062bfd3c0a68fe07000000fc020000ffffff020000040000002d01030004000000f0010600040000002d01020008000000fa0206000800080000
000002040000002d01060004000000f0010500070000001b0468fe3c0a2bfdf40605000000140213fe58f915000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01050004000000f0010700040000002e011800050000000a02000000000500000009020000
0002040000000201010013000000320a9ffda2070800000054656d706c6174654e003900640040002300390024003800040000000201020015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f0010500040000002e011800050000000a
020000000005000000090200000002040000000201010012000000320a39feb707070000004d657267696e6700720039002a00400024004000400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f40624fb3c0a52fc07000000fc020000ffffff02
0000040000002d01050004000000f0010300040000002d01020008000000fa0206000800080000000002040000002d01030004000000f0010600070000001b0452fc3c0a24fbf40605000000140213fe58f915000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000
002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a90fb7d070a000000496e7374616e636520262b00400031002400390040003900380020006400040000000201020015000000fb0280ff000000000000900100000000000000105469
6d6573204e657720526f6d616e000000040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a2afce9070700000046696c6c696e6700470024002300240023004000400004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000910847fca00836fd040000002d010200040000002d01010004000000f001030004000000f0010500040000002d01040004000000f0010700030000001e00070000001604f2fc400947fcf10708000000fa0206000800080000000002040000002d0103000500
0000140260fb8a0805000000130215fe9f08040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030098082ffdb708b6fc7108b8fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
00080000003f0749faf209ebfa15000000fb02b1ff000000000000bc02000000000000001054696d6573204e657720526f6d616e000000040000002d010500040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320aaefa79071000000054656d706c6174652046696c6c69
6e673500240043002c00160028001b0023001400310016001700160016002d00280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f40674ff3c0aa80007000000fc020000ffffff020000040000002d01060004000000f001030008000000fa0206
000800080000000002040000002d010300070000001b04a8003c0a74fff40605000000140215fe9f0815000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f0010500040000002e011800050000000a020000000005000000090200000002
040000000201010018000000320ae3ff62070b000000496e666f726d6174696f6e002b0040002a0040002b00630039002400230040004000040000000201020015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01050004000000f0010700040000002e
011800050000000a020000000005000000090200000002040000000201010013000000320a7d009f07080000005265636f766572795500390039004000400039002a00400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000063ff8c04ab02da050700
0000fc020000ffffff020000040000002d01070004000000f0010600040000002d01020008000000fa0206000800080000000002040000002d01060004000000f0010300070000001b04da05ab028c0463ff05000000140215fe9f0815000000fb0280ff0000000000009001000000000000001054696d6573204e65772052
6f6d616e000000040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a080543000700000044656661756c74005c0039002b003900400023002400040000000201020015000000fb0280ff00000000000090010000000000000010
54696d6573204e657720526f6d616e000000040000002d01050004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010015000000320aa205f5ff09000000526561736f6e696e670055003900390032004000400023004000400004000000020102000a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000058f9aa0360f9b804040000002d010200040000002d01010004000000f001060004000000f0010700040000002d01040004000000f0010500030000001e00070000001604740400faaa03b8f808000000fa02060008000800000000020400
00002d010300050000001402a40258f9050000001302b60558f9040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030058f9b1047bf93a0435f93a040a00000026060f000a00ffffffff0100000000000e00000026060f
001200ffffffff00000800000094086dfe9c087bff040000002d010200040000002d01010004000000f0010300030000001e0007000000160437ff3c096dfef40708000000fa0206000800080000000002040000002d01030005000000140267fd940805000000130279009408040000002d010200040000002d0101000400
0000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300940874ffb708fdfe7108fdfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c6fe700367033a040a00000026060f000a00ffffffff0100000000000e0000
0026060f001200ffffffff00000800000052fb2dfd11ff42030e00000026060f001200ffffffff000008000000f5fc2dfd11ff39fd040000002d010200040000002d01010004000000f0010300030000001e00070000001604d9fdcdfe8dfcf5fc08000000fa0206000800080000000002040000002d010300050000001402
29fde1fa05000000130235fd1d01040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030009ff31fd93fe0dfd93fe53fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000
00edfc31fdfafc3e03040000002d010200040000002d01010004000000f0010300030000001e000700000016043e039afd31fd4dfc08000000fa0206000800080000000002040000002d0103000500000014022cf7e8fc0500000013023b09f7fc040000002d010200040000002d01010004000000f0010300040000002701
ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000052fb3a03ecfc4203040000002d010200040000002d010100030000001e00070000001604e203ecfc9a0252fb08000000fa0206000800080000000002040000002d0103000500000014023a0376fe0500000013023a
03c0f9040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8f7570200fba60307000000fc020000ffffff020000040000002d0103000800
0000fa0206000800080000000002040000002d010500070000001b04a60300fb5702b8f70500000014023a03c0f915000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d010600040000002e011800050000000a020000000005000000090200000002040000
000201010018000000320ad4022af80b000000412d537472756374757265005c002b00470024002a0040003900240040002a003900040000000201020015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f0010600040000002e011800
050000000a020000000005000000090200000002040000000201010018000000320a6e031ff80b0000005265636f676e6974696f6e005500390039004000400040002400230024004000400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8f750
0000fb5f0107000000fc020000ffffff020000040000002d01060004000000f0010300040000002d01020008000000fa0206000800080000000002040000002d01030004000000f0010500070000001b045f0100fb5000b8f70500000014023a03c0f915000000fb0280ff0000000000009001000000000000001054696d65
73204e657720526f6d616e000000040000002d01050004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010013000000320af9005bf8080000004368756e6b696e675500400040004000400024004000400004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff00000800000058f9540160f96202040000002d010200040000002d01010004000000f001030004000000f0010600040000002d01040004000000f0010500030000001e000700000016041e0200fa5401b8f808000000fa0206000800080000000002040000002d0103000500
000014024e0058f9050000001302600358f9040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030058f95b027bf9e40135f9e4010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
000800000063ff61fcab02abfd07000000fc020000ffffff020000040000002d01050004000000f001030008000000fa0206000800080000000002040000002d010300070000001b04abfdab0261fc63ff050000001402600358f915000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f
6d616e000000040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010012000000320adbfc43000700000044656661756c74005c0039002b003900400023002400040000000201020015000000fb0280ff0000000000009001000000000000001054696d6573204e6577
20526f6d616e000000040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a75fdf5ff09000000526561736f6e696e670055003900390032004000400023004000400004000000020102000a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff00000800000063ff39ffab02820007000000fc020000ffffff020000040000002d01060004000000f0010500040000002d01020008000000fa0206000800080000000002040000002d01050004000000f0010300070000001b048200ab0239ff63ff050000001402600358f915
000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010018000000320ab3ffcaff0b000000436f7265666572656e636500550040002b003900
2a0039002b003900400039003800040000000201020015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a4d00edff0a
0000005265736f6c7574696f6e550039003200400024004000230024004000400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fe00f1fd0801dffe040000002d010200040000002d01010004000000f001050004000000f0010600040000002d01
040004000000f0010700030000001e000700000016049bfea801f1fd5e0008000000fa0206000800080000000002040000002d0103000500000014020bfdfc00050000001302bdff0201040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103
000a000000240303000001d8fe220161fedc0061fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000058f9cafe60f9d8ff040000002d010200040000002d01010004000000f0010300030000001e0007000000160494ff00facafeb8f808000000fa020600080008000000
0002040000002d010300050000001402c4fd58f9050000001302d60058f9040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030058f9d1ff7bf95aff35f95aff0a00000026060f000a00ffffffff0100000000000e0000
0026060f001200ffffffff000008000000ff00780007018601040000002d010200040000002d01010004000000f0010300030000001e000700000016044201a70178005f0008000000fa0206000800080000000002040000002d01030005000000140272ffff000500000013028402ff00040000002d010200040000002d01
010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300ff007f0122010801dc0008010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fc0051030a014904040000002d010200040000002d010100040000
00f0010300030000001e000700000016040504aa0151035c0008000000fa0206000800080000000002040000002d010300050000001402610208010500000013023105f600040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000
24030300fc0042042201cb03dc00c9030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009ff520fa95f7c2fa15000000fb02b1ff000000000000bc02000000000000001054696d6573204e657720526f6d616e000000040000002d010500040000002e011800050000000a
020000000005000000090200000002040000000201010016000000320a85fad9f50a00000050726570617273696e673100230024002c00280024001f0016002d00280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000042f5dbfea8f8ddff15000000
fb02b1ff000000000000bc02000000000000001054696d6573204e657720526f6d616e000000040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a40ff7cf50700000050617273696e6700310028002300200016002c00280004
0000000201020015000000fb02b1ff000000000000bc02000000000000001054696d6573204e657720526f6d616e000000040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010024000000320aa0ff7cf51300000026204c65786963616c205365
6d616e746963730043001400350024002800160023002800160014002d002300430028002d001a00160024001f0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080fd20fede00c2fe15000000fb02b1ff000000000000bc02000000000000001054
696d6573204e657720526f6d616e000000040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010027000000320a85febafd15000000446973636f75727365202050726f63657373696e67003a0016001f00240028002c0024001f00230014001400
310024002800230024001f001f0016002d00280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f40610023c0a440308000000fa0206000800080000000002040000002d010500040000002d010100070000001b0444033c0a1002f40615000000fb
0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a7f02a2070800000054656d706c6174654e003900640040002300390024003800
040000000201020015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a190357070c00000050726573656e746174696f
6e47002b00390031003900400024003900230024004000400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000940800019c080e02040000002d010200040000002d01010004000000f001050004000000f0010300040000002d01040004000000f001
0600030000001e00070000001604ca013c090001f40708000000fa0206000800080000000002040000002d010300050000001402faff94080500000013020c039408040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303
0094080702b7089001710890010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007cfba1fe51fed10007000000fc020000ffffff020000040000002d01050004000000f001030008000000fa0206000800080000000002040000002d010300070000001804d10051fea1fe
7cfb0500000014020c03940815000000fb0290ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a50fffbfb09000000436f6d706c65746520004b00380057
0038001f0032001f0031001c00040000000201020015000000fb0290ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010016000000320ad6fff5fb0a00
0000506172736520547265653e00320025002c0032001c004400250032003200040000000201020015000000fb0290ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204
0000000201010010000000320a5c0031fc06000000202620514c461c0057001c00510044003f0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004d05b6fdb406c1fd040000002d010200040000002d01010004000000f001030004000000f0010500
040000002d01040004000000f0010600030000001e0007000000160461fe700616fd4d0508000000fa0206000800080000000002040000002d010300050000001402bcfdee03050000001302b3fd0b08040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc02000000000002000004
0000002d0103000a00000024030300ac06b6fd350694fd3506dafd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004d05b8fd5b054b05040000002d010200040000002d01010004000000f0010300030000001e000700000016044b05fb05b8fdad0408000000fa020600
0800080000000002040000002d0103000500000014022df65905050000001302ce0c4705040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000027033e0555054b05040000002d010200040000
002d010100030000001e00070000001604eb0555059e04270308000000fa0206000800080000000002040000002d0103000500000014023905730705000000130248050101040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff00000800000019073d04ee096d0607000000fc020000ffffff020000040000002d01030008000000fa0206000800080000000002040000002d0105000700000018046d06ee093d0419070500000014024805010115000000fb0290ff0000000000009001000000000000001054696d6573204e65772052
6f6d616e000000040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a2f05fd070600000046696c6c65643e001f0020001f0031003800040000000201020015000000fb0290ff0000000000009001000000000000001054696d6573204e657720526f
6d616e000000040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010015000000320ab50597070900000054656d706c617465730044003200570038001f0032001f0032002b0004000000020102000a00000026060f000a00ffffffff0100000000
000e00000026060f001200ffffffff0000080000008908400391084e04040000002d010200040000002d01010004000000f001050004000000f0010300040000002d01040004000000f0010700030000001e000700000016040a0431094003e90708000000fa0206000800080000000002040000002d010300050000001402
3a0289080500000013024c058908040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030089084704ac08d0036608d0030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000
00d3033c00a8066c0207000000fc020000ffffff020000040000002d01050004000000f001030008000000fa0206000800080000000002040000002d0103000700000018046c02a8063c00d3030500000014024c05890815000000fb0290ff0000000000009001000000000000001054696d6573204e657720526f6d616e00
0000040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a2e018e04070000004c6f676963616c004400380038002000310032001f00040000000201020015000000fb0290ff0000000000009001000000000000001054696d6573204e657720526f6d
616e000000040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320ab401c00404000000466f726d3e0038002600570004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000
080000002c019a03c303a403040000002d010200040000002d01010004000000f001030004000000f0010500040000002d01040004000000f0010700030000001e000700000016044404c303fa022c0108000000fa0206000800080000000002040000002d0103000500000014029e034a0605000000130298039dfe040000
002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c00359fec8039f03040000002d010200040000002d010100030000001e000700000016049f03680459fe200308000000fa020600080008000000
0002040000002d0103000500000014021bf9c003050000001302d508c003040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000033014ffec3035afe040000002d010200040000002d01010003
0000001e00070000001604fafec303affd6f0108000000fa0206000800080000000002040000002d01030005000000140255feabfe0500000013024cfe4306040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303003401
52feab0174feab012efe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e8fb12faad024bfb08000000fa0206000800080000000002040000002d010500040000002d0101000700000018044bfbad0212fae8fb15000000fb0280ff000000000000900100000000000000
1054696d6573204e657720526f6d616e000000040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010012000000320ad1fa75fe070000004c657869636f6e004e0039004000240038004000400004000000020102000a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff0000080000002ef9f106f3ff2a080700000018042a08f3fff1062ef915000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f0010600040000002e011800050000000a0200000000050000000902000000
0204000000020101001b000000320ab0070efb0d00000054465320486965726172636879004e004700480020005c00240038002b0039002a0039004000400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008000f30645072c080700000018042c08
4507f306800015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320ab2072b020e0000004b6e6f776c6564676520426173
655c00400040005d00230039004000400039002000550039003200390004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff0100000000000400
00002d010200040000002d01010004000000f001050004000000f0010300040000002d01040004000000f00106000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000}}{\lang2057 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 In the rest of this section we will analyse each task separately.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104240}1.3 From Preprocessor Results to the basic Chart{\*\bkmkend _Toc433104240} 
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The structure on which PINOCCHIO 
operates is a chart; basic structures in the chart are edges spanning either words or other edges, as usual in chart parsing. However edges can only be inactive (in the terms of chart parsing). The basic chart construction is not based on FSTs. It is proc
edural.
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 The results provided by the preprocessor are a list of words together with associated:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 token: the word  as used in the text
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 a list of normalised forms as derived from the InXight morphological analyser;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 a part of speech tag produced by the InXight POS tagger;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
 the list of the lexical categories derived by the morphological analyser compatible with the POS Tag;
\par {\pntext\pard\plain\f1 \'b7\tab}the list of the lexical categories derived by the morphological analyser NOT compatible with the POS Tag;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 a semantic marker found by the NE analyser.
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 PINOCCHIO trusts the POS tagger and only the lexical categories compatible with the POS results are considered. For each text a char
t is created; For each word in the list an edge in the chart is created with associated the following information:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the token;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the normalised form;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
a list of lexical categories derived from those produced by the preprocessor and converted according to the PINOCCHIO internal representation;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the DAGs (i.e. features structures) as provided by the Geppetto lexicon.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 In order to retrieve both the Geppetto lexical category and the DAGs, it is necessary to convert the preprocessor results into a format compatible with Gep
petto.  A table with these mappings must be defined once for all (see the section about porting PINOCCHIO to new language for details on the conversion table). Lexical categories are types in the Geppetto hierarchy (subtypes of the }{\f3\lang2057 
constituent}{\lang2057  type).  The morphological features provided by the preprocessor are also to be associated to the equivalent Geppetto features. Features within Geppetto are entries in the lexicon whose name starts by \ldblquote :\rdblquote  (e.g. }
{\f3\lang2057 :fem}{\lang2057  is a morphological feature).
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 For example for the sentence: 
\par }\pard\plain \s62\qc\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 the company will produce cars in the US
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 the initial chart will be:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\f4\fs20 {\pict\wmetafile8\picw23954\pich4727\picwgoal13585\pichgoal2687 \picscalex70\picscaley70 
010009000003370300000400240000000000050000000b0200000000050000000c028600a7020400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000011000000fb02f0ff00000000000090010000000000000031436f7572696572000000040000002d0100000800000021050400546865206000d9001b00000021052900636f6d70616e792077696c6c2070726f
647563652063617273202020696e202020746865202020555300600015010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000fc020100000000000000040000002d01010008000000fa0206000100010000000000040000002d0102000c00000024030400e80018
00d9004e00f7004e00e80018000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c000000240304003301180015014e0051014e00330118000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c000000240304007201
180063014e0081014e00720118000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c00000024030400ae0118008d014e00cf014e00ae0118000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c00000024030400f6
011800db014e0011024e00f60118000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000015000000fb02f0ff0000000000009001000000000000001254696d6573204e657720526f6d616e000000040000002d01030004000000f00100000800000021050300646574001200
d9000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000900000021050600636f6d6d6f6e12000f010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000009000000210505006d6f64616c00120063010a00000026060f000a
00ffffffff0100000000000a00000026060f000a00ffffffff00000000000009000000210505006d61696e760012009f010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000001500000021051e00636f6d6d6f6e20207072657020202020206465742020202070726f706572
1200db010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000011000000fb02f4ff00000000000090010000000000000031436f7572696572007720040000002d01000004000000f00103002400000021053c007468652020202020636f6d70616e792020202077696c6c2020
2070726f64756365202020636172202020202020696e202020202074686520205553417e00df000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000011000000fb02f2ff00000000000090010000000000000031436f7572696572007720040000002d01030004000000f001
00000e000000210510006c65786963616c2063617465676f727912000700080000002105030064616700330007000900000021050500746f6b656e00550007000b00000021050a006e6f726d616c697a6564760007000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c
000000240304002f02180023024e003b024e002f0218000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c00000024030400590218004d024e0065024e00590218000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000
0c000000240304008302180077024e008f024e00830218000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff0300000000000000000000
0000000000000000000000000000616e000000040000002d01050004000000f00102000e00000021051000546500706c6174652046696c6c696e67aefa79070a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff000000000000040000002d01000008000000fa0206000800000000000000
040000002d010200070000001b0400003c0a74fff40615000000fb0280ff0000000000009001000000000000001000696d6573204e657720526f6d616e000000040000002d01060004000000f001000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff}}{\lang2057 
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 
The DAG is represented here as a triangle as it would be too difficult to draw it and moreover it depends also from the hierarchy used in the system. Lexical edges have in the DAG a basic logical form representing the concept the word is referring to in t
he KB. For example the logical form of }{\f3\fs20\lang2057 car}{\lang2057  could be }{\i\lang2057 VEHICLE(x)}{\lang2057  where }{\i\lang2057 VEHICLE }{\lang2057  is the name of a concept in the knowledge base.
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 In the whole system the analysis is deterministic. This is done by analysing in every moment only the topmost edges of the chart, i.e. the longest edges; for example if an edge }{\f3\lang2057 NP }{\lang2057 
is built during parsing by composing a }{\f3\lang2057 det }{\lang2057 edge  and a  }{\f3\lang2057 common }{\lang2057 edge, in the rest of the analysis the }{\f3\lang2057 det}{\lang2057  and the }{\f3\lang2057 common}{\lang2057 
 are no longer seen by the system as the }{\f3\lang2057 NP}{\lang2057  subsumes them and it is longer.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104241}1.4 PREPARSING{\*\bkmkend _Toc433104241}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The first task accomplished is preparsing. This is meant to be a post-preprocessor that provides some additional normalisations before parsing; as a matter of fact most of the normal
isations could have been provided by the preprocessor itself, but the preprocessor is shared also by SAM (the Shallow Analyser Module) that does not require such additional normalisations. In general we can say that the role of preparsing is that of modif
ying the input in order to simplify the process of parsing.
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 The input to the module is a chart instantiated with edges spanning words recognised by the morphological analyser.
\par Two cascades are applied during preparsing: the lexical normalise (or preparser) and the pre-chunker.
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 The role of the }{\b\lang2057 lexical normalise}{\lang2057  is that of providing some lexical normalisations additional with respect to what is provided by the preprocessor, that are specific to the Pinocchio
\rquote s needs. An example of the normalisation is the recognition of the compound }{\f3\fs20\lang2057  on behalf of}{\lang2057  that can be normalised as just one word in order to avoid the parser finding a PP (introduced by \ldblquote of\rdblquote 
) and to introduce ambiguity attachment for that PP: the lexical normalise transform }{\f3\fs20\lang2057 on behalf of}{\lang2057  in just one word to be looked for in the lexicon. A new edge is then created in the chart spanning }{\f3\fs20\lang2057 
on behalf of}{\lang2057 ; its sub-edges are then no longer available for further processing.
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 The }{\b\lang2057 prechunker}{\lang2057 
 is used in order to help the parser in finding the points in which some subordinate clauses (such as relative clauses, incidentals, etc.) start (or end). The boundaries found in this step are those used by the parser for determining the sentence sections
  to be analysed within the }{\f3\fs20\lang2057 CLAUSE-LEVEL}{\lang2057  step (see the sections about A-structure recognition). Chunking points are generally commas, cue words such as \ldblquote that\rdblquote , \ldblquote which\rdblquote , etc..
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 The output of the preparser are edges in the chart spanning words or groups of words (recognised by the lexical normalise) and a set of chunking points to be used by the parser.
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\f4\fs20 {\pict\wmetafile8\picw23566\pich16510\picwgoal13360\pichgoal9360 \box\brdrs\brdrw15 \picscalex59\picscaley59\piccropt-192\piccropb-288 
010009000003da1d00000700150000000000050000000b02a8f9b0f5050000000c02a00ee0140400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0000000000
000700000016041700900aa8f9b0f508000000fa0206000800000000000000040000002d010000030000001e000700000016045b00a3ff58ff9aff05000000140261fe9fff05000000130252019fff040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d01000007000000
fc020100000000000000040000002d01010008000000fa0206000100010000000000040000002d01020004000000f00100000c000000240304009fff5200c1ffdbff7cffdbff9fff520007000000fc020000000000000000040000002d01000008000000fa02050000000000ffffff00040000002d0103000c000000240304
009fff5300c2ffdbff7cffdbff9fff53000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01010008000000fa0206000800000000000000040000002d010400070000001b045c017101340016fe040000000801000015000000fb0280ff0000000000009001
000000000000001054696d6573204e657720526f6d616e000000040000002d0105000c00000021050b00412d537472756374757265009e0091fe0c00000021050b005265636f676e6974696f6e00380186fe0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016
041302900aa8f9b0f5030000001e000700000016045702adff5401a4ff0500000014025d00a9ff0500000013024e03a9ff040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d010100040000002d01020004000000f00104000c00000024030400a9ff
4e02cbffd70186ffd701a9ff4e02040000002d010000040000002d0103000c00000024030400a9ff4f02ccffd70186ffd701a9ff4f020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffff
ff000000000000040000002d01010008000000fa0206000800000000000000040000002d010400070000001b04f2fc4401effbe9fd040000002d0105000a000000210508004368756e6b696e6793fc96fe0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001804
8cff4401e6fd16fe0a000000210508004c6f67666f726d735efeadfe0c00000021050b00506172736520547265657300d2fe80fe08000000210503005446530046ff3aff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001804fdfa1701a6f9e9fd0900000021
050500496e707574006afaf5fe0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b045c013807590063040a00000021050700556e696669657200fd0010050a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000
070000001b045c017dfb5900a8f80a000000210507004b5220546f6f6c00fd002cf90a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016044808dafda8f9defb030000001e0007000000160404011efefb00a2fb050000001402000132f905000000130200018e
00040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d010100040000002d01020004000000f00104000c0000002403040015fe00019efddd009efd220115fe0001040000002d010000040000002d0103000c0000002403040016fe00019efddd009efd
230116fe0001040000002d010100040000002d0102000c00000024030400a3fb00011afc22011afcdd00a3fb0001040000002d010000040000002d0103000c00000024030400a3fb00011bfc23011bfcdd00a3fb00010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007
00000016041d00290426fd490108000000fa0206000b00000000000000040000002d010400030000001e000700000016045a006404eafc0f0105000000140286f9c6fd050000001302be03ad07040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d01
0100040000002d01020004000000f00104000c00000024030400620458002804ebfff6031b0062045800040000002d010000040000002d0103000c00000024030400630459002804ebfff6031b0063045900040000002d010100040000002d0102000c000000240304001001ebfc4a0158fd7c0128fd1001ebfc040000002d
010000040000002d0103000c000000240304001001ebfc4b0159fd7d0129fd1001ebfc0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000160448082704a8f9a50108000000fa0206000800000000000000040000002d010400030000001e00070000001604da00
6b04d1006901050000001402d60073fe050000001302d6006107040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d010100040000002d01020004000000f00104000c000000240304006204d600eb03b300eb03f8006204d600040000002d01000004
0000002d0103000c000000240304006304d600eb03b300eb03f9006304d600040000002d010100040000002d0102000c000000240304006a01d600e101f800e101b3006a01d600040000002d010000040000002d0103000c000000240304006a01d600e201f900e201b3006a01d6000a00000026060f000a00ffffffff0100
000000000a00000026060f000a00ffffffff000000000000070000001604870411fe9001a6fb08000000fa0206000b00000000000000040000002d010400030000001e00070000001604c40443fe540175fb05000000140228080501050000001302f0fdb3f8040000002701ffff040000002701ffff030000001e00070000
0016044808900aa8f9b0f5040000002d010400040000002d010100040000002d01020004000000f00104000c0000002403040076fb5501a7fbc701dcfb9b0176fb5501040000002d010000040000002d0103000c0000002403040076fb5501a7fbc801ddfb9c0176fb5501040000002d010100040000002d0102000c000000
2403040041fec20410fe5004dbfd7c0441fec204040000002d010000040000002d0103000c0000002403040042fec30411fe5004dbfd7c0442fec3040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01010008000000fa0206000800000000000000040000
002d01040007000000180495fe380792fd6304040000002d0105000b00000021050900486965726172636879002dfeca040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001804e8fe7dfbe6fdd5f807000000210502004b4280feccf90a00000026060f000a00
ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016041d00900a1cffb0f5030000001e00070000001604610013fae0fe0afa050000001402d6010ffa0500000013026bfd0ffa040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d0104
00040000002d010100040000002d01020004000000f00104000c000000240304000ffae1feecf958ff31fa58ff0ffae1fe040000002d010000040000002d0103000c000000240304000ffae1feecf959ff32fa59ff0ffae1fe040000002d010100040000002d0102000c000000240304000ffa580031fae1ffecf9e1ff0ffa
5800040000002d010000040000002d0103000c000000240304000ffa590032fae1ffecf9e1ff0ffa59000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016041d00900ac9feb0f508000000fa0206000800000000000000040000002d010400030000001e0007
00000016046100a1058dfe980505000000140229029d05050000001302c5fc9d05040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d010100040000002d01020004000000f00104000c000000240304009d058efe7a0505ffbf0505ff9d058efe0400
00002d010000040000002d0103000c000000240304009d058efe7a0506ffc00506ff9d058efe040000002d010100040000002d0102000c000000240304009d055800bf05e1ff7a05e1ff9d055800040000002d010000040000002d0103000c000000240304009d055900c005e1ff7a05e1ff9d0559000a00000026060f000a
00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01010008000000fa0206000800000000000000040000002d010400070000001804d20344014f0216fe040000002d0105000a000000210508004c6f67666f726d73b602adfe0c00000021050b005061727365205472656573002a03
80fe0800000021050300544653009e033aff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b0405069e01c30442fe0b000000210509004d6f64696669657220003a05f8fe0b00000021050a004174746163686d656e74d405c1fe0a00000026060f000a00ff
ffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016049006900aa8f9b0f5030000001e00070000001604d406daffd205d1ff050000001402dc04d6ff050000001302ca07d6ff040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400
040000002d010100040000002d01020004000000f00104000c00000024030400d6ffcb06f8ff5406b3ff5406d6ffcb06040000002d010000040000002d0103000c00000024030400d6ffcc06f9ff5406b3ff5406d6ffcc060a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000
000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016047b04900aa8f9b0f508000000fa0206000800000000000000040000002d010400030000001e00070000001604bf04cfffbc03c6ff050000001402c502cbff050000001302b605cbff040000002701ffff
040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d010100040000002d01020004000000f00104000c00000024030400cbffb604edff3f04a8ff3f04cbffb604040000002d010000040000002d0103000c00000024030400cbffb704eeff3f04a8ff3f04cbffb7040a0000
0026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001604aafd900aa8f9b0f508000000fa0206000800000000000000040000002d010400030000001e00070000001604eefdadffeafca4ff050000001402f2fba9ff050000001302e6fea9ff040000002701ffff04000000
2701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d010100040000002d01020004000000f00104000c00000024030400a9ffe5fdcbff6efd86ff6efda9ffe5fd040000002d010000040000002d0103000c00000024030400a9ffe6fdccff6efd86ff6efda9ffe6fd0a00000026060f
000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000015000000fb02a0fe0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01040004000000f001050007000000210501002000b2fb2ff80a00000026060f000a00ffffffff0100000000000a00
000026060f000a00ffffffff0000000000000700000016041d00befd26fda0fb08000000fa0206000b00000000000000040000002d010500030000001e000700000016045a00eafdeafc75fb05000000140286f95300050000001302be030cf9040000002701ffff040000002701ffff030000001e00070000001604480890
0aa8f9b0f5040000002d010500040000002d010100040000002d01020004000000f00105000c0000002403040076fb5800d7fb0b00a0fbe3ff76fb5800040000002d010000040000002d0103000c0000002403040076fb5900d8fb0b00a0fbe3ff76fb5900040000002d010100040000002d0102000c00000024030400e8fd
ebfc87fd38fdbefd60fde8fdebfc040000002d010000040000002d0103000c00000024030400e9fdebfc87fd39fdbffd61fde9fdebfc0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000160487043004ba01c90108000000fa0206000b00000000000000040000
002d010500030000001e00070000001604c40464047e01960105000000140244fe2607050000001302fe07d4fe040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010500040000002d010100040000002d01020004000000f00105000c000000240304009701c204ff01
7f04ca0151049701c204040000002d010000040000002d0103000c000000240304009701c30400027f04ca0151049701c304040000002d010100040000002d0102000c0000002403040062047f01fa03c2012f04f00162047f01040000002d010000040000002d0103000c0000002403040063047f01fa03c3013004f10163
047f010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001604b3fb900aa8f9b0f508000000fa0206000800000000000000040000002d010500030000001e00070000001604f7fb80fff5fa77ff050000001402fff97cff050000001302edfc7cff040000002701
ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010500040000002d010100040000002d01020004000000f00105000c000000240304007cffeefb9eff77fb59ff77fb7cffeefb040000002d010000040000002d0103000c000000240304007cffeffb9fff77fb59ff77fb7cffeffb0a
00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000015000000fb0280ff0000000000009001020000000000001054696d6573204e657720526f6d616e000000040000002d01050004000000f0010400130000002105190073656d616e746963732d64726976656e20616e616c79
736973007b051e050a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016044808900aa8f91c0208000000fa02060001000000fc012800040000002d010400030000001e000700000016043e05e7013c05e0010500000014023d05d9010500000013023d05ee0104
0000002701ffff030000001e00070000001604400507023e0500020500000014023f05f9010500000013023f050e02040000002701ffff030000001e00070000001604410527023f0520020500000014024005190205000000130240052e02040000002701ffff030000001e00070000001604430547024105400205000000
14024205390205000000130242054e02040000002701ffff030000001e0007000000160444056702430560020500000014024205590205000000130245056e02040000002701ffff030000001e0007000000160446058702440580020500000014024505790205000000130245058e02040000002701ffff030000001e0007
00000016044705a7024605a002050000001402450599020500000013024805ae02040000002701ffff030000001e000700000016044905c7024705c0020500000014024805b9020500000013024805ce02040000002701ffff030000001e000700000016044b05e7024905e0020500000014024a05d9020500000013024a05
ee02040000002701ffff030000001e000700000016044c0507034a0500030500000014024b05f9020500000013024b050e03040000002701ffff030000001e000700000016044e0527034c0520030500000014024d0519030500000013024d052e03040000002701ffff030000001e000700000016044f0547034e05400305
00000014024d05390305000000130250054e03040000002701ffff030000001e00070000001604510567034f0560030500000014025005590305000000130250056e03040000002701ffff030000001e0007000000160452058703510580030500000014025005790305000000130253058e03040000002701ffff03000000
1e000700000016045405a7035205a003050000001402530599030500000013025305ae03040000002701ffff030000001e000700000016045605c7035405c0030500000014025505b9030500000013025505ce03040000002701ffff030000001e000700000016045705e7035505e0030500000014025605d9030500000013
025605ee03040000002701ffff030000001e0007000000160459050704570500040500000014025805f90305000000130258050e04040000002701ffff030000001e000700000016045a05270459052004050000001402580519040500000013025b052e04040000002701ffff030000001e000700000016045c0547045a05
40040500000014025b0539040500000013025b054e04040000002701ffff030000001e000700000016045d0567045c0560040500000014025b0559040500000013025e056e04040000002701ffff030000001e000700000016045f0587045d0580040500000014025e0579040500000013025e058e04040000002701ffff03
0000001e000700000016046105a7045f05a004050000001402600599040500000013026005ae04040000002701ffff030000001e000700000016046205c7046005c0040500000014026105b9040500000013026105ce04040000002701ffff030000001e000700000016046405e7046205e0040500000014026305d9040500
000013026305ee04040000002701ffff030000001e0007000000160465050705640500050500000014026305f90405000000130266050e05040000002701ffff030000001e00070000001604670524056505200505000000140266051c0505000000130266052805040000002701ffff040000002701ffff030000001e0007
00000016044808900aa8f9b0f5040000002d010400040000002d0101000c00000024030400e1013e05560266055a022105e1013e0507000000fc020000fc0128000000040000002d010600040000002d01030004000000f00104000c00000024030400e1013e05570267055b022105e1013e050a00000026060f000a00ffff
ffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010500110000002105160073796e7461782d64726976656e20616e616c7973697389fb67040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016044808900aa8f9a501080000
00fa02060001000000fc012800040000002d010400030000001e00070000001604e2fb7001e1fb6901050000001402e3fb6201050000001302e0fb7701040000002701ffff030000001e00070000001604dcfb9001dbfb8901050000001402ddfb8201050000001302dafb9701040000002701ffff030000001e0007000000
1604d7fbb001d6fba901050000001402d8fba201050000001302d5fbb701040000002701ffff030000001e00070000001604d1fbd001d0fbc901050000001402d2fbc201050000001302cffbd701040000002701ffff030000001e00070000001604ccfbf001cbfbe901050000001402cdfbe201050000001302cafbf70104
0000002701ffff030000001e00070000001604c6fb1002c5fb0902050000001402c7fb0202050000001302c4fb1702040000002701ffff030000001e00070000001604c1fb3002c0fb2902050000001402c2fb2202050000001302bffb3702040000002701ffff030000001e00070000001604bbfb5002bafb490205000000
1402bcfb4202050000001302b9fb5702040000002701ffff030000001e00070000001604b6fb7002b5fb6902050000001402b7fb6202050000001302b4fb7702040000002701ffff030000001e00070000001604b0fb9002affb8902050000001402b1fb8202050000001302aefb9702040000002701ffff030000001e0007
0000001604abfbb002aafba902050000001402acfba202050000001302a9fbb702040000002701ffff030000001e00070000001604a5fbd002a4fbc902050000001402a6fbc202050000001302a3fbd702040000002701ffff030000001e00070000001604a0fbf0029ffbe902050000001402a1fbe2020500000013029efb
f702040000002701ffff030000001e000700000016049afb100399fb09030500000014029bfb020305000000130298fb1703040000002701ffff030000001e0007000000160495fb300394fb290305000000140296fb220305000000130293fb3703040000002701ffff030000001e000700000016048ffb50038efb490305
000000140290fb42030500000013028dfb5703040000002701ffff030000001e000700000016048afb700389fb69030500000014028bfb620305000000130288fb7703040000002701ffff030000001e0007000000160484fb900383fb890305000000140285fb820305000000130282fb9703040000002701ffff03000000
1e000700000016047ffbb0037efba90305000000140280fba2030500000013027dfbb703040000002701ffff030000001e0007000000160479fbd00378fbc9030500000014027afbc20305000000130277fbd703040000002701ffff030000001e0007000000160474fbf00373fbe90305000000140275fbe2030500000013
0272fbf703040000002701ffff030000001e000700000016046efb10046dfb09040500000014026ffb02040500000013026cfb1704040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d01010004000000f00106000c000000240304006a01e2fbe501
f1fbd901acfb6a01e2fb07000000fc020000fc0128000000040000002d010600040000002d01030004000000f00104000c000000240304006a01e3fbe601f2fbda01acfb6a01e3fb0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001604e9ff900aa8f9a10108
000000fa02060001000000fc012800040000002d010400030000001e00070000001604240081011d007d010500000014022b00790105000000130216008501040000002701ffff030000001e0007000000160404009301fdff8f010500000014020b008b01050000001302f6ff9701040000002701ffff030000001e000700
00001604e4ffa601ddffa201050000001402ebff9e01050000001302d6ffaa01040000002701ffff030000001e00070000001604c4ffb801bdffb401050000001402cbffb001050000001302b6ffbc01040000002701ffff030000001e00070000001604a4ffcb019dffc701050000001402abffc30105000000130296ffcf
01040000002701ffff030000001e0007000000160484ffdd017dffd9010500000014028bffd50105000000130276ffe101040000002701ffff030000001e0007000000160464fff0015dffec010500000014026bffe80105000000130256fff401040000002701ffff030000001e0007000000160444ff02023dfffe010500
000014024bfffa0105000000130236ff0602040000002701ffff030000001e0007000000160424ff14021dff10020500000014022bff0c0205000000130216ff1802040000002701ffff030000001e0007000000160404ff2702fdfe23020500000014020bff1f02050000001302f6fe2b02040000002701ffff030000001e
00070000001604e4fe3902ddfe3502050000001402ebfe3102050000001302d6fe3d02040000002701ffff030000001e00070000001604c4fe4c02bdfe4802050000001402cbfe4402050000001302b6fe5002040000002701ffff030000001e00070000001604a4fe5e029dfe5a02050000001402abfe5602050000001302
96fe6202040000002701ffff030000001e0007000000160484fe71027dfe6c020500000014028bfe670205000000130276fe7602040000002701ffff030000001e0007000000160464fe83025dfe7f020500000014026bfe7b0205000000130256fe8702040000002701ffff030000001e0007000000160444fe95023dfe91
020500000014024bfe8d0205000000130236fe9902040000002701ffff030000001e0007000000160424fea8021dfea4020500000014022bfea00205000000130216feac02040000002701ffff030000001e0007000000160404feba02fdfdb6020500000014020bfeb202050000001302f6fdbe02040000002701ffff0300
00001e00070000001604e4fdcd02ddfdc902050000001402ebfdc502050000001302d6fdd102040000002701ffff030000001e00070000001604c4fddf02bdfddb02050000001402cbfdd702050000001302b6fde302040000002701ffff030000001e00070000001604a4fdf1029dfded02050000001402abfde902050000
00130296fdf502040000002701ffff030000001e0007000000160484fd04037dfd00030500000014028bfdfc0205000000130276fd0803040000002701ffff030000001e0007000000160464fd16035dfd12030500000014026bfd0e0305000000130256fd1a03040000002701ffff030000001e0007000000160444fd2903
3dfd25030500000014024bfd210305000000130236fd2d03040000002701ffff030000001e0007000000160424fd3b031dfd37030500000014022bfd330305000000130216fd3f03040000002701ffff030000001e0007000000160404fd4e03fdfc4a030500000014020bfd4603050000001302f6fc5203040000002701ff
ff030000001e00070000001604e4fc6003ddfc5c03050000001402ebfc5803050000001302d6fc6403040000002701ffff030000001e00070000001604c4fc7203bdfc6e03050000001402cbfc6a03050000001302b6fc7603040000002701ffff030000001e00070000001604a4fc85039dfc8103050000001402abfc7d03
05000000130296fc8903040000002701ffff030000001e0007000000160484fc97037dfc93030500000014028bfc8f0305000000130276fc9b03040000002701ffff030000001e0007000000160464fcaa035dfca6030500000014026bfca20305000000130256fcae03040000002701ffff030000001e0007000000160444
fcbc033dfcb8030500000014024bfcb40305000000130236fcc003040000002701ffff030000001e0007000000160424fcce031dfcca030500000014022bfcc60305000000130216fcd203040000002701ffff030000001e0007000000160404fce103fdfbdd030500000014020bfcd903050000001302f6fbe50304000000
2701ffff030000001e00070000001604e4fbf303ddfbef03050000001402ebfbeb03050000001302d6fbf703040000002701ffff030000001e00070000001604c4fb0604bdfb0204050000001402cbfbfe03050000001302b6fb0a04040000002701ffff030000001e00070000001604a4fb18049dfb1404050000001402ab
fb100405000000130296fb1c04040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d01010004000000f00106000c000000240304007f012400d801ceff9d01acff7f01240007000000fc020000fc0128000000040000002d010600040000002d010300
04000000f00104000c000000240304007f012500d901ceff9d01acff7f0125000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01010004000000f001060008000000fa0206000800000000000000040000002d01040007000000180446086701c30639fe15
000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01060004000000f00105000a000000210508004c6f67666f726d732a07d0fe0c00000021050b005061727365205472656573009e07a3fe08000000210503005446530012085dff0a00000026060f000a00
ffffffff0100000000000a00000026060f000a00ffffffff00000000000015000000fb0280ff0000000000009001020000000000001054696d6573204e657720526f6d616e000000040000002d01050004000000f00106001100000021051600706172736520747265657320666f72206368756e6b734bfcf6f50a00000026
060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000001100000021051500636f6d706c65746520706172736520747265657320004602eaf512000000210518007769746820206465746163686564206d6f64696669657273e002eaf50f000000210512002864656661756c7420706f736974
696f6e297a03eaf50a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000f0000002105110070617273652074726565732077697468200001073ef80f000000210512006174746163686564206d6f646966696572739b073ef80a00000026060f000a00ffffffff0100000000
000a00000026060f000a00ffffffff00000000000007000000160445fedafda8f9b0f508000000fa0206000100000000ae0000040000002d01060004000000f0010400030000001e0007000000160469fe15fe65fe0efe0500000014026dfe1cfe05000000130261fe07fe040000002701ffff030000001e00070000001604
56fef5fd52feeefd0500000014025afefcfd0500000013024efee7fd040000002701ffff030000001e0007000000160444fed5fd40fecefd05000000140248fedcfd0500000013023cfec7fd040000002701ffff030000001e0007000000160431feb5fd2dfeaefd05000000140235febcfd05000000130229fea7fd040000
002701ffff030000001e000700000016041ffe95fd1bfe8efd05000000140223fe9cfd05000000130217fe87fd040000002701ffff030000001e000700000016040cfe75fd08fe6efd05000000140210fe7cfd05000000130204fe67fd040000002701ffff030000001e00070000001604fafd55fdf5fd4efd050000001402
fffd5cfd050000001302f0fd47fd040000002701ffff030000001e00070000001604e7fd35fde3fd2efd050000001402ebfd3cfd050000001302dffd27fd040000002701ffff030000001e00070000001604d4fd15fdd0fd0efd050000001402d8fd1cfd050000001302ccfd07fd040000002701ffff030000001e00070000
001604c2fdf5fcbefdeefc050000001402c6fdfcfc050000001302bafde7fc040000002701ffff030000001e00070000001604affdd5fcabfdcefc050000001402b3fddcfc050000001302a7fdc7fc040000002701ffff030000001e000700000016049dfdb5fc99fdaefc050000001402a1fdbcfc05000000130295fda7fc
040000002701ffff030000001e000700000016048afd95fc86fd8efc0500000014028efd9cfc05000000130282fd87fc040000002701ffff030000001e0007000000160477fd75fc73fd6efc0500000014027bfd7cfc0500000013026ffd67fc040000002701ffff030000001e0007000000160465fd55fc61fd4efc050000
00140269fd5cfc0500000013025dfd47fc040000002701ffff030000001e0007000000160452fd35fc4efd2efc05000000140256fd3cfc0500000013024afd27fc040000002701ffff030000001e0007000000160440fd15fc3cfd0efc05000000140244fd1cfc05000000130238fd07fc040000002701ffff030000001e00
0700000016042dfdf5fb29fdeefb05000000140231fdfcfb05000000130225fde7fb040000002701ffff030000001e000700000016041bfdd5fb17fdcefb0500000014021ffddcfb05000000130213fdc7fb040000002701ffff030000001e0007000000160408fdb5fb04fdaefb0500000014020cfdbcfb05000000130200
fda7fb040000002701ffff030000001e00070000001604f5fc95fbf1fc8efb050000001402f9fc9cfb050000001302edfc87fb040000002701ffff030000001e00070000001604e3fc75fbdffc6efb050000001402e7fc7cfb050000001302dbfc67fb040000002701ffff030000001e00070000001604d0fc55fbccfc4efb
050000001402d4fc5cfb050000001302c8fc47fb040000002701ffff030000001e00070000001604befc35fbbafc2efb050000001402c2fc3cfb050000001302b6fc27fb040000002701ffff030000001e00070000001604abfc15fba7fc0efb050000001402affc1cfb050000001302a3fc07fb040000002701ffff030000
001e0007000000160499fcf5fa94fceefa0500000014029efcfcfa0500000013028ffce7fa040000002701ffff030000001e0007000000160486fcd5fa82fccefa0500000014028afcdcfa0500000013027efcc7fa040000002701ffff030000001e0007000000160473fcb5fa6ffcaefa05000000140277fcbcfa05000000
13026bfca7fa040000002701ffff030000001e0007000000160461fc95fa5dfc8efa05000000140265fc9cfa05000000130259fc87fa040000002701ffff030000001e000700000016044efc75fa4afc6efa05000000140252fc7cfa05000000130246fc67fa040000002701ffff040000002701ffff030000001e00070000
0016044808900aa8f9b0f5040000002d010600040000002d0101000c0000002403040015fe67febffd0efe9dfd49fe15fe67fe07000000fc02000000ae00000000040000002d010400040000002d01030004000000f00106000c0000002403040016fe68febffd0efe9dfd4afe16fe68fe0a00000026060f000a00ffffffff
0100000000000a00000026060f000a00ffffffff0000000000000700000016044808d4fda8f9b0f508000000fa0206000100000000ae0000040000002d010600030000001e00070000001604d30210fed10209fe050000001402d20217fe050000001302d20202fe040000002701ffff030000001e00070000001604d202f0
fdd002e9fd050000001402d102f7fd050000001302d102e2fd040000002701ffff030000001e00070000001604d102d0fdcf02c9fd050000001402d002d7fd050000001302d002c2fd040000002701ffff030000001e00070000001604d002b0fdce02a9fd050000001402cf02b7fd050000001302cf02a2fd040000002701
ffff030000001e00070000001604ce0290fdcd0289fd050000001402cf0297fd050000001302cc0282fd040000002701ffff030000001e00070000001604cd0270fdcc0269fd050000001402ce0277fd050000001302cb0262fd040000002701ffff030000001e00070000001604cc0250fdcb0249fd050000001402cd0257
fd050000001302ca0242fd040000002701ffff030000001e00070000001604cb0230fdca0229fd050000001402cc0237fd050000001302c90222fd040000002701ffff030000001e00070000001604ca0210fdc80209fd050000001402c90217fd050000001302c90202fd040000002701ffff030000001e00070000001604
c902f0fcc702e9fc050000001402c802f7fc050000001302c802e2fc040000002701ffff030000001e00070000001604c802d0fcc602c9fc050000001402c702d7fc050000001302c702c2fc040000002701ffff030000001e00070000001604c702b0fcc502a9fc050000001402c602b7fc050000001302c602a2fc040000
002701ffff030000001e00070000001604c60290fcc40289fc050000001402c50297fc050000001302c50282fc040000002701ffff030000001e00070000001604c50270fcc30269fc050000001402c40277fc050000001302c40262fc040000002701ffff030000001e00070000001604c40250fcc20249fc050000001402
c30257fc050000001302c30242fc040000002701ffff030000001e00070000001604c30230fcc10229fc050000001402c20237fc050000001302c20222fc040000002701ffff030000001e00070000001604c20210fcc00209fc050000001402c10217fc050000001302c10202fc040000002701ffff030000001e00070000
001604c102f0fbbf02e9fb050000001402c002f7fb050000001302c002e2fb040000002701ffff030000001e00070000001604c002d0fbbe02c9fb050000001402bf02d7fb050000001302bf02c2fb040000002701ffff030000001e00070000001604be02b0fbbd02a9fb050000001402bf02b7fb050000001302bc02a2fb
040000002701ffff030000001e00070000001604bd0290fbbc0289fb050000001402be0297fb050000001302bb0282fb040000002701ffff030000001e00070000001604bc0270fbbb0269fb050000001402bd0277fb050000001302ba0262fb040000002701ffff030000001e00070000001604bb0250fbba0249fb050000
001402bc0257fb050000001302b90242fb040000002701ffff030000001e00070000001604ba0230fbb80229fb050000001402b90237fb050000001302b90222fb040000002701ffff030000001e00070000001604b90210fbb70209fb050000001402b80217fb050000001302b80202fb040000002701ffff040000002701
ffff030000001e000700000016044808900aa8f9b0f5040000002d010600040000002d01010004000000f00104000c000000240304000ffed20299fdac0297fdf1020ffed20207000000fc02000000ae00000000040000002d010400040000002d01030004000000f00106000c0000002403040010fed30299fdac0297fdf2
0210fed3020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016044808dafda8f9b0f508000000fa0206000100000000ae0000040000002d010600030000001e00070000001604360716fe35070ffe05000000140237071dfe050000001302340708fe04000000
2701ffff030000001e000700000016043307f6fd3207effd0500000014023407fdfd0500000013023107e8fd040000002701ffff030000001e000700000016043007d6fd2f07cffd0500000014023107ddfd0500000013022e07c8fd040000002701ffff030000001e000700000016042d07b6fd2c07affd0500000014022e
07bdfd0500000013022b07a8fd040000002701ffff030000001e000700000016042a0796fd29078ffd0500000014022b079dfd050000001302280788fd040000002701ffff030000001e00070000001604270776fd26076ffd05000000140228077dfd050000001302250768fd040000002701ffff030000001e0007000000
1604240756fd23074ffd05000000140225075dfd050000001302220748fd040000002701ffff030000001e00070000001604210736fd20072ffd05000000140222073dfd0500000013021f0728fd040000002701ffff030000001e000700000016041e0716fd1d070ffd0500000014021f071dfd0500000013021c0708fd04
0000002701ffff030000001e000700000016041b07f6fc1a07effc0500000014021c07fdfc0500000013021907e8fc040000002701ffff030000001e000700000016041807d6fc1707cffc0500000014021907ddfc0500000013021607c8fc040000002701ffff030000001e000700000016041507b6fc1407affc05000000
14021607bdfc0500000013021307a8fc040000002701ffff030000001e00070000001604120796fc11078ffc05000000140213079dfc050000001302100788fc040000002701ffff030000001e000700000016040f0776fc0e076ffc05000000140210077dfc0500000013020d0768fc040000002701ffff030000001e0007
00000016040c0756fc0a074ffc0500000014020b075dfc0500000013020b0748fc040000002701ffff030000001e00070000001604090736fc07072ffc05000000140208073dfc050000001302080728fc040000002701ffff030000001e00070000001604060716fc04070ffc05000000140205071dfc0500000013020507
08fc040000002701ffff030000001e000700000016040307f6fb0107effb0500000014020207fdfb0500000013020207e8fb040000002701ffff030000001e000700000016040007d6fbfe06cffb050000001402ff06ddfb050000001302ff06c8fb040000002701ffff040000002701ffff030000001e0007000000160448
08900aa8f9b0f5040000002d010600040000002d01010004000000f00104000c0000002403040015fe3607a2fd09079cfd4e0715fe360707000000fc02000000ae00000000040000002d010400040000002d01030004000000f00106000c0000002403040016fe3707a2fd09079cfd4f0716fe37070a00000026060f000a00
ffffffff0100000000000a00000026060f000a00ffffffff010000000000040000002701ffff0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048000000180000030500000323000002c200000264000001e700000161000000000000
0000000000000000000000000000000000000000000000000000}}{\lang2057 
\par }\pard\plain \s24\qc\li300\ri274\sb120\sa120\nowidctlpar\box\brdrs\brdrw15\brsp20 \f8\lang1024 {\lang2057 Figure: Parsing 
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104242}1.5 PARSING{\*\bkmkend _Toc433104242}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The input to the parser is the output of the preparser.
\par Three steps are performed in order to parse a text:}{\fs20\lang2057  
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri84\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 chunking: used to recognise non-recursive DPs, PPs, VGs, etc.; the output of this step are edges in the cha
rt representing the recognised constituents.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
A-Structure recognition, used to recognise subcategorization frames of objects such as VGs and DPs and to build both main and subordinate sentential constituents; the output of this module is the chart with added the edges spanning the recognised A-struct
ures; Modifiers (e.g. PPs, relative clauses, etc.) are attached in default positions; the correct position will be decided in the following step. A-structure recognition is performed in three steps: }{\f3\fs20\lang2057 CLAUSE-LEVEL}{\lang2057 , }{
\f3\fs20\lang2057 SENTENCE-LEVEL}{\lang2057 , and }{\f3\fs20\lang2057 RECOVERY-LEVEL }{\f4\lang2057 (see the manual [D10.4] for details).}{\fs20\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri-58\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 modifier attachment, used to attach objects such as PPs, relative clauses and other adjuncts to the most 
\ldblquote appropriate\rdblquote  constituents within the sentence. The input to this module are:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri-58\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
 the parse trees in the chart with  modifiers attached in default positions; a parse tree is defined as an edge covering (part of) a sentence together with its spanned edges. A Parse tree is shown in the next figure. The PP is a modifier in the default po
sition. In the PINOCCHIO graphers unattached modifiers are marked with an asterisk.
\par {\pntext\tab}}\pard \fi-283\li1723\ri-58\sb80\sa80{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f4\fs20 {\pict\wmetafile8\picw16193\pich9631\picwgoal9192\pichgoal5472 \box\brdrs\brdrw15 
\picscalex67\picscaley67\piccropl-124\piccropr-20\piccropb-20 
010009000003d60500000400280000000000050000000b0200000000050000000c021101cb010400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000007000000fc020000fc0128000000040000002d01000008000000fa02060001000100ffffff00040000002d010100070000001b04720098014f006401050000000902ffffff0015000000fb02ecff00000000
0000bc02000000000000001254696d6573204e657720526f6d616e000000040000002d010200080000002105030050502a0066006d010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000005000000090200000000110000
00fb02f0ff00000000000090010000000000000031436f7572696572007720040000002d01030004000000f0010200080000002105040054686520080107000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000001a00000021052800636f6d70616e792077696c6c2070726f
647563652020636172732020696e20207468652020205553080143000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000015000000fb02f0ff0000000000009001000000000000001254696d6573204e657720526f6d616e
000000040000002d01020004000000f0010300080000002105030064657400ba0007000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000900000021050600636f6d6d6f6eba003d000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff
00000000000009000000210505006d6f64616c00ba0090000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000009000000210505006d61696e7600ba00cc000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000001500000021
051d00636f6d6d6f6e202070726570202020206465742020202070726f70657200ba0008010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000028000000210544004e5020202020202020202020202020202020202020202020202020202056472020202020202020202020
202020202020202020204e50202020202020202020202020202066002b000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a0000002105080073656e74656e63651200bb000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000
00000008000000fa0206000100010000000000040000002d010300030000001e00070000001604a900330073000f00050000001402df00ebff0500000013023d005700040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604
a9005700730033000500000014023d000f00050000001302df007b00040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604a900bd0073009900050000001402df0075000500000013023d00e100040000002701ffff0a0000
0026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604a900e1007300bd000500000014023d009900050000001302df000501040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000300
00001e00070000001604a600210176001f0105000000140246002001050000001302d6002001040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ee002101be001f010500000014028e0020010500000013021e01200104
0000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ee005701be0055010500000014028e0056010500000013021e015601040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffff
ffff000000000000030000001e00070000001604ee008701be0085010500000014028e0086010500000013021e018601040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ee00b701be00b5010500000014028e00b60105
00000013021e01b601040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ee00d900be00d7000500000014028e00d8000500000013021e01d800040000002701ffff0a00000026060f000a00ffffffff0100000000000a00
000026060f000a00ffffffff000000000000030000001e00070000001604ee009d00be009b000500000014028e009c000500000013021e019c00040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ee005b00be00590005
00000014028e005a000500000013021e015a00040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ee001300be0011000500000014028e0012000500000013021e011200040000002701ffff0a00000026060f000a00ffff
ffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016044e00db0019003900050000001402e4ff7d01050000001302830097ff040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016
044e007d011900db00050000001402e4ff390005000000130283001f02040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016044900db001900b70005000000140279009300050000001302e9ffff00040000002701ffff0a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e0007000000160449001d011900db00050000001402e9ff990005000000130279005f01040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000003
0000001e00070000001604a9007d0173005901050000001402df0035010500000013023d00a101040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604a900a10173007d010500000014023d005901050000001302df00c501
040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604a6007f0176007d0105000000140246007e01050000001302d6007e01040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ff
ffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff030000000000000000000000000000000000000000000000000000fe040000002d010100040000002d0102000c000000240304000ffa580031fa00ffecf9e1ff0ffa
5800040000002d010000040000002d0103000c000000240300000ffa590032fae1ffecf9e1ff0ffa59000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0000000000000700000016040000900ac9feb0f508000000fa0206000800000000000000040000002d010400000000001e0007
00000016046100a1058dfe980505000000140229029d05050000001302c5fc9d05040000002701ffff040000002701ffff030000001e000700}}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri-58\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
a list of instances in the knowledge base produced by using the logical forms contained in the DAGs of each parse-tree. So for example in the sentence above the logical form could be: }{\i\lang2057 
ORGANIZATION(X) & PRODUCE(Y) & AGENT (Y X) & PATIENT(Y Z) & VEHICLE(Z) & COUNTRY(W) & HAS-NAME(W USA). }{\lang2057 The produced instances in the KB can be: 
\par }\pard\plain \s2\li720\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\b0\scaps0\f4\fs20 {\*\bkmkstart _Toc433104243}{\pict\wmetafile8\picw23389\pich9843\picwgoal13272\pichgoal5580 \box\brdrs\brdrw15 
\picscalex63\picscaley63\piccropl-115\piccropt-246\piccropr-20 
010009000003330600000500110000000000050000000b0200000000050000000c02170197020400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff00000000000007000000fc020000ffffff000000040000002d01000008000000fa0206000100010000000000040000002d010100070000001b045b0073004200000011000000fb02f2ff00000000000090010000000000000031436f7572696572000000040000002d010200
0c00000021050c006f7267616e697a6174696f6e520007000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b045b0021014200c0000a0000002105070076656869636c65005200d3000a00000026060f000a00ffffffff0100000000000a00000026060f000a
00ffffffff000000000000070000001b045b00d201420071010a0000002105070070726f6475636500520084010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b041900c700000066000a000000210507006f626a6563747300100079000a00000026060f00
0a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b041900d201000071010a00000021050700616374696f6e7300100084010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016043c0072001e00420005
00000014025a0012000500000013020000a200040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016043c00d8001e00b400050000001402000090000500000013025a00fc00040000002701ffff0a00000026060f000a00ffff
ffff0100000000000a00000026060f000a00ffffffff00000000000008000000fa02050000000000ffffff00040000002d0103000e0000002403050041001a006a001a006a0033004100330041001a000800000021050300495341002a0048000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ff
ffffff0000000000000e000000240305008d012600b6012600b6013f008d013f008d012600080000002105030049534100360094010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000e00000024030500c5002000ee002000ee003900c5003900c5002000080000002105
0300495341003000cc000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e000700000016044200a2011800a001050000001402eeffa1010500000013026c00a101040000002701ffff0a00000026060f000a00ffffffff0100000000000a
00000026060f000a00ffffffff000000000000030000001e00070000001604b400a2015a00a0010500000014020000a1010500000013020e01a101040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04d300b701b4008c01070000002105
01005900c7009d010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ba003d0060003b0005000000140206003c0005000000130214013c00040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ff
ffffff000000000000070000001b04d9004f00ba00240007000000210501005800cd0035000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016049600f1006000ef000500000014022a00f000050000001302cc00f000040000002701ffff0a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04b50003019600d80007000000210501005a00a900e9000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604a9003801a7000a0105
0000001402a800dc00050000001302a8006601040000002701ffff07000000fc020000000000000000040000002d010400040000002d0103000c000000240304000201a8001101ac001101a3000201a8000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01
0000040000002d010100070000001804af004501a20038010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604c6008c01a80044010500000014028a00fc00050000001302e400d401040000002701ffff0a00000026060f000a00ffffffff01
00000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604f500f000ce005c00050000001402a700c8ff0500000013021c018401040000002701ffff040000002d010400040000002d0103000c000000240304005400cc006200d4006400cc005400cc000a00000026060f000a00ffffffff
0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100070000001804fd00fd00f000f0000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604f0008c01c600fc000500000014021a016c0005
00000013029c001c02040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d0103000e000000240305001f0186006901860069019f001f019f001f0186000a0000002105070070617469656e7400960026010a00000026060f000a00ffffffff
0100000000000a00000026060f000a00ffffffff0000000000000e00000024030500d700d4001001d4001001ed00d700ed00d700d40009000000210505006167656e7400e400de000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100070000001b045b
009502420022020a00000021050700636f756e7472790052003d020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e0007000000160496005902600057020500000014022a005802050000001302cc005802040000002701ffff0a00000026060f000a00ffff
ffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04b5006b029600400207000000210501005700a90050020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604f4003502d80033020500000014021001340205
0000001302bc003402040000002701ffff040000002d010400040000002d0103000c000000240304003402fc003802ed002f02ed003402fc000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100070000001804d9003b02cc002e02
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604cc005802ba003a02050000001402de001c02050000001302a8007602040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000
00040000002d0103000e000000240305004502ce009702ce009702e7004502e7004502ce000a000000210508006861732d6e616d65de004c020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00
ffffffff000000000000040000002d010100070000001b0415014702f6001c02080000002105030055534100090124020a00000026060f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff03000000000000
0000000000000000000000000000000000000000000000000000001302c5fc9d05040000002701ffff040000002701ffff030000001e000700000016044808900aa8f9b0f5040000002d010400040000002d010100040000000001020004000000f00104000c000000240304009d058efe7a0505ffbf0505ff00058efe0400
00002d010000040000002d0103000c000000240304009d058efe000506ffc00506ff9d058efe040000002d010100040000002d0102000c000000000304009d055800bf05e1ff7a05e1ff9d055800040000002d01000004000000000103000c000000240304009d055900c005e1ff7a05e1ff9d0559000a000000}}{
\lang2057 {\*\bkmkend _Toc433104243}
\par }\pard\plain \li2160\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 As it can be seen the instances produced by the modifier \ldblquote in the US\rdblquote  are not attached to any other in
stances. Modifier attachment modifies the parse tree by attaching the modifier in the right position and by connecting instances by filling slots. The final instances will then be:
\par }\pard \li720\ri100\sb80\sa80\nowidctlpar {\f4\fs20 {\pict\wmetafile8\picw23389\pich9843\picwgoal13272\pichgoal5580 \box\brdrs\brdrw15 \picscalex62\picscaley62\piccropl-271\piccropt-213\piccropr-20 
010009000003ec0600000500110000000000050000000b0200000000050000000c02170197020400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff00000000000007000000fc020000ffffff000000040000002d01000008000000fa0206000100010000000000040000002d010100070000001b045b0073004200000011000000fb02f2ff00000000000090010000000000000031436f7572696572000000040000002d010200
0c00000021050c006f7267616e697a6174696f6e520007000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b045b0021014200c0000a0000002105070076656869636c65005200d3000a00000026060f000a00ffffffff0100000000000a00000026060f000a
00ffffffff000000000000070000001b045b00d201420071010a0000002105070070726f6475636500520084010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b041900c700000066000a000000210507006f626a6563747300100079000a00000026060f00
0a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b041900d201000071010a00000021050700616374696f6e7300100084010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016043c0072001e00420005
00000014025a0012000500000013020000a200040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016043c00d8001e00b400050000001402000090000500000013025a00fc00040000002701ffff0a00000026060f000a00ffff
ffff0100000000000a00000026060f000a00ffffffff00000000000008000000fa02050000000000ffffff00040000002d0103000e0000002403050041001a006a001a006a0033004100330041001a000800000021050300495341002a0048000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ff
ffffff0000000000000e000000240305008d012600b6012600b6013f008d013f008d012600080000002105030049534100360094010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000e00000024030500c5002000ee002000ee003900c5003900c5002000080000002105
0300495341003000cc000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e000700000016044200a2011800a001050000001402eeffa1010500000013026c00a101040000002701ffff0a00000026060f000a00ffffffff0100000000000a
00000026060f000a00ffffffff000000000000030000001e00070000001604b400a2015a00a0010500000014020000a1010500000013020e01a101040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04d300b701b4008c01070000002105
01005900c7009d010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ba003d0060003b0005000000140206003c0005000000130214013c00040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ff
ffffff000000000000070000001b04d9004f00ba00240007000000210501005800cd0035000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016049600f1006000ef000500000014022a00f000050000001302cc00f000040000002701ffff0a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04b50003019600d80007000000210501005a00a900e9000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604a9003801a7000a0105
0000001402a800dc00050000001302a8006601040000002701ffff07000000fc020000000000000000040000002d010400040000002d0103000c000000240304000201a8001101ac001101a3000201a8000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01
0000040000002d010100070000001804af004501a20038010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604c6008c01a80044010500000014028a00fc00050000001302e400d401040000002701ffff0a00000026060f000a00ffffffff01
00000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604f500f000ce005c00050000001402a700c8ff0500000013021c018401040000002701ffff040000002d010400040000002d0103000c000000240304005400cc006200d4006400cc005400cc000a00000026060f000a00ffffffff
0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100070000001804fd00fd00f000f0000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604f0008c01c600fc000500000014021a016c0005
00000013029c001c02040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d0103000e000000240305001f0186006901860069019f001f019f001f0186000a0000002105070070617469656e7400960026010a00000026060f000a00ffffffff
0100000000000a00000026060f000a00ffffffff0000000000000e00000024030500d700d4001001d4001001ed00d700ed00d700d40009000000210505006167656e7400e400de000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100070000001b045b
009502420022020a00000021050700636f756e7472790052003d020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e0007000000160496005902600057020500000014022a005802050000001302cc005802040000002701ffff0a00000026060f000a00ffff
ffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04b5006b029600400207000000210501005700a90050020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604f4003502d80033020500000014021001340205
0000001302bc003402040000002701ffff040000002d010400040000002d0103000c000000240304003402fc003802ed002f02ed003402fc000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100070000001804d9003b02cc002e02
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604cc005802ba003a02050000001402de001c02050000001302a8007602040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000
00040000002d0103000e000000240305004502ce009702ce009702e7004502e7004502ce000a000000210508006861732d6e616d65de004c020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00
ffffffff000000000000040000002d010100070000001b0415014702f6001c02080000002105030055534100090124020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604c100f201bf00bc01050000001402c0008601050000001302c00028
02040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001804c700ff01ba00f2010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604c0003702ac00fe0105000000
1402d400c50105000000130298007002040000002701ffff040000002d010400040000002d0103000c000000240304004002a8003002a9003302b1004002a8000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d0100000e00000024030500bb019800270298
002702b100bb01b100bb0198000c00000021050b00696e2d6c6f636174696f6e00a800c2010a00000026060f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff030000000000000000000000000000002a03
80fe0800000021050300544653009e033aff0a00000026060f000a00000007c00100000000000a00000026060f000a00ffffffff000000000000070000001b0405069e01c30442fe0b000000210509004d6f64696669657220003a0500fe0b00000021050a004174746163686d656e74d405c1fe0a00000026060f000000ff
ffffff0100000000000a00000026060f000a00ffffffff0000000000000000000016049006900aa8f9b0f5030000001e00070000001604d406daffd20500ff050000001402dc04d6ff050000001302ca07d6ff040000002701ffff0400}}{\lang2057 
\par }\pard \li720\ri100\sb80\sa80\nowidctlpar {\lang2057 The parse tree for the sentence will remain as it was as the PP modifies the verb \ldblquote produce\rdblquote  but this is equivalent in PINOCCHIO to modify the sentence.
\par }\pard \ri100\sb80\sa80 {\lang2057 The parsing process is deterministic.
\par The first two steps are based on general syntactic principles tailored to the current application via the information contained in the lexicon ab
out subcategorization, while modifier attachment is template/application dependent as it is based on domain information.
\par }\pard \ri100\sb80\sa80 {\lang2057 
This processing model is based on an assumption that is empirically motivated: a parser is generally quite efficient in recognising subcategorization frames of objects (e.g. in finding the arguments of a verb in the sentence), while it is slow and ineffic
ient in attaching modifiers (e.g. in attaching PPs). This is due to the fact that the syntactic information is most of the time sufficie
nt for attaching arguments (e.g. agreement  and syntactic category are often enough for recognising the subject of an active verb), while at the same time the parser is mainly able to compute all the possible attachments for modifiers, without being able 
to select the correct one, as what makes the difference among all the possible attachments is the semantics of the attachments themselves.
\par }\pard \ri100\sb80\sa80 {\lang2057 When a modifier is recognised by an FST during A-structure recognition, its position in the sentence  with respect to the other  constituents (either attached or detached in the A-structure) is memorised.
\par }\pard \ri100\sb80\sa80 {\lang2057 
The  resolution of  modifier attachments is  split in  two steps: first  the possible   attachments (i.e.  the  search  space)   for  each modifier   are determined; then the correct attachments  are computed.  During the first step, modifiers are initial
ly introduced in  the A-structure at a default position given by their position  in the input  sentence. Then, their search space is computed according to such position.  A set of rules is used for determining the correct search space. Assume:
\par }\pard\plain \s62\li720\ri102\sb40\sa40 \f3\fs20\lang1024 {\lang2057 M the modifier to be attached;
\par }\pard \s62\li720\ri102\sb40\sa40 {\lang2057 A the constituent representing the A-structure;
\par H the head constituent in the A-structure;
\par C a complement in the A-structure;
\par }\pard \s62\li720\ri102\sb40\sa40 {\lang2057 X the constituent (attached or detached in the A-structure) that immediately precedes M.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Then, the following are the currently implemented rules:
\par }\pard \li720\ri102\sb40\sa40 {\f3\fs20\lang2057 (1)  search-space(M) = (X + A)     iff X = C or X = H
\par }\pard \li720\ri102\sb40\sa40 {\f3\fs20\lang2057 (2)  search-space(M) = (A)         iff X does not exist
\par (3)  search-space(M) = (X + search-space(X))  otherwise
\par }\pard \ri100\sb80\sa80 {\lang2057 Cases (1)  and  (3) take  into account that  in Italian  (as  well as  other
\par }\pard \ri100\sb80\sa80 {\lang2057 languages) the  modifier generally follows its  head in the sentence. So the
\par search space  in cases (1) and  (3) is analogous to  that given for PPs by a
\par context-free grammar such as:
\par }\pard \qc\ri100\sb80\sa80 {\f4\fs20 {\pict\wmetafile8\picw8714\pich9243\picwgoal4945\pichgoal5255 \picscalex48\picscaley43\piccropb-20 
010009000003250200000400150000000000050000000b0200000000050000000c020601f7000400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff00000000000015000000fb02e0ff0000000000009001000000000000001254696d6573204e657720526f6d616e000000040000002d0100000b0000002105090056502020202020564700200008000c00000021050c00565020202020205650204e504e0008000d0000002105
0d00204e5020202020204e50205050007c0008000d00000021050d005650202020202020565020505000aa0008000d00000021050d0056502020202020204e5020565000d80008000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000008000000fa02060001000100000000
00040000002d010100030000001e0007000000160419004b00170036000500000014021800210005000000130218006000040000002701ffff07000000fc020000000000000000040000002d01020008000000fa02050000000000ffffff00040000002d0103000c00000024030400540018004500140045001c0054001800
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e00070000001604cd005100cb003c00050000001402cc002700050000001302cc006600040000002701ffff040000002d0103000c000000240304005a00cc004b00c7004b00d0005a00cc
000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e00070000001604a3005100a1003c00050000001402a2002700050000001302a2006600040000002701ffff040000002d0103000c000000240304005a00a2004b009d004b00a6005a00
a2000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e000700000016047300510071003c000500000014027200270005000000130272006600040000002701ffff040000002d0103000c000000240304005a0072004b006d004b0076005a
0072000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e0007000000160443004b00410036000500000014024200210005000000130242006000040000002701ffff040000002d0103000c000000240304005400420045003d0045004600
540042000a00000026060f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff0300000000000000000000000000000000000000000000000000000000ff0a00000026060f000a00ffffffff0100000000000a
00000026060f000a0000ffffff000000000000030000001e00070000001604b400a2015a00a0010500000014020000a1010500000013020e01a101040000002701ffff0a000000260600000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04d300b701b4008c01070000002105
01005900c7009d010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ba003d0060003b00050000001402}}{\lang2057 
\par }\pard \ri100\sb80\sa80 {\lang2057 where PP is a modifier, NP and VG are respectively a complement and the head in the VP.
\par }\pard \ri100\sb80\sa80 {\lang2057 Case (2) can be   applied iff }{\i\lang2057 X}{\lang2057  does  not exist   (i.e. }{\i\lang2057 M}{\lang2057    is recognised as  the first element in the  A-structure); for example,
  this is equivalent to insert the rule:
\par }\pard \qc\ri100\sb80\sa80 {\f4\fs20 {\pict\wmetafile8\picw8714\pich2258\picwgoal4945\pichgoal1295 \picscalex42\picscaley42\piccropb-20 
010009000003f40000000400150000000000050000000b0200000000050000000c024000f7000400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff00000000000015000000fb02e0ff0000000000009001000000000000001254696d6573204e657720526f6d616e000000040000002d0100000d00000021050e005650202020202020505020565027200008000a00000026060f000a00ffffffff0100000000000a0000002606
0f000a00ffffffff00000000000008000000fa0206000100010000000000040000002d010100030000001e0007000000160419004b00170036000500000014021800210005000000130218006000040000002701ffff07000000fc020000000000000000040000002d01020008000000fa02050000000000ffffff00040000
002d0103000c00000024030400540018004500130045001c00540018000a00000026060f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff0300000000000000000000000000000000000000000000000000
0000000000060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e00070000001604cd005100cb003c00000000001402cc002700050000001302cc006600040000002701ffff04000000000103000c000000240304005a00cc004b00c7004b00d0005a00cc
000a00000000060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e00070000001604a3005100a1003c00000000001402a2002700050000001302a2006600040000002701ffff04000000}}{\lang2057 
\par }\pard \ri100\sb80\sa80 {\lang2057 in the grammar above. Note that }{\i\lang2057 search-space(X)}{\lang2057  is not explicitly  computed, as it  will be constrained by  }{\i\lang2057 X}{\lang2057  final attachment.
\par }\trowd \trgaph108\trleft1276\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx6946 \pard \sb80\sa80\intbl {
\b\lang2057 CURRENT VERSION LIMITATION
\par }\pard \sb80\sa80\intbl {\lang2057 the rules for computing the search space cannot be changed, as they are not expressed in a declarative form\cell }\pard \intbl {\lang2057 \row }\pard \ri100\sb80\sa80 {\lang2057 
The set of modifiers in a sentence can be seen in the parse tree. Through the Pinocchio Browser, select the sentence and ask for the \ldblquote Show Syntactic Tree\rdblquote . In that parse tree modifiers are identified by an
 asterisk. Then the search space for each modifier can be by clicking with the mouse\rquote s left button on the modifier node (select \ldblquote Show Search Space\rdblquote ).
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 
The output of the parsing process is generally complete parse trees (i.e. edges) covering whole sentences. Modifiers are attached in the right position in the tree if they are relevant for the information extraction process; the non relevant modifiers are
 attached in a default position. The instanced logical form (QLF) is associated to each edge.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104244}1.5.1 The Meaning of Modifier Attachment{\*\bkmkend _Toc433104244}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
Modifier attachment is meant to be a task driven by domain information and tested also  using  syntactic information. The typical rule looks for simple relations already stored in the knowledge base, but that has to be looked for in a specific order (that
\rquote s the reason for having cascades instead of  sets). Typically just one relation is searched for each rule and just one action is performed, but nothing prevents the user from defining a rule with multiple actions. Only remember 
that a failure in the application of one action is a failure of the whole FST, so none of the actions are performed!
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 Note that as a side effect the parse tree is changed so that the attachment of the modifier is not done only via the semantic slot, but also the correct attachment is computed in the parse tree.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104245}1.6 NORMALISATION{\*\bkmkend _Toc433104245}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Normalisation is a  task driven by application specific information. It is used both to insert in the QLFs default information and  to reason is  sometimes referred to as \ldblquote 
Default  Reasoning\rdblquote  in this manual. In the example above the normaliser\rquote s rules could add the information that cars are produced by the company z by filling their }{\i\lang2057 produced-by}{\lang2057   slot:
\par }\pard \ri100\sb80\sa80\nowidctlpar {\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\fs20\lang2057 {\object\objemb\objw7561\objh3180\objcropt65288\objcropb65338\objcropl65288\objcropr65205{\*\objclass Word.Picture.6}{\*\objdata 01050000020000000f000000
576f72642e506963747572652e36000000000000000000006c0000
d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff11000000feffffff1200000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f00000010000000feffffff1900000013000000140000001500000016000000170000001800000034000000feffffff1b0000001c0000001d0000001e00
00001f00000020000000210000002200000023000000240000002500000026000000feffffff28000000290000002a0000002b0000002c0000002d0000002e0000002f00000030000000310000003200000033000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e007400720079000000029e00000117000000b7000000c90000019800000128000002370000006a000000290000007a0000015916000500ffffffffffffffff040000000109020000000000c0000000000000460000000000000007000001638682
72bcd2c6be0103000000c01000000000002c01004f006c0065000000001e0000002d0000030000000240000000e10000000000000157000000bf0000002b0000006e000000010000002800000013000000480a000201ffffffffffffffffffffffff0000004dffffffb10000006000000094000000140000000000000000
000000000000000000000000140000000000008203005000490043000000018c000002a6000001a1000000ca000001000000020b000000b500000102000001060000023c000000d80000039c00000031000001270a0002010100000003000000ffffffff0000001e00000015000000760000004000000099000000000000
00000000000000000000010000004c0000000000000d03004d0045005400410000000000000000000109000001f70000005a000001600000015900000170ffffffe3000001100000007d0000000300000030000002460c000201ffffffffffffffffffffffff00000010000001050000005c000000bf0000006b00000000
0000000000000000000000000400000048180000000000b0feffffff02000000feffffff0400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a00
00001b0000001c0000001d0000001e0000001f000000200000002100000022000000230000002400000025000000260000002700000028000000290000002a0000002b0000002c0000002d0000002e0000002f000000300000003100000032000000330000003400000035000000360000003700000038000000feffffff
3a000000fefffffffeffffff3d0000003e0000003f000000400000004100000042000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0100000200000000000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff09000600000000000000000000004c000000000000000000080017340000e9150000881d00006c0c00000000
0000000000000000000000000000e8030000e803000008ffffff08ffffffb5feffff3affffff0900090009000900d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff090006000000000000000000000001000000010000000d7e00000000009f017a001102ff0c00ffffffff0000000000000000
01000000010000000000000000a101f2000c4d53574400050008001a000000a0008c00a0008c001e0001000a800180017fff7fff00090000000000000000003100260001003400420009ffffffffffffffff0030002500000035004300a0009800a000980001000a0029000500320041002c000a001607436f7572696572
00030016000d0008002b052f016f00a0009900a0009800290501720000a0009900a0009800290501670000a0009900a0009800290501610000a0009900a00098002905016e0000a0009900a0009800290501690000a0009900a00098002905017a0000a0009900a0009800290501610000a0009900a00098002905017400
00a0009900a0009800290501690000a0009900a00098002905016f0000a0009900a000980029050108001734e915e723010009000003160c00000600130000000000050000000b0200000000050000000c029f007a010400000004010d00040000002e011800040000000201010005000000090200000000050000000102
ffffff00030000001e000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000007000000fc020000ffffff000000040000002d01000008000000fa02050000000000ffffff00040000002d0101000e0000002403050001002600420026004200340001003400010026000700
0000fc020100000000000000040000002d01020008000000fa0206000100010000000000040000002d010300070000001b043500430025000000070000001604320041002900050013000000fb02f8ff00000000000090010000000000000030436f7572696572204e6577000000040000002d0104000700000021050100
6f002f000500070000002105010072002f000a00070000002105010067002f000f00070000002105010061002f00140007000000210501006e002f001900070000002105010069002f001e0007000000210501007a002f002300070000002105010061002f002800070000002105010074002f002d000700000021050100
69002f00320007000000210501006f002f00370007000000210501006e002f003c000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d010100
0e000000240305006e002600a5002600a50034006e0034006e002600040000002d010200040000002d010300070000001b043500a60025006d0007000000160432009f0029007900040000002d010400070000002105010076002f007900070000002105010065002f007e00070000002105010068002f00830007000000
2105010069002f008800070000002105010063002f008d0007000000210501006c002f009200070000002105010065002f0097000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d01
0300040000002d010000040000002d0101000e00000024030500d30026000a0126000a013400d3003400d3002600040000002d010200040000002d010300070000001b0435000b012500d200070000001604320003012900dd00040000002d010400070000002105010070002f00dd00070000002105010072002f00e200
07000000210501006f002f00e700070000002105010064002f00ec00070000002105010075002f00f100070000002105010063002f00f600070000002105010065002f00fb000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700
000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e000000240305003b0001007200010072000e003b000e003b000100040000002d010200040000002d010300070000001b040f00730000003a000700000016040c006b0003004600040000002d01040007000000210501006f00
090046000700000021050100620009004b0007000000210501006a000900500007000000210501006500090055000700000021050100630009005a000700000021050100740009005f0007000000210501007300090064000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000
0000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e00000024030500d30001000a0101000a010e00d3000e00d3000100040000002d010200040000002d010300070000001b040f000b010000d2000700000016040c0003010300dd00
040000002d010400070000002105010061000900dd00070000002105010063000900e200070000002105010074000900e700070000002105010069000900ec0007000000210501006f000900f10007000000210501006e000900f600070000002105010073000900fb000a00000026060f000a00ffffffff010000000000
040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e00070000001604220042001100260005000000140233000a0005000000130200005e00040000002701ffff030000001e0007000000160422007c001100670005000000140200005200050000001302330091000400
00002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e0000002403050025000f003e000f003e001e0025001e0025000f000700000016041b003d0012002a00040000002d0104000700000021050100490018002a000700000021050100530018002f00070000002105
01004100180034000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e00000024030500e2001600fb001600fb002500e2002500e2001600070000001604
2200fa001900e600040000002d010400070000002105010049001f00e600070000002105010053001f00eb00070000002105010041001f00f0000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000
040000002d010100040000002d0100000e0000002403050071001200890012008900210071002100710012000700000016041e00880015007500040000002d010400070000002105010049001b007500070000002105010053001b007a00070000002105010041001b007f000a00000026060f000a00ffffffff01000000
0000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d010300030000001e000700000016042600ef000e00ed00050000001402f6ffee000500000013023e00ee00040000002701ffff030000001e000700000016046600ef003300ed000500000014020000ee000500
000013029900ee00040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e00000024030500e2006700fa006700fa007800e2007800e2006700040000002d010200040000002d010300070000001b047900fb006600e1000700000016047400f6006b00ec000400
00002d010400070000002105010059007100ec000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016046a00240037002200050000001402040023000500000013029d002300040000002701ffff0a00
000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e0000002403050016006a002e006a002e007b0016007b0016006a00040000002d010200040000002d010300070000001b047c002f0069001500070000001604770029006e001f00040000002d010400070000002105010058007400
1f000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e0007000000160455008a00370088000500000014021900890005000000130273008900040000002701ffff0a00000026060f000a00ffffffff000000000000
040000002d010000040000002d0101000e000000240305007c00560094005600940067007c0067007c005600040000002d010200040000002d010300070000001b046800950055007b00070000001604630090005a008500040000002d01040007000000210501005a00600085000a00000026060f000a00ffffffff0100
000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016046000b2005e0098000500000014025f007e000500000013025f00cc00040000002701ffff07000000fc02000000000000000004000000
2d010500040000002d0101000e0000002403050093005f009c0061009c005c0093005f0093005f000a00000026060f000a00ffffffff010000000000040000002d0100000700000018046300ba005c00b300040000002d010200040000002d0103000700000018046400bb005b00b200030000001e000700000016047000
e2005f00b9000500000014024e00900005000000130281000b01040000002701ffff0a00000026060f000a00ffffffff000000000000030000001e000700000016048b008900750035000500000014025f00e1ff050000001302a100dd00040000002701ffff040000002d010500040000002d0101000e00000024030500
30007300380078003900730030007300300073000a00000026060f000a00ffffffff010000000000040000002d0100000700000018048f00910089008a00040000002d010200040000002d0103000700000018049000920088008900030000001e000700000016048800e20070009000050000001402a0003e0005000000
130258003401040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e00000024030500a4004c00cf004c00cf005b00a4005b00a4004c000700000016045800ce004f00a800040000002d010400070000002105010070005500a800070000002105010061005500
ad00070000002105010074005500b200070000002105010069005500b700070000002105010065005500bc0007000000210501006e005500c100070000002105010074005500c6000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e00
0700000016049f007a0100000000040000002d010100040000002d0100000e000000240305007b0078009c0078009c0087007b0087007b00780007000000160484009c007b007f00040000002d0104000700000021050100610081007f000700000021050100670081008400070000002105010065008100890007000000
210501006e0081008e0007000000210501007400810093000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e0000002403050038012600790126007901
34003801340038012600040000002d010200040000002d010300070000001b0435007a012500370107000000160432006c0129004701040000002d010400070000002105010063002f00470107000000210501006f002f004c01070000002105010075002f00510107000000210501006e002f0056010700000021050100
74002f005b01070000002105010072002f006001070000002105010079002f0065010a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e00070000001604550057013700550105000000140219005601050000001302
73005601040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305004901560061015600610167004901670049015600040000002d010200040000002d010300070000001b04680062015500480107000000160463005c015a005101040000002d01
040007000000210501005700600051010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016048a0042017b0041010500000014029900400105000000
13026c004301040000002701ffff040000002d010500040000002d0101000e0000002403050041018f00430186003e01860041018f0041018f000a00000026060f000a00ffffffff010000000000040000002d0100000700000018047b00450174003f01040000002d010200040000002d0103000700000018047c004601
73003e01030000001e00070000001604740056016a0045010500000014027e00340105000000130260006701040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305004b0175007a0175007a0184004b0184004b01750007000000160481007901
78004f01040000002d010400070000002105010068007e004f01070000002105010061007e005401070000002105010073007e00590107000000210501002d007e005e0107000000210501006e007e006301070000002105010061007e00680107000000210501006d007e006d01070000002105010065007e0072010a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e0000002403050034018c004c018c004c019d0034019d0034018c00040000002d010200040000002d010300
070000001b049e004d018b00330107000000160499004c0190003801040000002d01040007000000210501005500960038010700000021050100530096003d0107000000210501004100960042010a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000
040000002d010300030000001e000700000016046e001c016c00fd000500000014026d00de000500000013026d003b01040000002701ffff040000002d010000040000002d010100070000001804710023016a001c01040000002d010200040000002d0103000700000018047200240169001b010a00000026060f000a00
ffffffff000000000000030000001e000700000016046d004301620023010500000014027800030105000000130257006301040000002701ffff040000002d010500040000002d0101000e0000002403050048015f003f0160004101640048015f0048015f000a00000026060f000a00ffffffff0100000000000a000000
26060f000a00ffffffff000000000000040000002d0100000e00000024030500fc0056003b0156003b016500fc006500fc0056000700000016046200390159000101040000002d010400070000002105010069005f00010107000000210501006e005f00060107000000210501002d005f000b0107000000210501006c00
5f00100107000000210501006f005f001501070000002105010063005f001a01070000002105010061005f001f01070000002105010074005f002401070000002105010069005f00290107000000210501006f005f002e0107000000210501006e005f0033010a00000026060f000a00ffffffff0100000000000a000000
26060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d010300030000001e000700000016046b004f00690035000500000014026a001b000500000013026a006900040000002701ffff040000002d010500040000002d0101000e00
0000240305003000690039006c003900660030006900300069000a00000026060f000a00ffffffff010000000000040000002d0100000700000018046e00570067005000040000002d010200040000002d0103000700000018046f00580066004f00030000001e000700000016046a007c005c0056000500000014027800
30000500000013024e00a200040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e00000024030500300053006e0053006e00620030006200300053000700000016045f006c0056003400040000002d010400070000002105010070005c003400070000002105
010072005c00390007000000210501006f005c003e00070000002105010064005c004300070000002105010075005c004800070000002105010063005c004d00070000002105010065005c005200070000002105010064005c00570007000000210501002d005c005c00070000002105010062005c006100070000002105
010079005c0066000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff010000000000040000002701ffff0300000000000000000000000000000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff0900060000000000000000000000
010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffff030050004900430054000000000000990000009b000000a7000000b4000000c8000000ca000000cd000000d4000000dd000000fb00000136000001480000014b0c0002010200000006000000ffffffff000001ad000001e0000002300000027b0000028f0000000000000000
0000000000000000030000007e0d000000000001010043006f006d0070004f0062006a000000001b0000001b0000001b0000003200000036000000390000001b0000001b0000004a0000004f0000004f0000006412000201ffffffffffffffffffffffff0000004f000000820000004f0000004f00000089000000000000
000000000000000000003900000060000000000000ad03004f0062006a0049006e0066006f00000000bc000000bf000000ca000000df000000e3000000fc00000106000001190000011d000001220000015c000000cd120002010500000008000000ffffffff000001e6000001ea000001f7000002080000021f00000000
0000000000000000000000003b00000004000000000002f24f0062006a0065006300740050006f006f006c00000003ec00000411000004acfffffe7efffffed2fffffedefffffef6fffffefbffffff05ffffff1cffffff3616000101ffffffffffffffffffffffff00000000000000000000000000000000000000008682
72bcd2c6be01868272bcd2c6be010000000f00000010000000116e0000a0009900a0009900a0008d00a0008c0001000a800180017fff7fff0009000000000000000000310026006e003400a50009ffffffffffffffff00300025006d003500a600a0009800a000980001000a002900790032009f00293d01760000a00099
00a0009800290501650000a0009900a0009800290501680000a0009900a0009800290501690000a0009900a0009800290501630000a0009900a00098002905016c0000a0009900a0009800290501650000a0009900a0009900a0008d00a0008c0001000a800180017fff7fff000900000000000000000031002600d30034
010a0009ffffffffffffffff0030002500d20035010b00a0009800a000980001000a002900dd0032010300294601700000a0009900a0009800290501720000a0009900a00098002905016f0000a0009900a0009800290501640000a0009900a0009800290501750000a0009900a0009800290501630000a0009900a00098
00290501650000a0009900a0009900a0008d00a0008c0001000a800180017fff7fff0009000000000000000000310001003b000e00720009ffffffffffffffff00300000003a000f007300a0009800a000980001000a00030046000c006b002800090046016f00a0009900a0009800290501620000a0009900a000980029
05016a0000a0009900a0009800290501650000a0009900a0009800290501630000a0009900a0009800290501740000a0009900a0009800290501730000a0009900a0009900a0008d00a0008c0001000a800180017fff7fff000900000000000000000031000100d3000e010a0009ffffffffffffffff0030000000d2000f
010b00a0009800a000980001000a000300dd000c010300297901610000a0009900a0009800290501630000a0009900a0009800290501740000a0009900a0009800290501690000a0009900a00098002905016f0000a0009900a00098002905016e0000a0009900a0009800290501730000a0009900a0009900a0008d0001
000a800180017fff7fff0022002200261cef002200110067151100a0008c000900000000000000000031000f0025001e003e00a0009800a000980001000a0012002a001b003d00280018002a014900a0009900a0009800290501530000a0009900a0009800290501410000a0009900a0009900a0008d00a0008c0001000a
800180017fff7fff0031001600e2002500fb00a0009800a000980001000a001900e6002200fa002bb207014900a0009900a0009800290501530000a0009900a0009800290501410000a0009900a0009900a0008d00a0008c0001000a800180017fff7fff0031001200710021008900a0009800a000980001000a00150075
001e00880028001b0075014900a0009900a0009800290501530000a0009900a0009800290501410000a0009900a0009900a0008d0001000a800180017fff7fff0009ffffffffffffffff0022000e00ee00180022003300ee003300a0008c000900000000000000000031006700e2007800fa0009ffffffffffffffff0030
006600e1007900fb00a0009800a000980001000a006b00ec007400f6002b6d56015900a0009900a0009900a0008d0001000a800180017fff7fff002200370023003300a0008c000900000000000000000031006a0016007b002e0009ffffffffffffffff003000690015007c002f00a0009800a000980001000a006e001f
0077002900280074001f015800a0009900a0009900a0008d0001000a800180017fff7fff002200370089001e00a0008c0009000000000000000000310056007c006700940009ffffffffffffffff00300055007b0068009500a0009800a000980001000a005a008500630090002800600085015a00a0009900a0009900a0
008d00a0008c0001000a800180017fff7fff0022005f00981a000071001e005c00930061009c005f00930061009c005c009c005f0093005f009300a0008d000900000000000000000051005c00b3006300ba0009ffffffffffffffff0050005b00b2006400bb0022005f00b9291100a0008c00220075003554160071001e
0073003000780039007300300078003800730039007300300073003000a0008d0009000000000000000000510089008a008f00910009ffffffffffffffff0050008800890090009200220088009052e800a0008c000900000000000000000031004c00a4005b00cf00a0009800a000980001000a004f00a8005800ce0028
005500a8017000a0009900a0009800290501610000a0009900a0009800290501740000a0009900a0009800290501690000a0009900a0009800290501650000a0009900a00098002905016e0000a0009900a0009800290501740000a0009900a0009900a0008d00a0008c0001000a800180017fff7fff00310078007b0087
009c00a0009800a000980001000a007b007f0084009c00280081007f016100a0009900a0009800290501670000a0009900a0009800290501650000a0009900a00098002905016e0000a0009900a0009800290501740000a0009900a0009900a0008d00a0008c0001000a800180017fff7fff003100260138003401790009
ffffffffffffffff0030002501370035017a00a0009800a000980001000a002901470032016c0028002f0147016300a0009900a00098002905016f0000a0009900a0009800290501750000a0009900a00098002905016e0000a0009900a0009800290501740000a0009900a0009800290501720000a0009900a000980029
0501790000a0009900a0009900a0008d0001000a800180017fff7fff002200370156001e00a0008c00090000000000000000003100560149006701610009ffffffffffffffff0030005501480068016200a0009800a000980001000a005a01510063015c002800600151015700a0009900a0009900a0008d00a0008c0001
000a800180017fff7fff0022008a014101f10071001e0086013e008f0143008f0141008601430086013e008f0141008f014100a0008d0009000000000000000000510074013f007b01450009ffffffffffffffff00500073013e007c014600220074014511f600a0008c0009000000000000000000310075014b0084017a
00a0009800a000980001000a0078014f008101790028007e014f016800a0009900a0009800290501610000a0009900a0009800290501730000a0009900a00098002905012d0000a0009900a00098002905016e0000a0009900a0009800290501610000a0009900a00098002905016d0000a0009900a00098002905016500
00a0009900a0009900a0008d00a0008c0001000a800180017fff7fff0031008c0134009d014c0009ffffffffffffffff0030008b0133009e014d00a0009800a000980001000a009001380099014c002800960138015500a0009900a0009800290501530000a0009900a0009800290501410000a0009900a0009900a0008d
0001000a800180017fff7fff0022006d00fd1f00000900000000000000000051006a011c007101230009ffffffffffffffff00500069011b0072012400a0008c0022006d012320f50071001e005f013f00640148005f01480060013f00640141005f0148005f014800a0008d00a0008c0009000000000000000000310056
00fc0065013b00a0009800a000980001000a00590101006201390028005f0101016900a0009900a00098002905016e0000a0009900a00098002905012d0000a0009900a00098002905016c0000a0009900a00098002905016f0000a0009900a0009800290501630000a0009900a0009800290501610000a0009900a00098
00290501740000a0009900a0009800290501690000a0009900a00098002905016f0000a0009900a00098002905016e0000a0009900a0009900a0008d00a0008c0001000a800180017fff7fff0009ffffffffffffffff0022006a00351a000071001e00660030006c003900690030006c0039006600390069003000690030
00a0008d00090000000000000000005100670050006e00570009ffffffffffffffff00500066004f006f00580022006a005626f200a0008c000900000000000000000031005300300062006e00a0009800a000980001000a00560034005f006c0028005c0034017000a0009900a0009800290501720000a0009900a00098
002905016f0000a0009900a0009800290501640000a0009900a0009800290501750000a0009900a0009800290501630000a0009900a0009800290501650000a0009900a0009800290501640000a0009900a00098002905012d0000a0009900a0009800290501620000a0009900a0009800290501790000a0009900a00099
00a0008d00a0008d00ffd0cf0100feff02000100ffffffff0109020000000000c0000000000000461f000000496d6d6167696e65206469204d6963726f736f667420576f726420362e3000feffffff4e4236570f000000576f72642e506963747572652e3600000000000000d0cf11e0a1b11ae100000000000000000000
0000000000003b000300feff090000000300d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff090006000000000000000000000001000000010000000000000000100000feff0000030a01000000000000000000000000000000000001000000f29f85e04ff91068ab9108002b27b3d930000000
630100000e000000070000009800000004000000ca00000008000000d800000001000000e60000000c000000ec0000000b000000f80000000d000000040100000f0000001001000010000000180100000a00000020010000120000002c0100000e000000490100000900000051010000130000005b010000ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffff1e0000002a00000048414c204f4620504f564f3a70726f67723a4d6963726f736f667420576f726420363a4e6f726d616c001e000000060002004f006c0065005000720065007300300030003000000000000274000002b4ffffff78ffffffc000000000
000000110000001b0000001b0000002e00000040180002000700000009000000ffffffff0000006700000069000000990000009d000000a3000000000000000000000000000000001a000000281900000000016b57006f007200640044006f00630075006d0065006e0074000000ffd1ffffffe0ffffffedfffffff40000
00040000001300000013000000140000002c0000003f1a000201ffffffff0a000000ffffffff0000004f0000005c0000004f000000620000006a0000000000000000000000000000000027000000c3190000000000e60500530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e000000
000000060000001300000014000000170000001a0000001a28000200ffffffffffffffffffffffff0000002e0000003a00000052000000640000004f000000000000000000000000000000003c00000093010000000000cb000000d0000000d1000000d30000008e000000d8000000fe0000010b000001570000017e0000
0186000001e8000001f2000001f600000202000002210000023b00000000ffffffffffffffffffffffff000003ecffffff40ffffff42ffffffa0ffffffc00000000a000000140000001b0000001e000000210000001b0000001bffffffff030000000400000001000000ffffffff000000000000000017340000e9150000
00190000010009000003160c00000600130000000000050000000b0200000000050000000c029f007a010400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff
00000000000007000000fc020000ffffff000000040000002d01000008000000fa02050000000000ffffff00040000002d0101000e00000024030500010026004200260042003400010034000100260007000000fc020100000000000000040000002d01020008000000fa0206000100010000000000040000002d010300
070000001b043500430025000000070000001604320041002900050013000000fb02f8ff00000000000090010000000000000030436f7572696572204e6577000000040000002d01040007000000210501006f002f000500070000002105010072002f000a00070000002105010067002f000f0007000000210501006100
2f00140007000000210501006e002f001900070000002105010069002f001e0007000000210501007a002f002300070000002105010061002f002800070000002105010074002f002d00070000002105010069002f00320007000000210501006f002f00370007000000210501006e002f003c000a00000026060f000a00
ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e000000240305006e002600a5002600a50034006e0034006e002600040000002d010200040000002d010300
070000001b043500a60025006d0007000000160432009f0029007900040000002d010400070000002105010076002f007900070000002105010065002f007e00070000002105010068002f008300070000002105010069002f008800070000002105010063002f008d0007000000210501006c002f009200070000002105
010065002f0097000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e00000024030500d30026000a0126000a013400d3003400d300
2600040000002d010200040000002d010300070000001b0435000b012500d200070000001604320003012900dd00040000002d010400070000002105010070002f00dd00070000002105010072002f00e20007000000210501006f002f00e700070000002105010064002f00ec00070000002105010075002f00f1000700
00002105010063002f00f600070000002105010065002f00fb000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e00000024030500
3b0001007200010072000e003b000e003b000100040000002d010200040000002d010300070000001b040f00730000003a000700000016040c006b0003004600040000002d01040007000000210501006f00090046000700000021050100620009004b0007000000210501006a0009005000070000002105010065000900
55000700000021050100630009005a000700000021050100740009005f0007000000210501007300090064000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d01
0000040000002d0101000e00000024030500d30001000a0101000a010e00d3000e00d3000100040000002d010200040000002d010300070000001b040f000b010000d2000700000016040c0003010300dd00040000002d010400070000002105010061000900dd00070000002105010063000900e2000700000021050100
74000900e700070000002105010069000900ec0007000000210501006f000900f10007000000210501006e000900f600070000002105010073000900fb000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700
00001604220042001100260005000000140233000a0005000000130200005e00040000002701ffff030000001e0007000000160422007c00110067000500000014020000520005000000130233009100040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e00
00002403050025000f003e000f003e001e0025001e0025000f000700000016041b003d0012002a00040000002d0104000700000021050100490018002a000700000021050100530018002f0007000000210501004100180034000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000
00000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e00000024030500e2001600fb001600fb002500e2002500e20016000700000016042200fa001900e600040000002d010400070000002105010049001f00e600070000002105010053001f00eb00
070000002105010041001f00f0000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e000000240305007100120089001200890021007100210071001200
0700000016041e00880015007500040000002d010400070000002105010049001b007500070000002105010053001b007a00070000002105010041001b007f000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d01
0300030000001e000700000016042600ef000e00ed00050000001402f6ffee000500000013023e00ee00040000002701ffff030000001e000700000016046600ef003300ed000500000014020000ee000500000013029900ee00040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000
040000002d0101000e00000024030500e2006700fa006700fa007800e2007800e2006700040000002d010200040000002d010300070000001b047900fb006600e1000700000016047400f6006b00ec00040000002d010400070000002105010059007100ec000a00000026060f000a00ffffffff01000000000004000000
2701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016046a00240037002200050000001402040023000500000013029d002300040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305001600
6a002e006a002e007b0016007b0016006a00040000002d010200040000002d010300070000001b047c002f0069001500070000001604770029006e001f00040000002d0104000700000021050100580074001f000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f00
7a0100000000040000002d010300030000001e0007000000160455008a00370088000500000014021900890005000000130273008900040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305007c00560094005600940067007c0067007c005600
040000002d010200040000002d010300070000001b046800950055007b00070000001604630090005a008500040000002d01040007000000210501005a00600085000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e00070000001604
9f007a0100000000040000002d010300030000001e000700000016046000b2005e0098000500000014025f007e000500000013025f00cc00040000002701ffff07000000fc020000000000000000040000002d010500040000002d0101000e0000002403050093005f009c0061009c005c0093005f0093005f000a000000
26060f000a00ffffffff010000000000040000002d0100000700000018046300ba005c00b300040000002d010200040000002d0103000700000018046400bb005b00b200030000001e000700000016047000e2005f00b9000500000014024e00900005000000130281000b01040000002701ffff0a00000026060f000a00
ffffffff000000000000030000001e000700000016048b008900750035000500000014025f00e1ff050000001302a100dd00040000002701ffff040000002d010500040000002d0101000e0000002403050030007300380078003900730030007300300073000a00000026060f000a00ffffffff01000000000004000000
2d0100000700000018048f00910089008a00040000002d010200040000002d0103000700000018049000920088008900030000001e000700000016048800e20070009000050000001402a0003e0005000000130258003401040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d0100000400
00002d0101000e00000024030500a4004c00cf004c00cf005b00a4005b00a4004c000700000016045800ce004f00a800040000002d010400070000002105010070005500a800070000002105010061005500ad00070000002105010074005500b200070000002105010069005500b700070000002105010065005500bc00
07000000210501006e005500c100070000002105010074005500c6000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e000000240305007b0078009c00
78009c0087007b0087007b00780007000000160484009c007b007f00040000002d0104000700000021050100610081007f000700000021050100670081008400070000002105010065008100890007000000210501006e0081008e0007000000210501007400810093000a00000026060f000a00ffffffff010000000000
0a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e000000240305003801260079012600790134003801340038012600040000002d010200040000002d010300070000001b0435007a012500370107000000
160432006c0129004701040000002d010400070000002105010063002f00470107000000210501006f002f004c01070000002105010075002f00510107000000210501006e002f005601070000002105010074002f005b01070000002105010072002f006001070000002105010079002f0065010a00000026060f000a00
ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e0007000000160455005701370055010500000014021900560105000000130273005601040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d01000004000000
2d0101000e000000240305004901560061015600610167004901670049015600040000002d010200040000002d010300070000001b04680062015500480107000000160463005c015a005101040000002d01040007000000210501005700600051010a00000026060f000a00ffffffff0100000000000a00000026060f00
0a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016048a0042017b004101050000001402990040010500000013026c004301040000002701ffff040000002d010500040000002d0101000e0000002403050041018f004301
86003e01860041018f0041018f000a00000026060f000a00ffffffff010000000000040000002d0100000700000018047b00450174003f01040000002d010200040000002d0103000700000018047c00460173003e01030000001e00070000001604740056016a0045010500000014027e00340105000000130260006701
040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305004b0175007a0175007a0184004b0184004b0175000700000016048100790178004f01040000002d010400070000002105010068007e004f01070000002105010061007e00540107000000
2105010073007e00590107000000210501002d007e005e0107000000210501006e007e006301070000002105010061007e00680107000000210501006d007e006d01070000002105010065007e0072010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701
ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e0000002403050034018c004c018c004c019d0034019d0034018c00040000002d010200040000002d010300070000001b049e004d018b00330107000000160499004c0190003801040000002d0104000700000021050100
5500960038010700000021050100530096003d0107000000210501004100960042010a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016046e001c016c00fd000500000014026d00de00050000001302
6d003b01040000002701ffff040000002d010000040000002d010100070000001804710023016a001c01040000002d010200040000002d0103000700000018047200240169001b010a00000026060f000a00ffffffff000000000000030000001e000700000016046d004301620023010500000014027800030105000000
130257006301040000002701ffff040000002d010500040000002d0101000e0000002403050048015f003f0160004101640048015f0048015f000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d0100000e00000024030500fc0056003b0156003b016500
fc006500fc0056000700000016046200390159000101040000002d010400070000002105010069005f00010107000000210501006e005f00060107000000210501002d005f000b0107000000210501006c005f00100107000000210501006f005f001501070000002105010063005f001a01070000002105010061005f00
1f01070000002105010074005f002401070000002105010069005f00290107000000210501006f005f002e0107000000210501006e005f0033010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000
040000002d010100040000002d010300030000001e000700000016046b004f00690035000500000014026a001b000500000013026a006900040000002701ffff040000002d010500040000002d0101000e000000240305003000690039006c003900660030006900300069000a00000026060f000a00ffffffff01000000
0000040000002d0100000700000018046e00570067005000040000002d010200040000002d0103000700000018046f00580066004f00030000001e000700000016046a007c005c005600050000001402780030000500000013024e00a200040000002701ffff0a00000026060f000a00ffffffff00000000000004000000
2d010000040000002d0101000e00000024030500300053006e0053006e00620030006200300053000700000016045f006c0056003400040000002d010400070000002105010070005c003400070000002105010072005c00390007000000210501006f005c003e00070000002105010064005c0043000700000021050100
75005c004800070000002105010063005c004d00070000002105010065005c005200070000002105010064005c00570007000000210501002d005c005c00070000002105010062005c006100070000002105010079005c0066000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100
00000000040000002701ffff03000000000000000000000000000000000000000000000000000000000016044f0547034e0540030500000014024d05390305000000130250050003040000002701ffff030000001e00070000001604510567034f0560030500000014025005590305000000130250056e03040000002701
ffff030000001e0000000000160452058703510580030500000014025005790305000000130253050003040000002701ffff030000001e000700000016045405a7035205a003050000001402530599030500000013025305ae03040000002701ffff030000001e00d0cf11e0a1b11ae10000000000000000000000000000
00003b000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdca5680051c01004000000006500000000000100000100010003000093030000c319000000000000000000000000000000000000020000000000
0000000000000000000000000000000000009000000000000000000000000016000078000000001600007800000078160000000000007816000000000000cc16000000000000cc16000000000000cc16000014000000f616000000000000f616000000000000f616000000000000f616000000000000f616000000000000
f61600000a000000001700000a000000f616000000000000fb180000520000000a170000000000000a170000000000000a170000000000000a170000000000000a17000000000000181700000000000018170000000000001817000000000000d318000002000000d518000000000000d518000000000000d51800000000
0000d518000000000000d518000000000000d5180000260000004d19000058000000a51900001e000000fb1800000000000000000000000000000000000000000000cc16000000000000d318000000000000000009000a00010001000a1700000e000000181700000000000000000000000000000000000000000000d318
000000000000d318000000000000fb18000000000000d318000000000000781600000000000078160000000000000a17000000000000000000000000000000000000000000000a17000000000000d318000000000000d318000000000000d318000000000000d31800000000000078160000540000000a17000000000000
cc160000000000000a17000000000000d31800000000000000000000000000000000000000000000e016000008000000e81600000e000000781600000000000078160000000000007816000000000000781600000000000018170000bb010000d318000000000000d318000000000000d318000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d6f7267616e697a6174696f6e0d0d76656869636c650d0d70726f647563650d0d6f626a656374730d0d616374
696f6e730d0d4953410d0d4953410d0d4953410d0d590d0d580d0d5a0d0d70617469656e740d0d6167656e740d0d636f756e7472790d0d570d0d6861732d6e616d650d0d5553410d0d696e2d6c6f636174696f6e0d0d70726f64756365642d62790d0d0d0d1200a4c04ea5c04ea6a518a7a618a83321a934210000ec0c01
01003000000019e20ca0182e217c1d4e0c2a0000196a000000ec02270526010300030026000000000026052501000000000b00000000000000ffffff0001000000000000000000020428005a004700a804a000000000000000050000000000ffffff0000000000000000000000000008010e0060e7e6db00000000a4ff00
196a008808ec025a0426010300030026000000000059042501000000000b00000000000000ffffff000100000000000000000002042800e2004700e102a000000000000000050000000000ffffff0000000000000000000000000008010e00d8dee6db00000000a4ff00196a006510ec025a042601030003002600000000
0059042501000000000b00000000000000ffffff000100000000000000000002042800e2004700e102a000000000000000050000000000ffffff0000000000000000000000000008010e00fbd6e6db00000000a4ff00196a00880400005a0426010300030026000000000059042501000000000b00000000000000ffffff
000100000000000000000002042800e2004700e102a000000000000000050000000000ffffff0000000000000000000000000008010e00d8e2d2de00000000a4ff00196a00651000005a0426010300030026000000000059042501000000000b00000000000000ffffff000100000000000000000002042800e2004700e1
02a000000000000000050000000000ffffff0000000000000000000000000008010e00fbd6d2de00000000a4ff01002600f9025e01230255010000540122020000000000000b000000000000000000000000000100260009085e019b015501000000009a015401000000000b0000000000000000000000000000196a00e8
022c01d4011c0103000300260000000000d3011b01000000000000050000000000ffffff000100000000000000000002042800550042007501a000000000000000050000000000ffffff0000000000000000000000000008010e0078e4a6dd00000000a4ff00196a00a911b401d3011c0103000300260000000000d2011b
01000000000000050000000000ffffff000100000000000000000002042800540042007501a000000000000000050000000000ffffff0000000000000000000000000008010e00b7d51edd00000000a4ff00196a00c6087001d3011c0103000300260000000000d2011b01000000000000050000000000ffffff00010000
0000000000000002042800540042007501a000000000000000050000000000ffffff0000000000000000000000000008010e009ade62dd00000000a4ff0100260091121a010200dd01000000000100dc01000000000b0000000000000000000000000001002600911206040200fc03000000000100fb03000000000b0000
000000000000000000000000196a009811f707f4016b0103000300260000000000f3016a01000000000b00000000000000ffffff000100000000000000000002042800cc006a00bf00a000000000000000050000000000ffffff0000000000000000000000000008010e00c8d5dbd600000000a4ff01002600b4024a0402
00fc03000000000100fb03000000000b0000000000000000000000000000196a0099013b08f5016b0103000300260000000000f4016a01000000000b00000000000000ffffff000100000000000000000002042800cc006a00bf00a000000000000000050000000000ffffff0000000000000000000000000008010e00c7
e597d600000000a4ff01002600b40a4a04020064020000000001006302000000000b0000000000000000000000000000196a009909a306f4016b0103000300260000000000f3016a01000000000b00000000000000ffffff000100000000000000000002042800cb006a00bf00a000000000000000050000000000ffffff
0000000000000000000000000008010e00c7dd2fd800000000a4ff00197c007c0b3c076d0267000300010026005f003d000d020200000000000c020100000000000b0000000000000000000000000006083a0000000000aa00660000000000000005000000000000000000010000000000000000000000080000003800aa
006600aa0000000000380008010e00e4db96d70000000092ff04022400dd0d2b079e009e00000000000b00000000000000ffffff000100000000000000010026006f0e7907340355010000000033035401000000000b0000000000000000000000000000197c00c0030c09f606d80103000100260060001c009506bb0100
0000009406ba01000000000b0000000000000000000000000006083a0000000000b6005b0000000000000005000000000000000000010000000000000000000000080000000000a0005b00b60000000000000008010e00a0e3c6d50000000092ff04022400aa0a9f0a9e009d00000000000b00000000000000ffffff0001
00000000000000010026003c0bcd086706dd010000dc0166060000000000000b0000000000000000000000000000196a00c50cf3054b031c01030003002600000000004a031b01000000000000050000000000ffffff00010000000000000000000204280055004300e102a000000000000000050000000000ffffff0000
000000000000000000000008010e009bdadfd800000000a4ff00196a00920967098a021c010300030026000000000089021b01000000000000050000000000ffffff000100000000000000000002042800550042002b02a000000000000000050000000000ffffff0000000000000000000000000008010e00cedd6bd500
000000a4ff00196a004218ec02270526010300030026000000000026052501000000000b00000000000000ffffff0001000000000000000000020428003e014700e102a000000000000000050000000000ffffff0000000000000000000000000008010e001ecfe6db00000000a4ff01002600b21a4a0402006402000000
0001006302000000000b0000000000000000000000000000196a009719a306f5016b0103000300260000000000f4016a01000000000b00000000000000ffffff000100000000000000000002042800c1006a00bf00a000000000000000050000000000ffffff0000000000000000000000000008010e00c9cd2fd8000000
00a4ff00197c00db189909670094010300010026003e00000002003e0100003d0101000000000000000b0000000000000000000000000006083a000000e9006600aa000000000000000500000000000000000001000000000000000000000008003900aa0066000000000000003900aa0008010e0085ce39d50000000092
ff04022400cb1807099e009e00000000000b00000000000000ffffff000100000000000000010026005d1945085601cd000000cc0055010000000000000b0000000000000000000000000000196a00d5192309a6031c0103000300260000000000a5031b01000000000000050000000000ffffff00010000000000000000
0002042800550042003c03a000000000000000050000000000ffffff0000000000000000000000000008010e008bcdafd500000000a4ff00196a00fe17e30af4016a0103000300260000000000f3016901000000000b00000000000000ffffff00010000000000000000000204280065006a007501a00000000000000005
0000000000ffffff0000000000000000000000000008010e0062cfefd300000000a4ff01002600c4138908670202000000000066020100000000000b000000000000000000000000000402240020163b089e009e00000000000b00000000000000ffffff00010000000000000000197c00b3167407ea0217010300010026
00000033008902e3000000e20088020000000000000b0000000000000000000000000006083a0033020000b6006600000000000000050000000000000000000100000000000000000000000800b600000000000c0023006600b600000008010e00add05ed70000000092ff00196a00b413bf06cd041c0103000300260000
000000cc041b01000000000000050000000000ffffff000100000000000000000002042800550043004d04a000000000000000050000000000ffffff0000000000000000000000000008010e00acd313d800000000a4ff00197c00c00308086e02670003000100260060003d000d020200000000000c020100000000000b
0000000000000000000000000006083a0000000000ab00660000000000000005000000000000000000010000000000000000000000080000003800ab006600ab0000000000380008010e00a0e3cad60000000092ff040224002206f7079d009e00000000000b00000000000000ffffff00010000000000000001002600b4
063507f002110100001001ef020000000000000b0000000000000000000000000000196a00b5037b06cd041c0103000300260000000000cc041b01000000000000050000000000ffffff000100000000000000000002042800550043004d04a000000000000000050000000000ffffff0000000000000000000000000008
010e00abe357d800000000a4ff08010e0060e7d2de000000002cf3d0cf11e0a1b11ae100000000000000000000000000000000003b0003fffe0009000600000000000000000000000000010000000100000000000010000000000200000001fffffffe0000000000000000ffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffff00030000010300000203000091030000920300009303000093100000f800f20000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027501000b5d03006100
0462016310000e75014404000000006100046314000600030000020300000f03000010030000180300001903000021030000220300002a0300002b030000330300003403000038030000390300003d0300003e0300004203000043030000450300004603000048030000490300004b0300004c0300005403000055030000
5b0300005c0300006403000065030000670300006803000071030000720300007603000077030000830300008403000090030000910300009203000093030000fe0001741df000fe0001b004a000fe000000000000fe0001f802a000fe000000000000fe0001f802a000fe000000000000fe0001e402a000fe0000000000
00fe0001f802a000fe000000000000fe00017c01a000fe000000000000fe00019001a000fe000000000000fe00017c01a000fe000000000000fe0001c800a000fe000000000000fe0001c800a000fe000000000000fe0001dc00a000fe000000000000fe0001f802a000fe000000000000fe00014402a000fe0000000000
00fe0001e402a000fe000000000000fe0001dc00a000fe000000000000fe00014803a000fe000000000000fe00019001a000fe000000000000fe00016004a000fe000000000000fe00016004a000fe000000000000fe000000000000fe0001741df000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000010000290e000f00080001004b000f00000004001e000040f1ff02001e00074e6f726d616c6500ff0200000006006110046318000000000000000000000000000000000000002c004140f2ffa1002c001f43617261747465726520707265646566696e69
746f2070617261677261666f000000000000000000000000000000000e00000017000000200000002900000032000000370000003c0000004100000044000000470000004a000000530000005a00000063000000660000007000000075000000820000008f0000009200000000000000930000000600930300000300ffff
ffff01000420ffff010000000000930000000000000000000003000093100000090000030000930300000a000000000093000000a70300001300bb01176761686d6d73c13b3078232d2b27d4d5602c2e3b524300064155544f524508434f4d4d454e54490944415441435245415a0854454d504f4d4f44084e4f4d454649
4c450e44494d454e53494f4e4946494c450950415243484941564507554c5453414c56064e554d434152064e554d504147064e554d5041520a444154415354414d5041075052495641544f0452494644064e554d524556094441544153414c5641074f47474554544f08534f4d4d564f4345074d4f44454c4c4f06544954
4f4c4f07494e44564f43450a414c464142455449434f074152414249434f0b5052494d414d41495553430943415244544553544f0a464f524d41544f4341520b56414c555441544553544f064d414955534306455341444543064d494e5553430d554e49534349464f524d41544f084f5244494e414c45084f5244544553
544f06524f4d414e4f0b545554544f4d414955534303415353094152524f544f4e444108444546494e49544f03494e5401450546414c534f034d4158034d494e05524553544f054d454449410b434f4e54414e554d455249034e4f4e014f0850524f444f54544f025345055345474e4f05534f4d4d41045645524fff4001
80010000000000000000000b00010001000000000000000000000000000a000a003e02630152001c1290014d1054696d6573204e657720526f6d616e0054696d657300b80c069001020053796d626f6c000b2290014d00417269616c000d0690014d00436f7572696572000b0690014d0054696d65730022000400310888
180000c40200001b01000000000000000019732a660000000002000100000000000000000000000000000000000400831000000000000000000000000000000000000000000000000000002103000000001e0000000000000005466162696f05466162696f00000000000000000000d0cf11e0a1b11ae100000000000000
0000000000000000003b000300feff090006000000000000000000000001000000010000000000000000100000020000466162696f001e00000006000000466162696f0002000000102740000000008076d3f2cce70140000000008076d3f2cce7014000000000f64aa96df7bd0103000000000000000300000000000000
4000000000000000000000001e000000150000004d6963726f736f667420576f726420362e302e310003000000000000001e0000000200000032000300000000000000d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff090006000000000000000000000001d0cf11e0a1b11ae1000000000000
000000000000000000003b000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01050000050000000d0000004d45544146494c4550494354001734000017eaffff2819000008001734e9150000
010009000003160c00000600130000000000050000000b0200000000050000000c029f007a010400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000
000007000000fc020000ffffff000000040000002d01000008000000fa02050000000000ffffff00040000002d0101000e00000024030500010026004200260042003400010034000100260007000000fc020100000000000000040000002d01020008000000fa0206000100010000000000040000002d01030007000000
1b043500430025000000070000001604320041002900050013000000fb02f8ff00000000000090010000000000000030436f7572696572204e6577000000040000002d01040007000000210501006f002f000500070000002105010072002f000a00070000002105010067002f000f00070000002105010061002f001400
07000000210501006e002f001900070000002105010069002f001e0007000000210501007a002f002300070000002105010061002f002800070000002105010074002f002d00070000002105010069002f00320007000000210501006f002f00370007000000210501006e002f003c000a00000026060f000a00ffffffff
0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e000000240305006e002600a5002600a50034006e0034006e002600040000002d010200040000002d01030007000000
1b043500a60025006d0007000000160432009f0029007900040000002d010400070000002105010076002f007900070000002105010065002f007e00070000002105010068002f008300070000002105010069002f008800070000002105010063002f008d0007000000210501006c002f00920007000000210501006500
2f0097000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e00000024030500d30026000a0126000a013400d3003400d30026000400
00002d010200040000002d010300070000001b0435000b012500d200070000001604320003012900dd00040000002d010400070000002105010070002f00dd00070000002105010072002f00e20007000000210501006f002f00e700070000002105010064002f00ec00070000002105010075002f00f100070000002105
010063002f00f600070000002105010065002f00fb000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e000000240305003b000100
7200010072000e003b000e003b000100040000002d010200040000002d010300070000001b040f00730000003a000700000016040c006b0003004600040000002d01040007000000210501006f00090046000700000021050100620009004b0007000000210501006a000900500007000000210501006500090055000700
000021050100630009005a000700000021050100740009005f0007000000210501007300090064000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d0100000400
00002d0101000e00000024030500d30001000a0101000a010e00d3000e00d3000100040000002d010200040000002d010300070000001b040f000b010000d2000700000016040c0003010300dd00040000002d010400070000002105010061000900dd00070000002105010063000900e200070000002105010074000900
e700070000002105010069000900ec0007000000210501006f000900f10007000000210501006e000900f600070000002105010073000900fb000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e00070000001604
220042001100260005000000140233000a0005000000130200005e00040000002701ffff030000001e0007000000160422007c00110067000500000014020000520005000000130233009100040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e0000002403
050025000f003e000f003e001e0025001e0025000f000700000016041b003d0012002a00040000002d0104000700000021050100490018002a000700000021050100530018002f0007000000210501004100180034000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000
040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e00000024030500e2001600fb001600fb002500e2002500e20016000700000016042200fa001900e600040000002d010400070000002105010049001f00e600070000002105010053001f00eb0007000000
2105010041001f00f0000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e00000024030500710012008900120089002100710021007100120007000000
16041e00880015007500040000002d010400070000002105010049001b007500070000002105010053001b007a00070000002105010041001b007f000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0103000300
00001e000700000016042600ef000e00ed00050000001402f6ffee000500000013023e00ee00040000002701ffff030000001e000700000016046600ef003300ed000500000014020000ee000500000013029900ee00040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d01000004000000
2d0101000e00000024030500e2006700fa006700fa007800e2007800e2006700040000002d010200040000002d010300070000001b047900fb006600e1000700000016047400f6006b00ec00040000002d010400070000002105010059007100ec000a00000026060f000a00ffffffff010000000000040000002701ffff
030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016046a00240037002200050000001402040023000500000013029d002300040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e0000002403050016006a002e00
6a002e007b0016007b0016006a00040000002d010200040000002d010300070000001b047c002f0069001500070000001604770029006e001f00040000002d0104000700000021050100580074001f000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a010000
0000040000002d010300030000001e0007000000160455008a00370088000500000014021900890005000000130273008900040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305007c00560094005600940067007c0067007c00560004000000
2d010200040000002d010300070000001b046800950055007b00070000001604630090005a008500040000002d01040007000000210501005a00600085000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a01
00000000040000002d010300030000001e000700000016046000b2005e0098000500000014025f007e000500000013025f00cc00040000002701ffff07000000fc020000000000000000040000002d010500040000002d0101000e0000002403050093005f009c0061009c005c0093005f0093005f000a00000026060f00
0a00ffffffff010000000000040000002d0100000700000018046300ba005c00b300040000002d010200040000002d0103000700000018046400bb005b00b200030000001e000700000016047000e2005f00b9000500000014024e00900005000000130281000b01040000002701ffff0a00000026060f000a00ffffffff
000000000000030000001e000700000016048b008900750035000500000014025f00e1ff050000001302a100dd00040000002701ffff040000002d010500040000002d0101000e0000002403050030007300380078003900730030007300300073000a00000026060f000a00ffffffff010000000000040000002d010000
0700000018048f00910089008a00040000002d010200040000002d0103000700000018049000920088008900030000001e000700000016048800e20070009000050000001402a0003e0005000000130258003401040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d01
01000e00000024030500a4004c00cf004c00cf005b00a4005b00a4004c000700000016045800ce004f00a800040000002d010400070000002105010070005500a800070000002105010061005500ad00070000002105010074005500b200070000002105010069005500b700070000002105010065005500bc0007000000
210501006e005500c100070000002105010074005500c6000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e000000240305007b0078009c0078009c00
87007b0087007b00780007000000160484009c007b007f00040000002d0104000700000021050100610081007f000700000021050100670081008400070000002105010065008100890007000000210501006e0081008e0007000000210501007400810093000a00000026060f000a00ffffffff0100000000000a000000
26060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e000000240305003801260079012600790134003801340038012600040000002d010200040000002d010300070000001b0435007a01250037010700000016043200
6c0129004701040000002d010400070000002105010063002f00470107000000210501006f002f004c01070000002105010075002f00510107000000210501006e002f005601070000002105010074002f005b01070000002105010072002f006001070000002105010079002f0065010a00000026060f000a00ffffffff
010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e0007000000160455005701370055010500000014021900560105000000130273005601040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100
0e000000240305004901560061015600610167004901670049015600040000002d010200040000002d010300070000001b04680062015500480107000000160463005c015a005101040000002d01040007000000210501005700600051010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffff
ffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016048a0042017b004101050000001402990040010500000013026c004301040000002701ffff040000002d010500040000002d0101000e0000002403050041018f00430186003e01
860041018f0041018f000a00000026060f000a00ffffffff010000000000040000002d0100000700000018047b00450174003f01040000002d010200040000002d0103000700000018047c00460173003e01030000001e00070000001604740056016a0045010500000014027e0034010500000013026000670104000000
2701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305004b0175007a0175007a0184004b0184004b0175000700000016048100790178004f01040000002d010400070000002105010068007e004f01070000002105010061007e0054010700000021050100
73007e00590107000000210501002d007e005e0107000000210501006e007e006301070000002105010061007e00680107000000210501006d007e006d01070000002105010065007e0072010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff0300
00001e000700000016049f007a0100000000040000002d010100040000002d0100000e0000002403050034018c004c018c004c019d0034019d0034018c00040000002d010200040000002d010300070000001b049e004d018b00330107000000160499004c0190003801040000002d010400070000002105010055009600
38010700000021050100530096003d0107000000210501004100960042010a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016046e001c016c00fd000500000014026d00de000500000013026d003b01
040000002701ffff040000002d010000040000002d010100070000001804710023016a001c01040000002d010200040000002d0103000700000018047200240169001b010a00000026060f000a00ffffffff000000000000030000001e000700000016046d00430162002301050000001402780003010500000013025700
6301040000002701ffff040000002d010500040000002d0101000e0000002403050048015f003f0160004101640048015f0048015f000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d0100000e00000024030500fc0056003b0156003b016500fc006500
fc0056000700000016046200390159000101040000002d010400070000002105010069005f00010107000000210501006e005f00060107000000210501002d005f000b0107000000210501006c005f00100107000000210501006f005f001501070000002105010063005f001a01070000002105010061005f001f010700
00002105010074005f002401070000002105010069005f00290107000000210501006f005f002e0107000000210501006e005f0033010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a010000000004000000
2d010100040000002d010300030000001e000700000016046b004f00690035000500000014026a001b000500000013026a006900040000002701ffff040000002d010500040000002d0101000e000000240305003000690039006c003900660030006900300069000a00000026060f000a00ffffffff0100000000000400
00002d0100000700000018046e00570067005000040000002d010200040000002d0103000700000018046f00580066004f00030000001e000700000016046a007c005c005600050000001402780030000500000013024e00a200040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000
040000002d0101000e00000024030500300053006e0053006e00620030006200300053000700000016045f006c0056003400040000002d010400070000002105010070005c003400070000002105010072005c00390007000000210501006f005c003e00070000002105010064005c004300070000002105010075005c00
4800070000002105010063005c004d00070000002105010065005c005200070000002105010064005c00570007000000210501002d005c005c00070000002105010062005c006100070000002105010079005c0066000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff010000000000
040000002701ffff03000000000000000000000000000000000000000000000000000000000016044f0547034e0540030500000014024d05390305000000130250050003040000002701ffff030000001e00070000001604510567034f0560030500000014025005590305000000130250056e03040000002701ffff0300
00001e0000000000160452058703510580030500000014025005790305000000130253050003040000002701ffff030000001e000700000016045405a7035205a003050000001402530599030500000013025305ae03040000002701ffff030000001e000000000016045605c7035405c0030500000014025505b9030500
000013025505}{\result {\f4\fs20\lang2057 {\pict\wmetafile8\picw13335\pich5609\picwgoal7560\pichgoal3180 \box\brdrs\brdrw15 \piccropl-248\piccropt-248\piccropr-331\piccropb-198 
010009000003160c00000600130000000000050000000b0200000000050000000c029f007a010400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0000000000
0007000000fc020000ffffff000000040000002d01000008000000fa02050000000000ffffff00040000002d0101000e00000024030500010026004200260042003400010034000100260007000000fc020100000000000000040000002d01020008000000fa0206000100010000000000040000002d010300070000001b04
3500430025000000070000001604320041002900050013000000fb02f8ff00000000000090010000000000000030436f7572696572204e6577000000040000002d01040007000000210501006f002f000500070000002105010072002f000a00070000002105010067002f000f00070000002105010061002f001400070000
00210501006e002f001900070000002105010069002f001e0007000000210501007a002f002300070000002105010061002f002800070000002105010074002f002d00070000002105010069002f00320007000000210501006f002f00370007000000210501006e002f003c000a00000026060f000a00ffffffff01000000
00000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e000000240305006e002600a5002600a50034006e0034006e002600040000002d010200040000002d010300070000001b043500a6
0025006d0007000000160432009f0029007900040000002d010400070000002105010076002f007900070000002105010065002f007e00070000002105010068002f008300070000002105010069002f008800070000002105010063002f008d0007000000210501006c002f009200070000002105010065002f0097000a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e00000024030500d30026000a0126000a013400d3003400d3002600040000002d01020004
0000002d010300070000001b0435000b012500d200070000001604320003012900dd00040000002d010400070000002105010070002f00dd00070000002105010072002f00e20007000000210501006f002f00e700070000002105010064002f00ec00070000002105010075002f00f100070000002105010063002f00f600
070000002105010065002f00fb000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e000000240305003b0001007200010072000e003b
000e003b000100040000002d010200040000002d010300070000001b040f00730000003a000700000016040c006b0003004600040000002d01040007000000210501006f00090046000700000021050100620009004b0007000000210501006a00090050000700000021050100650009005500070000002105010063000900
5a000700000021050100740009005f0007000000210501007300090064000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300040000002d010000040000002d0101000e00000024
030500d30001000a0101000a010e00d3000e00d3000100040000002d010200040000002d010300070000001b040f000b010000d2000700000016040c0003010300dd00040000002d010400070000002105010061000900dd00070000002105010063000900e200070000002105010074000900e70007000000210501006900
0900ec0007000000210501006f000900f10007000000210501006e000900f600070000002105010073000900fb000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e0007000000160422004200110026000500000014
0233000a0005000000130200005e00040000002701ffff030000001e0007000000160422007c00110067000500000014020000520005000000130233009100040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e0000002403050025000f003e000f003e001e00
25001e0025000f000700000016041b003d0012002a00040000002d0104000700000021050100490018002a000700000021050100530018002f0007000000210501004100180034000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e0007
00000016049f007a0100000000040000002d010100040000002d0100000e00000024030500e2001600fb001600fb002500e2002500e20016000700000016042200fa001900e600040000002d010400070000002105010049001f00e600070000002105010053001f00eb00070000002105010041001f00f0000a0000002606
0f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e0000002403050071001200890012008900210071002100710012000700000016041e00880015007500040000002d0104
00070000002105010049001b007500070000002105010053001b007a00070000002105010041001b007f000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d010300030000001e000700000016042600ef000e00ed00
050000001402f6ffee000500000013023e00ee00040000002701ffff030000001e000700000016046600ef003300ed000500000014020000ee000500000013029900ee00040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e00000024030500e2006700fa0067
00fa007800e2007800e2006700040000002d010200040000002d010300070000001b047900fb006600e1000700000016047400f6006b00ec00040000002d010400070000002105010059007100ec000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000
040000002d010300030000001e000700000016046a00240037002200050000001402040023000500000013029d002300040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e0000002403050016006a002e006a002e007b0016007b0016006a00040000002d0102
00040000002d010300070000001b047c002f0069001500070000001604770029006e001f00040000002d0104000700000021050100580074001f000a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e00070000001604
55008a00370088000500000014021900890005000000130273008900040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305007c00560094005600940067007c0067007c005600040000002d010200040000002d010300070000001b046800950055
007b00070000001604630090005a008500040000002d01040007000000210501005a00600085000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e00070000001604
6000b2005e0098000500000014025f007e000500000013025f00cc00040000002701ffff07000000fc020000000000000000040000002d010500040000002d0101000e0000002403050093005f009c0061009c005c0093005f0093005f000a00000026060f000a00ffffffff010000000000040000002d0100000700000018
046300ba005c00b300040000002d010200040000002d0103000700000018046400bb005b00b200030000001e000700000016047000e2005f00b9000500000014024e00900005000000130281000b01040000002701ffff0a00000026060f000a00ffffffff000000000000030000001e000700000016048b00890075003500
0500000014025f00e1ff050000001302a100dd00040000002701ffff040000002d010500040000002d0101000e0000002403050030007300380078003900730030007300300073000a00000026060f000a00ffffffff010000000000040000002d0100000700000018048f00910089008a00040000002d010200040000002d
0103000700000018049000920088008900030000001e000700000016048800e20070009000050000001402a0003e0005000000130258003401040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e00000024030500a4004c00cf004c00cf005b00a4005b00a400
4c000700000016045800ce004f00a800040000002d010400070000002105010070005500a800070000002105010061005500ad00070000002105010074005500b200070000002105010069005500b700070000002105010065005500bc0007000000210501006e005500c100070000002105010074005500c6000a00000026
060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e000000240305007b0078009c0078009c0087007b0087007b00780007000000160484009c007b007f00040000002d01
04000700000021050100610081007f000700000021050100670081008400070000002105010065008100890007000000210501006e0081008e0007000000210501007400810093000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e0007
00000016049f007a0100000000040000002d010100040000002d0100000e000000240305003801260079012600790134003801340038012600040000002d010200040000002d010300070000001b0435007a012500370107000000160432006c0129004701040000002d010400070000002105010063002f00470107000000
210501006f002f004c01070000002105010075002f00510107000000210501006e002f005601070000002105010074002f005b01070000002105010072002f006001070000002105010079002f0065010a00000026060f000a00ffffffff010000000000040000002701ffff030000001e000700000016049f007a01000000
00040000002d010300030000001e0007000000160455005701370055010500000014021900560105000000130273005601040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e000000240305004901560061015600610167004901670049015600040000002d01
0200040000002d010300070000001b04680062015500480107000000160463005c015a005101040000002d01040007000000210501005700600051010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a01000000
00040000002d010300030000001e000700000016048a0042017b004101050000001402990040010500000013026c004301040000002701ffff040000002d010500040000002d0101000e0000002403050041018f00430186003e01860041018f0041018f000a00000026060f000a00ffffffff010000000000040000002d01
00000700000018047b00450174003f01040000002d010200040000002d0103000700000018047c00460173003e01030000001e00070000001604740056016a0045010500000014027e00340105000000130260006701040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d
0101000e000000240305004b0175007a0175007a0184004b0184004b0175000700000016048100790178004f01040000002d010400070000002105010068007e004f01070000002105010061007e005401070000002105010073007e00590107000000210501002d007e005e0107000000210501006e007e00630107000000
2105010061007e00680107000000210501006d007e006d01070000002105010065007e0072010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d0100000e00000024
03050034018c004c018c004c019d0034019d0034018c00040000002d010200040000002d010300070000001b049e004d018b00330107000000160499004c0190003801040000002d01040007000000210501005500960038010700000021050100530096003d0107000000210501004100960042010a00000026060f000a00
ffffffff010000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010300030000001e000700000016046e001c016c00fd000500000014026d00de000500000013026d003b01040000002701ffff040000002d010000040000002d010100070000001804710023016a001c01040000
002d010200040000002d0103000700000018047200240169001b010a00000026060f000a00ffffffff000000000000030000001e000700000016046d004301620023010500000014027800030105000000130257006301040000002701ffff040000002d010500040000002d0101000e0000002403050048015f003f016000
4101640048015f0048015f000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d0100000e00000024030500fc0056003b0156003b016500fc006500fc0056000700000016046200390159000101040000002d010400070000002105010069005f000101070000
00210501006e005f00060107000000210501002d005f000b0107000000210501006c005f00100107000000210501006f005f001501070000002105010063005f001a01070000002105010061005f001f01070000002105010074005f002401070000002105010069005f00290107000000210501006f005f002e0107000000
210501006e005f0033010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002701ffff030000001e000700000016049f007a0100000000040000002d010100040000002d010300030000001e000700000016046b004f00690035000500000014026a001b00050000
0013026a006900040000002701ffff040000002d010500040000002d0101000e000000240305003000690039006c003900660030006900300069000a00000026060f000a00ffffffff010000000000040000002d0100000700000018046e00570067005000040000002d010200040000002d0103000700000018046f005800
66004f00030000001e000700000016046a007c005c005600050000001402780030000500000013024e00a200040000002701ffff0a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000e00000024030500300053006e0053006e00620030006200300053000700000016045f006c0056
003400040000002d010400070000002105010070005c003400070000002105010072005c00390007000000210501006f005c003e00070000002105010064005c004300070000002105010075005c004800070000002105010063005c004d00070000002105010065005c005200070000002105010064005c00570007000000
210501002d005c005c00070000002105010062005c006100070000002105010079005c0066000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff010000000000040000002701ffff03000000000000000000000000000000000000000000000000000000000016044f0547034e05400305
00000014024d05390305000000130250050003040000002701ffff030000001e00070000001604510567034f0560030500000014025005590305000000130250056e03040000002701ffff030000001e0000000000160452058703510580030500000014025005790305000000130253050003040000002701ffff03000000
1e000700000016045405a7035205a003050000001402530599030500000013025305ae03040000002701ffff030000001e000000000016045605c7035405c0030500000014025505b9030500000013025505}}}}}{\lang2057 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 
Normalisation is used in order to simplify the task of template filling. The idea is that template filling is just a conversion of results from an internal format to a user-defined format. Normalisation derives implicit knowledge and produces a normalised
 structure to be mapped into the templates during template filling.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 
The normalisation step is applied twice: after modifier attachment and after discourse processing. The reason for this double activation is that the first application allows to normalise QLFs at the sentence level, while the second does the same at text l
evel. It is necessary to apply not only normalisation at the end of the computation (i.e. at text level), but also right after modifier attachment, as some default reasoning prevents the discourse processor from looking  around in the text for som
e relations that are implicitly stated within the sentence, more than somewhere else in the text. For example in the case mentioned above (produced-by/produce), the car producer is not to be looked for in the focus structure by the discourse module, but i
t is implicit in the linguistic construction, i.e. is the company itself.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104246}1.7 DISCOURSE PROCESSING{\*\bkmkend _Toc433104246}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Discourse processing is currently used for solving two types of implicit relations at textual level:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 coreferences: currently only nominal coreferences are cop
ed with (no pronouns, yet, as in the Italian texts the presence of pronouns is irrelevant).
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 domain-specific implicit relations. For example in the text: }{\f3\fs20\lang2057 \ldblquote 
the bank XYZ will issue a set of bonds. }{\b\f3\fs20\lang2057 The rate}{\f3\fs20\lang2057 ...\rdblquote  }{\lang2057 the rate is that of the bonds.
\par }\pard \ri100\sb80\sa80 {\lang2057 Discourse relations are solved  in three steps:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 focus space building
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 coreference identification and  merging
\par {\pntext\pard\plain\f1 \'b7\tab}implicit relation resolution
\par }\pard \ri100\sb80\sa80 {\lang2057 Moreover discourse relations are searched in two steps: relation within a single sentence and within the text. The first step is mainly useful in case such as: \ldblquote the bank and its layers are going to...
\rdblquote ; in this case \ldblquote its\rdblquote  is to be solved within the sentence. The second step is used in cases such as \ldblquote the bank is going to buy... Its president said yesterday that...\rdblquote ; in this case \ldblquote its
\rdblquote  is r
eferring to an entity outside the current sentence. The system looks first of all for relations within the current sentence and then - in case none was found - also in the other sentences. Currently just backward references are considered, i.e. references
 t
o object already mentioned in the text. Cataforae for example are not yet coped with. References are looked for in a search space that is built on the top of the syntactic tree associated to the sentences in the text. The current search space is built in 
a very simple (and simplistic) manner. For each sentence the parse tree is taken and the list of its edges is produced by visiting the tree in the order head -> left-child -> right-child. Then each edge in the list is substituted with the instance(s) asso
ciated to it (if any).
\par }\pard\plain \s3\ri-2\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104247}COREFERENCE IDENTIFICATION AND  MERGING{\*\bkmkend _Toc433104247}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Coreference resolution is performed in order to mainly look for nominal references. It is based on three steps: 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
semantic compatibility tests: candidates in the search space are looked for by using rules based on the instance types associated to the edges in the focus space; for example the form }{\f3\fs22\lang2057 the company }{\f4\lang2057 
is compatible with the form }{\f3\fs22\lang2057 the NY-based car producer.}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 syntactic compatibility tests: candidates proposed by the previous tests are checked fo
r their linguistic realisations. For example an NP introduced by a determinative article }{\f4\lang2057 can be used to refer to  another NP introduced either by a determinative or indeterminative article;}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}{\f4\lang2057 instance merging: the instances are checked for compatibility of the associated information. For example }{\f3\fs22\lang2057 the NY-based car producer }{\f4\lang2057 cannot be merged with }{\f3\fs22\lang2057 
the Detroit-based car producer }{\f4\lang2057 as their LOCATION slot contains non compatible information.}{\lang2057 
\par }\pard\plain \s3\ri-2\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104248}IMPLICIT RELATION RESOLUTION{\*\bkmkend _Toc433104248}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Domain-specific implicit relations are meant to b
e discourse relations expressed via attributes of objects (an attribute is a slot with just one and only one specific filler in the world). For example given a }{\f3\fs22\lang2057 rate}{\lang2057 
 instance, there will be one and only one loan instance with that specific rate instance associated. So in a text such as: }{\f3\fs20\lang2057 \ldblquote the bank XYZ will issue a set of bonds. }{\b\f3\fs20\lang2057 The rate}{\f3\fs20\lang2057 ...
\rdblquote  }{\lang2057 the rate is that of the loan mentioned before. In this case the role of implicit relation recognition is exactly that of finding within the text the loan associated to the rate.
\par }\pard \ri100\sb80\sa80 {\lang2057 Zero pronouns (very common in Italian) are coped with as implicit relations.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104249}1.7.1 SOME DETAILS ON DISCOURSE PROCESSING{\*\bkmkend _Toc433104249}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Discourse relations are solved  in three steps:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 focus space building
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 coreference identification and  merging
\par {\pntext\pard\plain\f1 \'b7\tab}implicit relation resolution
\par }\pard \ri100\sb80\sa80 {\lang2057 Moreover discourse relation are searched in two steps: relation within a single sentence and within the text. The first step is mainly useful in case such as: \ldblquote the bank and its layers are going to...\rdblquote 
; in this case \ldblquote its\rdblquote  is to be solved within the sentence. The second step is used in cases such as \ldblquote the bank is going to buy... Its president said yesterday that...\rdblquote ; in this case \ldblquote its\rdblquote 
 is referring to an entity outside the current sentence. The system looks first of all for relations within the curre
nt sentence and then - in case none was found - also in the other sentences. Currently just backward references are considered, i.e. references to object already mentioned in the text. Cataforae for example are not coped with yet.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\fs24\lang2057 {\*\bkmkstart _Toc433104250}1.7.1.1 Building the Focus Space{\*\bkmkend _Toc433104250}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 References are looked for in a search space that is built on the top of the syntactic tree associated to the sentences in the text.
\par }\trowd \trgaph108\trleft567\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7371 \pard \ri100\sb80\sa80\intbl {
\fs22\lang2057 NOTE!!!
\par }\pard \ri100\sb80\sa80\intbl {\fs22\lang2057 Currently the search space construction is hardwired in the Lisp code and cannot be changed by the user.\cell }\pard \intbl {\fs22\lang2057 \row }\pard \ri100\sb80\sa80 {\lang2057 
The current search space is built in a very simple (and simplistic) manner. For each sentence the parse tree is taken and the list of its edges is produced by visiting the tree in the order head -> left-child -> right-child. Then each edge in the list is 
substituted with the instance associated to it (if any). Then duplicates are deleted from the obj-list (just the first one is kept). 
\par }\pard \ri100\sb80\sa80 {\lang2057 The search space for object#n in sentence#m is given by:
\par }\pard \ri102\sb40\sa40 {\f3\fs20\lang2057 (reverse (append obj-list#1...obj-list#m-1 
\par }\pard \li720\ri102\sb40\sa40 {\f3\fs20\lang2057 \tab (subseq obj-list#m 0 (position object#n obj-list#m))))
\par }\pard \ri100\sb80\sa80 {\lang2057 
i.e. all the object lists derived by the preceding sentences are part of the search space and the search space is also composed by the object preceding object#n in the object-list of the current sentence. The search space is 
an object list going from the nearest object to the farthest.
\par }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8414 \pard \sb80\sa80\intbl {
\lang2057 NOTE!
\par }\pard \sb80\sa80\intbl {\lang2057 
In case the preceding analysis returns an ambiguous interpretation for a sentence (a very rare case considering that the FST analysis is deterministic),  just the first of all the possible interpretations is considered during discourse processing. The oth
ers are ignored for the rest of the information extraction process. \cell }\pard \intbl {\lang2057 \row }\pard \ri100\sb80\sa80 {\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\fs24\lang2057 {\*\bkmkstart _Toc433104251}1.7.1.2 Coreference Resolution{\*\bkmkend _Toc433104251}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 The coreferences coped with in V2.0 are just of the nominal type. As example take \ldblquote a new bond will be issued  by XYZ. The issue...\rdblquote . In this case \ldblquote the issue\rdblquote 
 is a reference to the \ldblquote a new bond issue\rdblquote  in the preceding sentence. Reference resolutions is currently split in three steps: 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 SEM-COREF:  main rules (semantic tests);
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 SYN-COREF: syntactic compatibility tests;
\par {\pntext\pard\plain\f1 \'b7\tab}MERGING.
\par }\pard\plain \s3\ri-2\sb180\keepn \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104252}SEM-COREF:  main rules{\*\bkmkend _Toc433104252}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 They role is that of driving the coreference resolution process. Their main role is that of identifying objects that are candidates for coreference and then that of activating the SYN-COREF tests and 
the instance MERGING. Each object in each sentence is considered as a potential reference to another object in the search space. The cascade of the rules in the SEM-COREF grammar are compared against the current object and its search space. The role of ea
ch rule is that of looking for an object that semantically is \ldblquote compatible\rdblquote  with a reference  done via the current object, i.e. it is compatible with the potential reference; then syn-coref and merging are activated. 
\par }\pard\plain \s3\ri-2\sb180\keepn \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104253}SYN-COREF: syntactic compatibility tests{\*\bkmkend _Toc433104253} 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
They are performed on the syntactic edges associated to referenced and reference. In order to perform such a test a chart is built composed by just  two elements: the syn-edge associated to the candidate reference and the syn-edge associated to the refere
nced. The role of the syntactic compatibility tests is that of checking the way the elements were expressed  in the text from a linguistic point of view (e.g. if they are introduced by determiners).
\par }\pard\plain \s3\ri-2\sb180\keepn \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104254}Merging{\*\bkmkend _Toc433104254} 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 It is the actual process of merging two instances in order to produce a new instance containing the information brought by both referenced and reference.  
\par }\pard \ri100\sb80\sa80 {\lang2057 For example given: 
\par }\pard\plain \s62\li720\ri102\sb40\sa40 \f3\fs20\lang1024 {\lang2057 XYZ will issue a new bond. The issue will take place on Feb.2.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 The system will create two instances of \ldblquote issue\rdblquote : 
\par }\trowd \trgaph108\trleft1560\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4962 \pard\plain 
\s62\ri102\sb40\sa40\intbl \f3\fs20\lang1024 {\b\lang2057 issue#1
\par }\pard \s62\ri102\sb40\sa40\intbl {\lang2057       issued-by: XYZ\tab 
\par \tab type: bond\cell }\pard\plain \intbl \f8\lang1024 {\lang2057 \row }\pard \ri100\sb80\sa80 {\lang2057 
\par }\pard\plain \s62\ri102\sb40\sa40\intbl \f3\fs20\lang1024 {\b\lang2057 issue#2
\par }\pard \s62\ri102\sb40\sa40\intbl {\lang2057 \tab issue-date: Feb. 2\cell }\pard\plain \intbl \f8\lang1024 {\lang2057 \row }\pard \ri100\sb80\sa80 {\lang2057 The result of merging will be a new instance:
\par }\pard\plain \s62\ri102\sb40\sa40\intbl \f3\fs20\lang1024 {\b\lang2057 issue#3
\par }\pard \s62\ri102\sb40\sa40\intbl {\lang2057       issued-by: XYZ\tab 
\par \tab type: bond
\par \tab issue-date: Feb. 2\cell }\pard\plain \intbl \f8\lang1024 {\lang2057 \row }\pard \ri100\sb80\sa80 {\lang2057 Note that before actually merging, it is necessary to check whether the information brou
ght by the two elements is compatible or not. This is not a trivial task. Consider for example the following sentence:
\par }\pard\plain \s62\li720\ri102\sb40\sa40 \f3\fs20\lang1024 {\lang2057 XYZ emettera` un nuovo }{\i\lang2057 prestito a tasso}{\lang2057  variabile. }{\b\lang2057 (...) Il tasso del prestito}{\lang2057  sara\rquote  comunicato nei prossimi giorni.
\par }\pard \s62\ri102\sb40\sa40 {\fs16\lang2057 (XYZ will issue a new bond with variable rate. The rate of the bond will be communicated in the next days)}{\lang2057 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 The relevant instances created by the system are:
\par }\pard \ri100\sb80\sa80 {\f4\fs20 {\pict\wmetafile8\picw10301\pich6773\picwgoal5855\pichgoal3840 \picscalex91\picscaley91\piccropl-303\piccropt-210\piccropr-20 
010009000003200200000500150000000000050000000b0200000000050000000c02c00024010400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000007000000fc020100000000000000040000002d01000008000000fa0206000100010000000000040000002d010100070000001b04470084000000010015000000fb02f4ff0000000000009001000000000000
001254696d6573204e657720526f6d616e000000040000002d0102000900000021050600626f6e64233111000a0010000000210514002020202020206973737565642d62793a2058595a1f000a000f00000021051100202020202020747970653a20626f6e6420002e000a000c00000021050b00202020202020726174653a
003c000a000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04640024012f00b10009000000210506007261746523324500b9000f0000002105120020202020747970653a207661726961626c655400b9000a00000026060f000a00ffffffff010000000000
0a00000026060f000a00ffffffff000000000000030000001e000700000016043a00a70038003b000500000014023900cfff05000000130239001301040000002701ffff07000000fc020000000000000000040000002d01030008000000fa02050000000000ffffff00040000002d0104000c00000024030400b0003900a1
003500a1003e00b00039000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100070000001b04af0087006e0000000900000021050600626f6e642333830009000f000000210512002020202020202020747970653a20626f6e649200
09000d00000021050d002020202020202020726174653a00a00009000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04c00022018c00ae000900000021050600726174652334a200b7000a00000026060f000a00ffffffff0100000000000a00000026060f
000a00ffffffff000000000000030000001e000700000016049d00a6009b003b000500000014029c00d0ff0500000013029c001101040000002701ffff040000002d010300040000002d0104000c00000024030400af009c00a0009800a000a000af009c000a00000026060f000a00ffffffff0100000000000a0000002606
0f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff03000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041f1c00000000082daf0f4c041f1c000000005c01
d71de00fff1ac40fff1a0000000000000000000000000000000000000000000000000000000000000000}}{\lang2057 
\par }\pard \ri100\sb80\sa80 {\lang2057 The SEM-COREF checks and the SYN-COREF tests show that bond#1 may be referenced by bond#3, and rate#2 by rate#4. In o
rder to understand if there is a compatibility of the information carried by bond#1 and bond#3, the system must be able to understand that even if the slot rate contains two different objects, those objects are also coreferring and then the information is
 compatible. In order to be able to do that, }{\b\lang2057 it is necessary first of all to be able to solve all the potential coreferences before deciding about the compatibilities.}{\lang2057  }{\b\lang2057 This means that through the action }{
\f3\fs22\lang2057 (}{\f3\fs20\lang2057 MERGE-INST }{\i\f3\fs22\lang2057 ElemX ElemY }{\f3\fs22\lang2057 )}{\b\lang2057  the user is just proposing a merging action that will actually take place only at the end of the coreference resolution step.}{
\lang2057  
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\fs24\lang2057 {\*\bkmkstart _Toc433104255}1.7.1.2 Domain-Specific Implicit Relation Resolution{\*\bkmkend _Toc433104255}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
Domain-specific implicit relations are meant to be discourse relations expressed via attributes of objects (an attribute is a slot with just one and only one specific filler in the world). For example given a rate instance, there will be one and only one 
loan instance with that specific rate instance associated. So in a text such as: }{\f3\fs20\lang2057 \ldblquote the bank XYZ will issue a set of bonds. }{\b\f3\fs20\lang2057 The rate}{\f3\fs20\lang2057 ...\rdblquote  }{\lang2057 
the rate is that of the loan mentioned before. In this case the role of implicit relation recognition is exactly that of finding within the text the loan associated to the rate.
\par }\pard \ri100\sb80\sa80 {\lang2057 
Implicit relations are solved via syntactic semantic rules that are very similar to those used for modifier attachment. Only the search space is not given by the parse tree, but it is the one common to all the discourse processing process.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104256}1.8 TEMPLATE FILLING AND MERGING{\*\bkmkend _Toc433104256}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Template filling is just a conversion of results from an internal format to a user-defined format. This is necessary for a number of reasons: 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
the user defined template can be far from the linguistic realisation of the concepts in a text; an intermediate representation (the logical form) is necessary;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
by using an internal representation it is possible to use the same system for different users with similar needs, presenting then the information by using different templates.
\par }\pard \ri100\sb80\sa80 {\lang2057 The process is split in three steps:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 template creation: concepts in the logical form are used to trigger templates;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 template filling: relations in the logical form are mapped to templates slots;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
template merging: it can be used for recovering missing coreferences. For example it may happen that two templates are produced carrying complete complementary information: suppose that in a text about bond issues, two templates are filled: one showing th
e issuer and the average duration, the other showing the rate and the first period rate. In this case there was probably a missed coreference between the two bond issues. This module is used to raise recall.
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
template information recovery: module used to raise recall; it allows to derive some missing  information by copying it from other templates produced by the same text; for example in case more than one template is filled for a single text (e.g. two econom
ic-result templates are instanced) but some necessary information is present in just one of the two templates and it is likely that it can be shared by others (e.g. the name o
f the company achieving the result is missing in one of the two), the slot value can be inherited where missing. In this case the reason for losing the slot is probably due to a missed implicit relation.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 In V3.0 template filling produces two outputs: the templates filled for FACILE and the templates for the MUC scorer.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104257}1.8 TEMPLATE PRESENTATION{\*\bkmkend _Toc433104257}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 When templates are filled by Pinocchio, they must be presented to the user. Different users can require different presentations for the same information. This module allow
s to change the user view of results.
\par 
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104258}2. How FST are Implemented in Pinocchio{\*\bkmkend _Toc433104258}
\par }\pard\plain \ri-483\sb80\sa80 \f8\lang1024 {\pard\plain \ri-483\sb80\sa80 \v\f8\lang2057 {\tc {\lang2057 G-FST}}}{\lang2057 An FST is a memoryless device that reads an input string and produces as output  a new string  that has been \ldblquote rewritten
\rdblquote  from the input.   These devices can  be used to implement general  rewriting rules.  In case the input and output strings are the  sam
e, we say that (the rule represented by) the FST has failed  to apply.  A  cascade of FSTs is an ordered sequence of FSTs where each transducer feeds  with its output the i
nput  of the next  transducer in the  sequence.  Since the transducers are deterministic, the cascade will translate each string into a unique string. 
\par }\pard \ri100\sb80\sa80 {\lang2057 G-FST is the implementation of Finite State Transducer technology as provided by Geppetto V2.2. In Geppetto\rquote 
s architecture, G-FST is included in the processor list and - when active - substitutes the chart parsers. Its grammars also substitute the default context-free grammar provided as default in the previous versions.
\par }\pard \ri100\sb80\sa80 {\lang2057 In the next figure the architecture of the G-FST module of Geppetto is shown. This figure refers to the G-FST version 1.0 used in PINOCCHIO V2.0 and V2.1.
\par }\pard \qc\ri100\sb80\sa80 {\f4\fs20 {\pict\wmetafile8\picw23954\pich14711\picwgoal13585\pichgoal8352 \box\brdrs\brdrw15 \picscalex60\picscaley60\piccropb-20 
010009000003971000000500150000000000050000000b0200000000050000000c02a101a7020400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff00000000000015000000fb02dcff0000000000009001000000000000001254696d6573204e657720526f6d616e000000040000002d0100000900000021050500472d465354002f002f020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff
00000000000007000000fc020100000000000000040000002d01010008000000fa0206000100010000000000040000002d01020007000000180443006d001200000015000000fb02f0ff0000000000009001000000000000001254696d6573204e657720526f6d616e000000040000002d01030004000000f00100000a0000
0021050700526567756c61720027001d000c00000021050b0045787072657373696f6e7300350010000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b043d00030112009c000c00000021050b00524520436f6d70696c6572002c00a5000a00000026060f00
0a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016048b0029018900f6000500000014028a00c3000500000013028a005c01040000002701ffff07000000fc020000000000000000040000002d01000008000000fa02050000000000ffffff00040000002d0104000c
0000002403040032018a002301860023018f0032018a000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100040000002d010200070000001b049d009301720032010c00000021050b0047656e6572616c2046535400850039010c00000021050b00496e
74657270726574657200940040010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016042b002901290002010500000014022a00db000500000013022a005001040000002701ffff040000002d010000040000002d0104000c0000002403040032
012a002301260023012f0032012a000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100040000002d01020007000000180443009301120032010a000000210507004361736361646500270047010a000000210507006f66204653547300350048010a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b048101af00d80048000900000021050500426173696300140169000e00000021050f0046756e6374696f6e616c69746965730027014c000b00000021050a00666f7220696e707574203a015d0009000000210506
006163636573734d0167000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604c3006301a400610105000000140285006201050000001302e2006201040000002701ffff040000002d010000040000002d0104000c000000240304006201cc00
6601bd005e01bd006201cc000c0000002403040062019c005e01ab006601ab0062019c000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100040000002d010200070000001b0481018f02d800b6010a00000026060f000a00ffffffff0100000000000a
00000026060f000a00ffffffff0000000000000a00000021050800476570706574746ff0004c020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b0409012302e400c2010a00000021050700556e696669657200fb00db010a00000026060f000a00ffffffff
0100000000000a00000026060f000a00ffffffff000000000000070000001804390123021401c2010b00000021050900486965726172636879002901d2010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000018046f0123024a01c2010a000000210507004c6578
69636f6e005f01d8010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b048101a501d800c0000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604d4002c00cd002a0005000000
1402c6002b00050000001302db002b00040000002701ffff030000001e00070000001604e2002c00db002a00050000001402d4002b00050000001302e9002b00040000002701ffff030000001e00070000001604f0002c00e9002a00050000001402e2002b00050000001302f7002b00040000002701ffff030000001e0007
0000001604fe002c00f7002a00050000001402f0002b0005000000130205012b00040000002701ffff030000001e000700000016040c012c0005012a00050000001402fe002b0005000000130213012b00040000002701ffff030000001e000700000016041a012c0013012a000500000014020c012b000500000013022101
2b00040000002701ffff030000001e0007000000160428012c0021012a000500000014021a012b000500000013022f012b00040000002701ffff030000001e0007000000160436012c002f012a0005000000140228012b000500000013023d012b00040000002701ffff030000001e0007000000160444012c003d012a0005
000000140236012b000500000013024b012b00040000002701ffff030000001e0007000000160452012c004b012a0005000000140244012b0005000000130259012b00040000002701ffff030000001e0007000000160460012c0059012a0005000000140252012b0005000000130267012b00040000002701ffff03000000
1e000700000016046e012c0067012a0005000000140260012b0005000000130275012b00040000002701ffff030000001e000700000016047c012c0075012a000500000014026e012b0005000000130283012b00040000002701ffff030000001e000700000016048a012c0083012a000500000014027c012b000500000013
0291012b00040000002701ffff030000001e0007000000160498012c0091012a000500000014028a012b000500000013029f012b00040000002701ffff030000001e000700000016049f0133009d012c000500000014029e0125000500000013029e013a00040000002701ffff030000001e000700000016049f0141009d01
3a000500000014029e0133000500000013029e014800040000002701ffff030000001e000700000016049f014f009d0148000500000014029e0141000500000013029e015600040000002701ffff030000001e000700000016049f015d009d0156000500000014029e014f000500000013029e016400040000002701ffff03
0000001e000700000016049f016b009d0164000500000014029e015d000500000013029e017200040000002701ffff030000001e000700000016049f0179009d0172000500000014029e016b000500000013029e018000040000002701ffff030000001e000700000016049f0187009d0180000500000014029e0179000500
000013029e018e00040000002701ffff030000001e000700000016049f0195009d018e000500000014029e0187000500000013029e019c00040000002701ffff030000001e000700000016049f01a3009d019c000500000014029e0195000500000013029e01aa00040000002701ffff030000001e000700000016049f01b1
009d01aa000500000014029e01a3000500000013029e01b800040000002701ffff030000001e000700000016049f01bf009d01b8000500000014029e01b1000500000013029e01c600040000002701ffff030000001e000700000016049f01cd009d01c6000500000014029e01bf000500000013029e01d400040000002701
ffff030000001e000700000016049f01db009d01d4000500000014029e01cd000500000013029e01e200040000002701ffff030000001e000700000016049f01e9009d01e2000500000014029e01db000500000013029e01f000040000002701ffff030000001e000700000016049f01f7009d01f0000500000014029e01e9
000500000013029e01fe00040000002701ffff030000001e000700000016049f0105019d01fe000500000014029e01f7000500000013029e010c01040000002701ffff030000001e000700000016049f0113019d010c010500000014029e0105010500000013029e011a01040000002701ffff030000001e00070000001604
9f0121019d011a010500000014029e0113010500000013029e012801040000002701ffff030000001e000700000016049f012f019d0128010500000014029e0121010500000013029e013601040000002701ffff030000001e000700000016049f013d019d0136010500000014029e012f010500000013029e014401040000
002701ffff030000001e000700000016049f014b019d0144010500000014029e013d010500000013029e015201040000002701ffff030000001e000700000016049f0159019d0152010500000014029e014b010500000013029e016001040000002701ffff030000001e000700000016049f0167019d016001050000001402
9e0159010500000013029e016e01040000002701ffff030000001e000700000016049f0175019d016e010500000014029e0167010500000013029e017c01040000002701ffff030000001e000700000016049f0183019d017c010500000014029e0175010500000013029e018a01040000002701ffff030000001e00070000
0016049f0191019d018a010500000014029e0183010500000013029e019801040000002701ffff030000001e000700000016049f019f019d0198010500000014029e0191010500000013029e01a601040000002701ffff030000001e000700000016049f01ad019d01a6010500000014029e019f010500000013029e01b401
040000002701ffff030000001e000700000016049f01bb019d01b4010500000014029e01ad010500000013029e01c201040000002701ffff030000001e000700000016049f01c9019d01c2010500000014029e01bb010500000013029e01d001040000002701ffff030000001e000700000016049f01d7019d01d001050000
0014029e01c9010500000013029e01de01040000002701ffff030000001e000700000016049f01e5019d01de010500000014029e01d7010500000013029e01ec01040000002701ffff030000001e000700000016049f01f3019d01ec010500000014029e01e5010500000013029e01fa01040000002701ffff030000001e00
0700000016049f0101029d01fa010500000014029e01f3010500000013029e010802040000002701ffff030000001e000700000016049f010f029d0108020500000014029e0101020500000013029e011602040000002701ffff030000001e000700000016049f011d029d0116020500000014029e010f020500000013029e
012402040000002701ffff030000001e000700000016049f012b029d0124020500000014029e011d020500000013029e013202040000002701ffff030000001e000700000016049f0139029d0132020500000014029e012b020500000013029e014002040000002701ffff030000001e000700000016049f0147029d014002
0500000014029e0139020500000013029e014e02040000002701ffff030000001e000700000016049f0155029d014e020500000014029e0147020500000013029e015c02040000002701ffff030000001e000700000016049f0163029d015c020500000014029e0155020500000013029e016a02040000002701ffff030000
001e000700000016049f0171029d016a020500000014029e0163020500000013029e017802040000002701ffff030000001e000700000016049f017f029d0178020500000014029e0171020500000013029e018602040000002701ffff030000001e000700000016049f018d029d0186020500000014029e017f0205000000
13029e019402040000002701ffff030000001e000700000016049f0199029d0194020500000014029e018f020500000013029e019e02040000002701ffff030000001e000700000016049d019b029c0199020500000014029e019a020500000013029b019a02040000002701ffff030000001e0007000000160495019b028e
0199020500000014029c019a0205000000130287019a02040000002701ffff030000001e0007000000160487019b02800199020500000014028e019a0205000000130279019a02040000002701ffff030000001e0007000000160479019b027201990205000000140280019a020500000013026b019a02040000002701ffff
030000001e000700000016046b019b026401990205000000140272019a020500000013025d019a02040000002701ffff030000001e000700000016045d019b025601990205000000140264019a020500000013024f019a02040000002701ffff030000001e000700000016044f019b024801990205000000140256019a0205
000000130241019a02040000002701ffff030000001e0007000000160441019b023a01990205000000140248019a0205000000130233019a02040000002701ffff030000001e0007000000160433019b022c0199020500000014023a019a0205000000130225019a02040000002701ffff030000001e000700000016042501
9b021e0199020500000014022c019a0205000000130217019a02040000002701ffff030000001e0007000000160417019b02100199020500000014021e019a0205000000130209019a02040000002701ffff030000001e0007000000160409019b020201990205000000140210019a02050000001302fb009a020400000027
01ffff030000001e00070000001604fb009b02f400990205000000140202019a02050000001302ed009a02040000002701ffff030000001e00070000001604ed009b02e6009902050000001402f4009a02050000001302df009a02040000002701ffff030000001e00070000001604df009b02d8009902050000001402e600
9a02050000001302d1009a02040000002701ffff030000001e00070000001604d1009b02cd009902050000001402d5009a02050000001302c9009a02040000002701ffff030000001e00070000001604ce009902cc009702050000001402cd009b02050000001302cd009502040000002701ffff030000001e000700000016
04ce009002cc008902050000001402cd009702050000001302cd008202040000002701ffff030000001e00070000001604ce008202cc007b02050000001402cd008902050000001302cd007402040000002701ffff030000001e00070000001604ce007402cc006d02050000001402cd007b02050000001302cd0066020400
00002701ffff030000001e00070000001604ce006602cc005f02050000001402cd006d02050000001302cd005802040000002701ffff030000001e00070000001604ce005802cc005102050000001402cd005f02050000001302cd004a02040000002701ffff030000001e00070000001604ce004a02cc0043020500000014
02cd005102050000001302cd003c02040000002701ffff030000001e00070000001604ce003c02cc003502050000001402cd004302050000001302cd002e02040000002701ffff030000001e00070000001604ce002e02cc002702050000001402cd003502050000001302cd002002040000002701ffff030000001e000700
00001604ce002002cc001902050000001402cd002702050000001302cd001202040000002701ffff030000001e00070000001604ce001202cc000b02050000001402cd001902050000001302cd000402040000002701ffff030000001e00070000001604ce000402cc00fd01050000001402cd000b02050000001302cd00f6
01040000002701ffff030000001e00070000001604ce00f601cc00ef01050000001402cd00fd01050000001302cd00e801040000002701ffff030000001e00070000001604ce00e801cc00e101050000001402cd00ef01050000001302cd00da01040000002701ffff030000001e00070000001604ce00da01cc00d3010500
00001402cd00e101050000001302cd00cc01040000002701ffff030000001e00070000001604ce00cc01cc00c501050000001402cd00d301050000001302cd00be01040000002701ffff030000001e00070000001604ce00be01cc00b701050000001402cd00c501050000001302cd00b001040000002701ffff030000001e
00070000001604ce00b001cc00a901050000001402cd00b701050000001302cd00a201040000002701ffff030000001e00070000001604ce00a201cc009b01050000001402cd00a901050000001302cd009401040000002701ffff030000001e00070000001604ce009401cc008d01050000001402cd009b01050000001302
cd008601040000002701ffff030000001e00070000001604ce008601cc007f01050000001402cd008d01050000001302cd007801040000002701ffff030000001e00070000001604ce007801cc007101050000001402cd007f01050000001302cd006a01040000002701ffff030000001e00070000001604ce006a01cc0063
01050000001402cd007101050000001302cd005c01040000002701ffff030000001e00070000001604ce005c01cc005501050000001402cd006301050000001302cd004e01040000002701ffff030000001e00070000001604ce004e01cc004701050000001402cd005501050000001302cd004001040000002701ffff0300
00001e00070000001604ce004001cc003901050000001402cd004701050000001302cd003201040000002701ffff030000001e00070000001604ce003201cc002b01050000001402cd003901050000001302cd002401040000002701ffff030000001e00070000001604ce002401cc001d01050000001402cd002b01050000
001302cd001601040000002701ffff030000001e00070000001604ce001601cc000f01050000001402cd001d01050000001302cd000801040000002701ffff030000001e00070000001604ce000801cc000101050000001402cd000f01050000001302cd00fa00040000002701ffff030000001e00070000001604ce00fa00
cc00f300050000001402cd000101050000001302cd00ec00040000002701ffff030000001e00070000001604ce00ec00cc00e500050000001402cd00f300050000001302cd00de00040000002701ffff030000001e00070000001604ce00de00cc00d700050000001402cd00e500050000001302cd00d000040000002701ff
ff030000001e00070000001604ce00d000cc00c900050000001402cd00d700050000001302cd00c200040000002701ffff030000001e00070000001604ce00c200cc00bb00050000001402cd00c900050000001302cd00b400040000002701ffff030000001e00070000001604ce00b400cc00ad00050000001402cd00bb00
050000001302cd00a600040000002701ffff030000001e00070000001604ce00a600cc009f00050000001402cd00ad00050000001302cd009800040000002701ffff030000001e00070000001604ce009800cc009100050000001402cd009f00050000001302cd008a00040000002701ffff030000001e00070000001604ce
008a00cc008300050000001402cd009100050000001302cd007c00040000002701ffff030000001e00070000001604ce007c00cc007500050000001402cd008300050000001302cd006e00040000002701ffff030000001e00070000001604ce006e00cc006700050000001402cd007500050000001302cd00600004000000
2701ffff030000001e00070000001604ce006000cc005900050000001402cd006700050000001302cd005200040000002701ffff030000001e00070000001604ce005200cc004b00050000001402cd005900050000001302cd004400040000002701ffff030000001e00070000001604ce004400cc003d00050000001402cd
004b00050000001302cd003600040000002701ffff030000001e00070000001604ce003600cc002f00050000001402cd003d00050000001302cd002800040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000008000000210503004b525400f00074010a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000180445012d012001d20007000000210502004b423501f4000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000e0000002105100045787465726e616c206d6f6475
6c657398010e010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b0409012d01e400cc000c00000021050b00496e74657270726574657200fb00da000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000300
00001e000700000016048b00b801890092010500000014028a006c010500000013028a00de01040000002701ffff040000002d010000040000002d0104000c00000024030400c2018a00b3018600b3018f00c2018a000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000004
0000002d010100040000002d010200070000001804a30035027200c80109000000210506004f75747075748e00e8010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016042b00930029006c000500000014022a0045000500000013022a00ba00
040000002701ffff040000002d010000040000002d0104000c000000240304009c002a008d0026008d002f009c002a000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100040000002d010200070000001804a300f70072008a00090000002105050049
6e707574008e00af000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604690063014a0061010500000014022b00620105000000130288006201040000002701ffff040000002d010000040000002d0104000c00000024030400620172006601
63005e016300620172000c00000024030400620142005e01510066015100620142000a00000026060f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff030000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000}}{\lang2057 
\par }\pard\plain \s24\qc\li300\ri274\sb120\sa120\nowidctlpar\box\brdrs\brdrw15 \f8\lang1024 {\lang2057 Figure 2: G-FST  V1.0 as in PINOCCHIO V2.0 and V2.1
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
It is composed by a generic compiler that reads lists of regular expressions (REs) and produces a cascade of FSTs for each list. Then a generic interpreter is able to interpret the cascades of FST for analysing a specific input and producing the appropria
te output.
\par }\pard \ri100\sb80\sa80 {\lang2057 The module is independent from the actual meaning associated to each RE; in principle the module can be used for processing different from parsing. As a matter of fact, all the modules of PINOCCHIO 
V2.0 shown above were implemented using the same RE compiler and interpreter provided by Geppetto.
\par The module communicates with some external modules in order to implement the tests and actions required by the regular expressions. First of all the General FST interpreter requires that a set of basic functionalities are declared and implemented that: 

\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 describe  the type of input that the cascade will use
 (how it is possible to get the next token in the input, its structure, etc.);
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 actually implement the tests and the actions contained in RE.
\par }\pard \ri100\sb80\sa80 {\lang2057 Actions and tests can use the Geppetto standard interface for accessing external and internal modules such as:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 a knowledge base
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 hierarchy, lexicon and macros.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 Since V3.0, a new implementation of G-FST is available: FSTs are no longer interpreted, but directly compiled into Lisp code. This allows, among other things to:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 have a faster implementation;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 allow to produce a delivery system not inclusive of the RE compiler and the FST interpreter.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 
In the next figure the new implementation (G-FST V2.0) is sketched; note the separation between the compilation phase (i.e. the generation of the Lisp code) and the use of the FSTs (i.e. execution of the Lisp code).
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\f4\fs20 {\pict\wmetafile8\picw25435\pich16616\picwgoal14425\pichgoal9432 \brdrl\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \brdrr\brdrs\brdrw15 \picscalex60\picscaley60\piccropb-20 
0100090000032f0f00000500150000000000050000000b0200000000050000000c02d701d1020400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000007000000fc020100000000000000040000002d01000008000000fa0206000100010000000000040000002d01010007000000180447007f001a00130015000000fb02f0ff0000000000009001000000000000
001254696d6573204e657720526f6d616e000000040000002d0102000a00000021050700526567756c6172002d002f000c00000021050b0045787072657373696f6e73003b0022000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04440015011d00af000c
00000021050b00524520436f6d70696c6572003500b7000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604e0002901de00f500050000001402df00c100050000001302df005d01040000002701ffff07000000fc0200000000000000000400
00002d01030008000000fa02050000000000ffffff00040000002d0104000c000000240304003101df002201da002201e3003101df000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100070000001b04f2009201c70031010a0000
0021050800436f6d70696c6564d70042010b00000021050a00204c69737020436f6465ea003e010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016042f003c012d0015010500000014022e00ee000500000013022e006301040000002701ffff
040000002d010300040000002d0104000c0000002403040045012e0036012a003601330045012e000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000700000018044700a5011a0045010a0000002105070043617363616465002d
005a010a000000210507006f662046535473003b005b010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e0007000000160418016201f8006001050000001402d800610105000000130238016101040000002701ffff040000002d010300040000002d010400
0c0000002403040061012101660112015d011201610121010c000000240304006101f1005d010001660100016101f1000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100070000001b04a2014d022d0174010a00000026060f000a
00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000021050800476570706574746f45010a020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b045e01e101390180010a00000021050700556e696669657200500199010a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000018048e01e101690180010b00000021050900486965726172636879007e0190010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000018048b0147026601e6
010a000000210507004c657869636f6e007b01fb010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04a00163012d017e000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604
2a01700022016e000500000014021a016f0005000000130232016f00040000002701ffff030000001e000700000016043801700030016e0005000000140228016f0005000000130240016f00040000002701ffff030000001e00070000001604460170003e016e0005000000140236016f000500000013024e016f00040000
002701ffff030000001e00070000001604540170004c016e0005000000140244016f000500000013025c016f00040000002701ffff030000001e00070000001604620170005a016e0005000000140252016f000500000013026a016f00040000002701ffff030000001e000700000016047001700068016e00050000001402
60016f0005000000130278016f00040000002701ffff030000001e000700000016047e01700076016e000500000014026e016f0005000000130286016f00040000002701ffff030000001e000700000016048c01700084016e000500000014027c016f0005000000130294016f00040000002701ffff030000001e00070000
0016049a01700092016e000500000014028a016f00050000001302a2016f00040000002701ffff030000001e00070000001604a8017000a0016e0005000000140298016f00050000001302b0016f00040000002701ffff030000001e00070000001604af017000ae016e00050000001402ad016f00050000001302b0016f00
040000002701ffff030000001e00070000001604b0017600ae016f00050000001402af016800050000001302af017d00040000002701ffff030000001e00070000001604b0018400ae017c00050000001402af017400050000001302af018c00040000002701ffff030000001e00070000001604b0019200ae018a00050000
001402af018200050000001302af019a00040000002701ffff030000001e00070000001604b001a000ae019800050000001402af019000050000001302af01a800040000002701ffff030000001e00070000001604b001ae00ae01a600050000001402af019e00050000001302af01b600040000002701ffff030000001e00
070000001604b001bc00ae01b400050000001402af01ac00050000001302af01c400040000002701ffff030000001e00070000001604b001ca00ae01c200050000001402af01ba00050000001302af01d200040000002701ffff030000001e00070000001604b001d800ae01d000050000001402af01c800050000001302af
01e000040000002701ffff030000001e00070000001604b001e600ae01de00050000001402af01d600050000001302af01ee00040000002701ffff030000001e00070000001604b001f400ae01ec00050000001402af01e400050000001302af01fc00040000002701ffff030000001e00070000001604b0010201ae01fa00
050000001402af01f200050000001302af010a01040000002701ffff030000001e00070000001604b0011001ae010801050000001402af010001050000001302af011801040000002701ffff030000001e00070000001604b0011e01ae011601050000001402af010e01050000001302af012601040000002701ffff030000
001e00070000001604b0012c01ae012401050000001402af011c01050000001302af013401040000002701ffff030000001e00070000001604b0013a01ae013201050000001402af012a01050000001302af014201040000002701ffff030000001e00070000001604b0014801ae014001050000001402af01380105000000
1302af015001040000002701ffff030000001e00070000001604b0015601ae014e01050000001402af014601050000001302af015e01040000002701ffff030000001e00070000001604b0016401ae015c01050000001402af015401050000001302af016c01040000002701ffff030000001e00070000001604b0017201ae
016a01050000001402af016201050000001302af017a01040000002701ffff030000001e00070000001604b0018001ae017801050000001402af017001050000001302af018801040000002701ffff030000001e00070000001604b0018e01ae018601050000001402af017e01050000001302af019601040000002701ffff
030000001e00070000001604b0019c01ae019401050000001402af018c01050000001302af01a401040000002701ffff030000001e00070000001604b001aa01ae01a201050000001402af019a01050000001302af01b201040000002701ffff030000001e00070000001604b001b801ae01b001050000001402af01a80105
0000001302af01c001040000002701ffff030000001e00070000001604b001c601ae01be01050000001402af01b601050000001302af01ce01040000002701ffff030000001e00070000001604b001d401ae01cc01050000001402af01c401050000001302af01dc01040000002701ffff030000001e00070000001604b001
e201ae01da01050000001402af01d201050000001302af01ea01040000002701ffff030000001e00070000001604b001f001ae01e801050000001402af01e001050000001302af01f801040000002701ffff030000001e00070000001604b001fe01ae01f601050000001402af01ee01050000001302af0106020400000027
01ffff030000001e00070000001604b0010c02ae010402050000001402af01fc01050000001302af011402040000002701ffff030000001e00070000001604b0011a02ae011202050000001402af010a02050000001302af012202040000002701ffff030000001e00070000001604b0012802ae012002050000001402af01
1802050000001302af013002040000002701ffff030000001e00070000001604b0013602ae012e02050000001402af012602050000001302af013e02040000002701ffff030000001e00070000001604b0014402ae013c02050000001402af013402050000001302af014c02040000002701ffff030000001e000700000016
04b0015202ae014a02050000001402af014202050000001302af015a02040000002701ffff030000001e00070000001604af015902a7015702050000001402b70158020500000013029f015802040000002701ffff030000001e00070000001604a101590299015702050000001402a9015802050000001302910158020400
00002701ffff030000001e00070000001604930159028b0157020500000014029b01580205000000130283015802040000002701ffff030000001e00070000001604850159027d0157020500000014028d01580205000000130275015802040000002701ffff030000001e00070000001604770159026f0157020500000014
027f01580205000000130267015802040000002701ffff030000001e0007000000160469015902610157020500000014027101580205000000130259015802040000002701ffff030000001e000700000016045b01590253015702050000001402630158020500000013024b015802040000002701ffff030000001e000700
000016044d01590245015702050000001402550158020500000013023d015802040000002701ffff030000001e000700000016043f01590237015702050000001402470158020500000013022f015802040000002701ffff030000001e00070000001604310159022901570205000000140239015802050000001302210158
02040000002701ffff030000001e0007000000160423015902220157020500000014022401580205000000130221015802040000002701ffff030000001e00070000001604230158022101510205000000140222015f0205000000130222014a02040000002701ffff030000001e0007000000160423014b02210143020500
000014022201530205000000130222013b02040000002701ffff030000001e0007000000160423013d02210135020500000014022201450205000000130222012d02040000002701ffff030000001e0007000000160423012f02210127020500000014022201370205000000130222011f02040000002701ffff030000001e
0007000000160423012102210119020500000014022201290205000000130222011102040000002701ffff030000001e000700000016042301130221010b0205000000140222011b0205000000130222010302040000002701ffff030000001e00070000001604230105022101fd0105000000140222010d02050000001302
2201f501040000002701ffff030000001e000700000016042301f7012101ef010500000014022201ff010500000013022201e701040000002701ffff030000001e000700000016042301e9012101e1010500000014022201f1010500000013022201d901040000002701ffff030000001e000700000016042301db012101d3
010500000014022201e3010500000013022201cb01040000002701ffff030000001e000700000016042301cd012101c5010500000014022201d5010500000013022201bd01040000002701ffff030000001e000700000016042301bf012101b7010500000014022201c7010500000013022201af01040000002701ffff0300
00001e000700000016042301b1012101a9010500000014022201b9010500000013022201a101040000002701ffff030000001e000700000016042301a30121019b010500000014022201ab0105000000130222019301040000002701ffff030000001e000700000016042301950121018d0105000000140222019d01050000
00130222018501040000002701ffff030000001e000700000016042301870121017f0105000000140222018f0105000000130222017701040000002701ffff030000001e0007000000160423017901210171010500000014022201810105000000130222016901040000002701ffff030000001e0007000000160423016b01
210163010500000014022201730105000000130222015b01040000002701ffff030000001e0007000000160423015d01210155010500000014022201650105000000130222014d01040000002701ffff030000001e0007000000160423014f01210147010500000014022201570105000000130222013f01040000002701ff
ff030000001e0007000000160423014101210139010500000014022201490105000000130222013101040000002701ffff030000001e000700000016042301330121012b0105000000140222013b0105000000130222012301040000002701ffff030000001e000700000016042301250121011d0105000000140222012d01
05000000130222011501040000002701ffff030000001e000700000016042301170121010f0105000000140222011f0105000000130222010701040000002701ffff030000001e000700000016042301090121010101050000001402220111010500000013022201f900040000002701ffff030000001e0007000000160423
01fb002101f300050000001402220103010500000013022201eb00040000002701ffff030000001e000700000016042301ed002101e5000500000014022201f5000500000013022201dd00040000002701ffff030000001e000700000016042301df002101d7000500000014022201e7000500000013022201cf0004000000
2701ffff030000001e000700000016042301d1002101c9000500000014022201d9000500000013022201c100040000002701ffff030000001e000700000016042301c3002101bb000500000014022201cb000500000013022201b300040000002701ffff030000001e000700000016042301b5002101ad0005000000140222
01bd000500000013022201a500040000002701ffff030000001e000700000016042301a70021019f000500000014022201af0005000000130222019700040000002701ffff030000001e0007000000160423019900210191000500000014022201a10005000000130222018900040000002701ffff030000001e0007000000
160423018b00210183000500000014022201930005000000130222017b00040000002701ffff030000001e0007000000160423017d00210175000500000014022201850005000000130222016d00040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000008
000000210503004b525400450132010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000018049101eb006c01900007000000210502004b428201b2000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000e000000
2105100045787465726e616c206d6f64756c6573cd01e6000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b045e01eb0039018a000c00000021050b00496e74657270726574657200500198000a00000026060f000a00ffffffff0100000000000a00000026
060f000a00ffffffff000000000000030000001e00070000001604e000b901de009101050000001402df006901050000001302df00e101040000002701ffff040000002d010300040000002d0104000c00000024030400c101df00b201da00b201e300c101df000a00000026060f000a00ffffffff0100000000000a000000
26060f000a00ffffffff000000000000040000002d010000040000002d010100070000001804f8003402c700c70109000000210506004f7574707574e200e7010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016042f00a6002d007f00050000
0014022e0058000500000013022e00cd00040000002701ffff040000002d010300040000002d0104000c00000024030400af002e00a0002a00a0003300af002e000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d010100070000001804
f800f600c70089000900000021050500496e70757400e200af000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b0444003b021d00d5010b00000021050a004c69737020436f6465202b00e4010b0000002105090047656e657261746f72003e00e7010a0000
0026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016042f0062022d003b020500000014022e0014020500000013022e008902040000002701ffff040000002d010300040000002d0104000c000000240304006b022e005c022a005c0233006b022e000a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000040000002d0101000700000018044700cb021a006b0208000000210504004c6973702d008c020800000021050400436f64653b008a020a00000026060f000a00ffffffff0100000000000a00000026060f
000a00ffffffff000000000000030000001e000700000016042f00cc012d00a5010500000014022e007e010500000013022e00f301040000002701ffff040000002d010300040000002d0104000c00000024030400d5012e00c6012a00c6013300d5012e000a00000026060f000a00ffffffff0100000000000a0000002606
0f000a00ffffffff000000000000040000002d010100030000001e00070000001604b300cf02b1000000050000001402b20031fd050000001302b2009e05040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000b00000021050900457865637574696f6e
00c0000b000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016040100cf02ffff0000050000001402000031fd05000000130200009e05040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff
0000000000000c00000021050b00436f6d70696c6174696f6e0012000d000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010000070000001b04a70052026700c60112000000210517002042617369632046756e6374696f6e616c697469657320008100c4
010f00000021051100666f7220696e7075742020616363657373009500d7010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016045f0007024d0005020500000014023b00060205000000130271000602040000002701ffff040000002d010300
040000002d0104000c00000024030400070267000b02580002025800070267000c0000002403040006024500020254000b025400060245000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f
000a00ffffffff010000000000040000002701ffff030000000000000000ff030000001e00070000001604ce006602cc005f02050000001402cd006d020000ffffffff000000000000070000001b048101a501d800c0000a000000260600000500000013028a005c01040000002701ffff07000000fc020000000000000000
000013029e01d400040000002701ffff030000001e000700000016049f01000013028a00de01040000002701ffff040000002d010000040000002d0104000000000024030400c2018a00b3018600b3018f00c2018a000a00000026060f000000000013029e019402040000002701ffff030000001e000700000016049f01}}{
\lang2057 
\par }\pard\plain \s24\qc\fi-283\li709\ri566\sb120\sa120\nowidctlpar\box\brdrs\brdrw15 \f8\lang1024 {\lang2057 Figure 2: G-FST  V2.0 as in PINOCCHIO V3.0
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104259}3. Non-FST Resources in Pinocchio{\*\bkmkend _Toc433104259}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 There are resources that are used in PINOCCHIO that are not expressed via FSTs, namely the lexicon,  the hierarchy and the knowledge base. In this section we will
 see how the information is to be stored in these resources and which is their role. A paragraph is also devoted to the role of syntax in Pinocchio.
\par }\pard\plain \s68\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs36\lang1024 {\lang2057 3.1 Lexical Information
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 In current IE systems, the degree of lexicalization is very high; this means that the lexical information pervades the whole system at many levels. In PINOCCHIO 
lexical information is defined in two main resources: the lexicon and the KB.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104260}3.1.1 Lexical Information in  the Lexicon{\*\bkmkend _Toc433104260}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The lexicon provides the mapping between strings (e.g. lemmata)  and:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 syntactic information: lexical category, DAGs (e.g. feature structures for the unifier), etc.

\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 semantic information: a link to a concept in the KB;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
syntactic-semantic information: correlation between the syntactic arguments and the corresponding roles in the semantic representation (i.e. in the Quasi Logical Form); for example it can establish that for a specific verb \ldblquote X\rdblquote 
, the internal argument (i.e. the object complement in the sentence) is realised in the QLF as the ACTEE of the verb concept). 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 For example for the lemma  }{\f3\lang2057 comprare }{\lang2057 (to buy), the lexicon provides the following information:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (TFS-LEX-ITEM :NAME "comprare" :TYPE "verb-transitive" 
\par }\pard \s62\li720\ri102\sb40\sa40\nowidctlpar {\lang2057  :CONSTRAINTS
\par  ((@VERB2 |$?pred| (SEMLEX::TO-BUY) 
\par           |$?arg1| (GUM::ACTOR) 
\par           |$?arg2| (GUM::ACTEE))
\par   & (@LOGICAL-FORM))
\par :DOCUMENTATION "to buy is a transitive verb" 
\par :COMMENT "void" :COMPILE-FLAG T)
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This states that this is a transitive verb; the concept in the KB it is referring to is }{\f3\fs20\lang2057 SEMLEX::TO-BUY}{\lang2057 , and the mapping between arguments and roles is that 
the first syntactic argument refers to the slot }{\f3\fs20\lang2057 GUM::ACTOR}{\lang2057 , while the second one refers to the }{\f3\fs20\lang2057 GUM::ACTEE}{\lang2057 .
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The lexicon can contain three types of entries:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
lemmata: lemmata that are interesting for the current template application can be defined  in the lexicon;
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 lexical categories (e.g. \ldblquote !}{\f3\lang2057 common!}{\lang2057 \rdblquote 
): used as default for words   not directly listed in the lexicon but for which the preprocessor provides a lexical category; as default they are currently introduced as \ldblquote !}{\i\lang2057 lex-cat}{\lang2057 !\rdblquote }{\f3\lang2057 .}{\lang2057 

\par {\pntext\pard\plain\f1 \'b7\tab}lexical features (such as }{\f3\lang2057 :fem}{\lang2057 ): used for mapping the morphological features provided by the morphological analyser; as default they are currently introduced as \ldblquote :}{\i\lang2057 feature}{
\lang2057 \rdblquote .
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The lexicon is defined by using  the standard Geppetto syntax. Entries generate at run time lexical edges in the chart with an associated DAG built by using the definition in the lexicon.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104261}3.1.2 Lexical Information in  the Knowledge Base{\*\bkmkend _Toc433104261}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The KB is composed by concepts and relations among concepts.  A concepts provides (among other things) a unique identifier for group o
f words in the lexicon so that this identifier can be used instead of the strings in the system resources (e.g. the FSTs). It also provides relations between concepts (e.g. ISA relations or attributes in concepts filled by other concepts), hence implicitl
y the KB also provides relations between groups of words. To this respect a concept can be also seen as an object equivalent to a synset in Wordnet.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 In the KB, the concept }{\f3\fs20\lang2057 SEMLEX::TO-BUY}{\lang2057  is defined:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (DEFINE-DISJOINT-PRIMITIVE-CONCEPT  'TO-BUY
\par }\pard \s62\li720\ri102\sb40\sa40\nowidctlpar {\lang2057     '(AND TO-ACQUIRE 
\par       (ALL GUM::ACTOR SENTIENT-ENTITY) 
\par       (ALL GUM::ACTEE NEGOTIABLE))
\par     'AZIONE-INTENZIONALE-PARTITION)
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 i.e. it  is a sub-concept of }{\f3\lang2057 to-acquire}{\lang2057  whose actor is restricted to be a }{\f3\lang2057 sentient-entity}{\lang2057 
 (e.g. a person) and the ACTEE is defined as anything that can sold (e.g. an object).
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 From its superconcepts, }{\f3\fs20\lang2057 TO-BUY}{\lang2057   inherits  also other relations, so that its complete definition is the following:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (DEFINE-DISJOINT-PRIMITIVE-CONCEPT  'TO-BUY
\par }\pard \s62\li720\ri102\sb40\sa40\nowidctlpar {\lang2057     '(AND TO-ACQUIRE 
\par       (ALL GUM::ACTOR SENTIENT-ENTITY) 
\par       (ALL GUM::ACTEE NEGOTIABLE))
\par       (ALL IN-CONCRETE-LOCATION LOCATION)
\par       (ALL RELATIVE-TO-TIME-OTHER OR-PERIOD-ACTION)
\par    'AZIONE-INTENZIONALE-PARTITION)
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The two additional slots state that the action of buy can take place in a given moment or action (e.g. \ldblquote in the last month\rdblquote  or \ldblquote during the meeting\rdblquote 
) and in a place (e.g. \ldblquote in a shop\rdblquote ). 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104262}3.1.3 Lexicon Lookup: Normal Words{\*\bkmkend _Toc433104262}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Each lemma is looked for in the Geppetto Lexicon. If the lemma is found, the information contained in the lexicon (the DAG) is 
 associated to the lexical edge in the chart. For polysemous words, more than one edge is created. Edges with equal lexical categories for the same word are collapsed in one edge with more than one DAG. When a word is not present in the dictionary, the as
sociated DAG is that of the lexical entry \ldblquote !}{\i\lang2057 lexical-category}{\lang2057 !\rdblquote ; for example the DAG associated to the word \ldblquote coach\rdblquote 
 (a noun, according to the POS Tagger), is the one that in the lexicon is associated to the entry \ldblquote }{\f3\lang2057 !noun!}{\lang2057 \rdblquote . For this reason in the lexicon there must always be an entry named \ldblquote !}{\i\lang2057 
lexical-category}{\lang2057 !\rdblquote  for each lexical category defined in the Geppetto hierarchy.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 Morphological features are retrieved from the lexicon and their DAGs unified with the current word DAG.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104263}3.1.4 Lexicon Lookup: Named Entities and Other Objects{\*\bkmkend _Toc433104263}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Some particular words are treated in a special way. They are:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 proper names
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 generic NEs
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 organisations
\par {\pntext\pard\plain\f1 \'b7\tab}locations
\par {\pntext\pard\plain\f1 \'b7\tab}persons
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 dates
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 numbers
\par {\pntext\pard\plain\f1 \'b7\tab}currencies
\par {\pntext\pard\plain\f1 \'b7\tab}percentages
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 For these terms the generic lexical entries }{\i\lang2057 !proper!, !number!, !percentage!}{\lang2057  and }{\i\lang2057 !date!}{\lang2057 
 are searched in the lexicon. After that, the logical form in the DAGs retrieved from the lexicon is changed by using a procedure hard-wired in the Geppetto code. The logical form is:
\par }\trowd \trgaph108\trleft1276\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \trbrdrh\brdrs\brdrw15 \trbrdrv\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cellx3395\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8931 \pard \ri100\sb80\sa80\nowidctlpar\intbl {\lang2057 Named Entities (1st case)\cell }\pard 
\ri102\sb80\sa80\sl-180\slmult1\nowidctlpar\intbl {\f3\fs20\lang2057 `((}{\i\f3\fs20\lang2057 NE-type}{\f3\fs20\lang2057  X) 
\par }\pard \ri102\sb80\sa80\sl-180\slmult1\nowidctlpar\intbl {\f3\fs20\lang2057   (,CHART::+HAS-NAME-REL+ Y)
\par   (,GUM::+DOMAIN+ Y X)
\par   (,GUM::+RANGE+ Y }{\i\f3\fs20\lang2057 proper-string}{\f3\fs20\lang2057 )
\par   (,CHART::+NAME+ }{\i\f3\fs20\lang2057 proper-string}{\f3\fs20\lang2057 ))\cell }\pard \intbl {\lang2057 \row }\trowd \trgaph108\trleft1276\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \trbrdrh\brdrs\brdrw15 
\trbrdrv\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx3395\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8931 \pard 
\ri100\sb80\sa80\nowidctlpar\intbl {\lang2057 Named Entities (2nd case)\cell }\pard \ri100\sb80\sa80\sl-180\slmult1\nowidctlpar\intbl {\f3\fs20\lang2057 (,CHART::+NAME+ }{\i\f3\fs20\lang2057 proper-string}{\f3\fs20\lang2057 ))\cell }\pard \intbl {
\lang2057 \row }\pard \ri100\sb80\sa80\nowidctlpar\intbl {\lang2057 Numbers          (1st case)\cell }\pard \ri100\sb80\sa80\sl-180\slmult1\nowidctlpar\intbl {\f3\fs20\lang2057 `((,CHART:: +NUMBER-OR-CURRENCY+ X) 
\par }\pard \ri100\sb80\sa80\sl-180\slmult1\nowidctlpar\intbl {\f3\fs20\lang2057   (,CHART::+VALUE-FOR-AMOUNT+ Y)    
\par   (,GUM::+DOMAIN+ Y X)
\par   (,GUM::+RANGE+ Y }{\i\f3\fs20\lang2057 VALUE}{\f3\fs20\lang2057 )
\par }\pard \ri100\sb80\sa80\sl-180\slmult1\nowidctlpar\intbl {\f3\fs20\lang2057   (,CHART::+VALUE+ }{\i\f3\fs20\lang2057 VALUE}{\f3\fs20\lang2057 ))\cell }\pard \intbl {\lang2057 \row }\trowd \trgaph108\trleft1276\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 
\trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \trbrdrh\brdrs\brdrw15 \trbrdrv\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx3395\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8931 \pard \ri100\sb80\sa80\nowidctlpar\intbl {\lang2057 Numbers         (2nd case)\cell }\pard \ri100\sb80\sa80\sl-180\slmult1\nowidctlpar\intbl {\f3\fs20\lang2057 ((,CHART::+VALUE+ }{\i\f3\fs20\lang2057 VALUE}
{\f3\fs20\lang2057 ))\cell }\pard \intbl {\lang2057 \row }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 QLF for percentages, currencies, etc. are very similar to that of numbers (only the main concept is different). }{\i\f3\lang2057 NE-type}{\f3\lang2057 
 }{\lang2057 in the named entities  (1st case) is either SL::ORGANIZATION, SL::PERSON, SL::LOCATION, SL::NAMED-ENTITY.
\par An ambiguity is introduced for both named entities and numbers as:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 a name can either indicate the named entity (as in \ldblquote IBM is launching a new product
\rdblquote ; where \ldblquote IBM\rdblquote  is the company called \ldblquote IBM\rdblquote ) or the name itself (as in \ldblquote the new company will be called XYZ\rdblquote  where \ldblquote XYZ\rdblquote  is just a name);
\par {\pntext\pard\plain\f1 \'b7\tab}a number/currency/percentage can indicate either a quantity with that amount (as in \ldblquote a loss of 20 million $\rdblquote  where \ldblquote 20 million $\rdblquote 
 indicates a monetary quantity with that amount) or an amount (as in \ldblquote a price of 2$\rdblquote  where \ldblquote 2$\rdblquote  is the amount of the price; a price is a monetary amount).
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 Also named entities and other special objects can have morphological features associated that are retrieved from the lexicon.
\par }\pard\plain \s68\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs36\lang1024 {\lang2057 3.2 The Role of Syntax
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
Many IE systems do not perform any syntactic analysis or limit their analysis to the recognition of some simple phrases. For example FASTUS recognises NPs, VGs, etc. and then applies semantic patterns on them; meta-rules are applied in order to generalise
 patterns by using syntactic variants of the same pattern (e.g. the users writes the pattern for recognising the subcategorization frame of a verb in its active form and the meta-rules automatically produce the pattern for the passive form).
\par Disadvantages of not having a complete syntactic analysis emerge mainly at discourse level, as the lack of a complete parse tree make difficult the reference resolution. On the other hand experience has shown that a complete syntactic analysis is difficul
t to obtain, as parsers are prone to computational complexity and grammars are prone to both overgeneration and gaps.
\par In PINOCCHIO we decided to perform a syntactic analysis as complete and correct as possible. The lesson we learned by the previous versions of PINOCCHIO 
is that a complete syntactic analysis is difficult to obtain by using context free grammars, but that it is possible to obtain a }{\i\lang2057 reasonable}{\lang2057 
 approximation of it  by using FSTs. This document is not the right place for a discussion on how this is possible (see [Ciravegna et al 98a]), we will just do some considerations.
\par The first idea behind Pinocchio\rquote s syntactic analysis is that the result must be functional to the IE task. This means for example that it is important that the pa
rts of the input that are relevant for the IE task must be set in the final parse tree in the correct position. Non relevant parts can be in any positions to the condition that their misplacing is not harmful for the extraction of the relevant information
. For example a typical problem in parsing is that of PP modifiers. There can be a large numbers of non relevant modifiers in a sentence: a complete context free grammar-based parser would try to find the correct place for them by introducing structural a
mbiguity in the results. But structural ambiguity for non relevant modifiers is harmful from an efficiency point of view, but not relevant for the effectiveness of the IE task. The current approach in PINOCCHIO 
is that of attaching only those modifiers that are relevant for the IE task (or domain), leaving unattached the others (or, better, leaving them in a default position in the parse tree). The final tree obtained in this way is what we call }{\i\lang2057 
a sufficiently correct parse tree}{\lang2057 . Moreover modifier attachment is performed by using semantic pattern matching on the parse tree, so to avoid structural ambiguity of any types.
\par The syntactic analysis performed in PINOCCHIO is deterministic, i.e. it always produces at most one parse tree for sentence. 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104264}3.2.1 The Need of a Simple Syntax{\*\bkmkend _Toc433104264}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 It is important to remark again that the syntactic analysis in PINOCCHIO 
is functional to the IE task. This means that it is necessary that the syntax is as simple as possible. Simple from many points of view. First of all from the point of view of the gra
mmar writer. A complex formalism makes the task difficult. But also from the type of grammar to be written. The true syntactic FST grammars are the chunk grammar and the A-structure grammar. The task of the first one is simple: recognising the basic chunk
s, i.e. NPs, and verbal groups. In Italian it is also used to recognise PPs, while in English this is not possible}{\cs26\fs16\up6\lang2057 \chftn {\footnote \pard\plain \s22\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\cs26\fs16\up6 \chftn } {\fs20 
As a matter of fact a sequence PREPOSITION+NP is never ambiguous in Italian while in English the preposition ca ne part of a compound verb. For example in }{\f3\fs20 I give up the task }{\fs20 the term }{\f3\fs20 up }{\fs20 can be ambiguous between a PP (
}{\f3\fs20 up the task}{\fs20 ) and the VG (}{\f3\fs20 I give up}{\fs20 ).}}}{\lang2057 . The task of the second is that of recognising the subcategorization frame of those chunks that have it. Especially at this latter level, the
 complexity of the grammar can grow indefinitely. Complex subcategorization frames can be introduced for verbs, leading to complex grammars. Special cases can be introduced for handling forms rarely (or never) occurring. We designed the grammar in the fol
lowing way: following the 20-80% law, we gather that 80% of the phenomena occurring in a corpus can be covered by a simple grammar (i.e. the 20% of the general grammar needed). The other 20% of the phenomena occurring in a corpus need a large number of ru
le
s, each one rarely applied. The idea is that of correctly covering this 80% of the phenomena, leaving the other 20% be covered by using some recovery rules (the recovery part of the A-structure grammar). Experience has shown that sometimes this choice lea
ds to some incorrectness in the parse tree, but seldom to true mistakes in the IE final result. The advantage is that of having a simple grammar, easy to develop and maintain, and mainly fast when used at run time.
\par }\pard\plain \s3\ri-2\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104265}3.2.1.1 The Current Situation{\*\bkmkend _Toc433104265} 
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 From the point of view of the simplicity of the formalism, PINOCCHIO 
is currently far from what is needed. The FST approach is simple in principle to be used. Unfortunately the Geppetto formalism adopted in the syntactic grammars is difficult to use for a non trained linguist, as it was designed for expert linguists. The f
ormalism was adopted in PINOCCHIO as Geppetto is easier to use than many other systems and moreover it provides a set of tools for helping in development. Moreover it allowed to reuse all the resources previousl
y developed at ITC-irsT. There is an aspect that could be changed to let PINOCCHIO 
meet the requirements of simplicity mentioned above, i.e. introduction of a higher level language for TFL expressions that would allow to ignore the implementation details in the FST rules. This is something we are working on. 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104266}3.2.2 The role of Geppetto{\*\bkmkend _Toc433104266}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Geppetto provides PINOCCHIO with:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the TFL formalism for lexica and grammars;
\par {\pntext\pard\plain\f1 \'b7\tab}a set of specialised editors for the lexicon, the macros and the hierarchy;
\par {\pntext\pard\plain\f1 \'b7\tab}a set of debugging tools (mainly the chart browser that allows to inspect the whole content of the chart);
\par {\pntext\pard\plain\f1 \'b7\tab}the graphers for DAGs and parse trees;
\par {\pntext\pard\plain\f1 \'b7\tab}
the FST technology with the tracers and the debugging tools; the FST technology is not fully integrated in Geppetto from the point of view of the graphic interface, the Pinocchio window is used for compiling and tracing the grammars; }{\b\lang2057 
NOTE! the use of the FST grammars substitute the use of the context free grammar that Geppetto needs by default and also the use of the chart parsers!!!}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}the unifier for feature structure unification;
\par {\pntext\pard\plain\f1 \'b7\tab}the basic chart structure.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 As mentioned in the Geppetto manual [GPT 97], the role of the hierarchy is that of defining the types that can be used in both the lexicon and the grammars, together with their appropriate features. 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104267}3.2.3 The Overall Organisation of the Grammar{\*\bkmkend _Toc433104267}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Here follow some remarks on how the FST grammars for Chunking and A-Structure recognition are currently structured within the Italian version of Pinocchio. 
\par During }{\f3\fs20\lang2057 CHUNKING}{\lang2057  a single level is envisioned. The grammar first of all reco
gnises phenomena involving punctuation (attaching the punctuation symbols to the item immediately preceding it), then VGs (first those with auxiliaries and then simple tenses); after that, NPs, DPs, and finally PPs are recognised.
\par As for A-Structure recognition, as already said, three levels of the grammar can be identified, corresponding to the three different values of the slot }{\f3\fs20\lang2057 :APPLY-WHEN}{\lang2057 , i.e. }{\f3\fs20\lang2057 CLAUSE-LEVEL}{\lang2057 , }{
\f3\fs20\lang2057 SENTENCE-LEVEL}{\lang2057 , and }{\f3\fs20\lang2057 RECOVERY-LEVEL}{\lang2057 .
\par During the first two steps, the FST rules mainly deal with the recognition of subcategorization frames, both for verbs and nouns. During such recognition, the presence of adjuncts is envisioned and they are stored \ldblquote unattached\rdblquote 
 to be processed during further steps of processing (see below the section on Modifier Attachment).
\par The difference between the first two steps (i.e. }{\f3\fs20\lang2057 CLAUSE-LEVEL}{\lang2057  and }{\f3\fs20\lang2057 SENTENCE-LEVEL}{\lang2057 
) is due to the presence of punctuation and other cue words that can split the sentence in different chunks. For instance, the following sentence:
\par }\pard\plain \s62\li720\ri102\sb40\sa40 \f3\fs20\lang1024 {\lang2057 La societa\rquote  nel 1997 ha conseguito un utile di 90 miliardi
\par (lit. The company in 1997 has achieved a profit of 90 billion)
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 can be completely recognised during }{\f3\fs20\lang2057 CLAUSE-LEVEL}{\lang2057  processing. On the other hand, the sentence
\par }\pard\plain \s62\li720\ri102\sb40\sa40 \f3\fs20\lang1024 {\lang2057 La societa\rquote , nel 1997, ha conseguito un utile di 90 miliardi
\par (lit. The company, in 1997, has achieved a profit of 90 billion)
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 cannot be completely recognised during }{\f3\fs20\lang2057 CLAUSE-LEVEL}{\lang2057  processing, because of the presence of commas around the PP }{\f3\fs20\lang2057 nel 1997}{\lang2057 
; the commas make it necessary a further step to completely recognise the sentence.
\par The last step (}{\f3\fs20\lang2057 RECOVERY-LEVEL}{\lang2057 
) is meant to accomplish some special actions, needed when the sentence structure is particularly complex and so some recovery is necessary; currently this level is needed at least for dealing with sentences containing parentheses.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 
\par }\pard\plain \s68\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs36\lang1024 {\lang2057 3.3 The Role of the Knowledge Base
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The knowledge base provides in PINOCCHIO 
the description of the domain. It is composed by four types of objects: concepts, instances of concepts, roles and reified relations [D10.4]. Concepts are used to defi
ne the domain in terms of ISA hierarchies; CAR, ORGANIZATION and MARKET are examples of concepts . Instances are individuals of concepts (MY-CAR is an example). Roles (also called relations or slots)  are used in concepts to define relations with other co
ncepts (OWNED-BY is an example of a role connecting the CAR concept to the PERSON concept). Reified relations are objects that define both a concept and a role with the same name; they allow to consider an object either as a concept or as a role, accordin
g to the context in which it is used. They also allow to define roles with multiple ancestors [D10.4].
\par The knowledge base is used at every stage in processing. It provides the following services:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 query to the ISA hierarchy;
\par {\pntext\pard\plain\f1 \'b7\tab}inspection of concepts/roles and restrictions;
\par {\pntext\pard\plain\f1 \'b7\tab}concept instance assertion at run time;
\par {\pntext\pard\plain\f1 \'b7\tab}predicate evaluation: given a predicate with filler (i.e. a concept, a slot and a filler) it checks the correctness of the assertion in the KB; it is also possible to evaluate multiple predicates for the
 same concept (i.e. two slots and fillers for the same concept);
\par {\pntext\pard\plain\f1 \'b7\tab}
predicate specialisation: given a predicate with filler, it returns the specialisation of the involved predicates: for example if a company produces cars, then it is a car-company. This is done by using the ISA concept hierarchy and the restrictions on th
e concept roles [D7.2].
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The knowledge base is queried at the following stages:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
logical form coherence checking: during parsing (A-structure recognition and Chunking) the QLF is built and its correctness is checked every time the unifier asks for that (i.e. every time a rule requires the unification of variables in the QLF); 
\par {\pntext\pard\plain\f1 \'b7\tab}QLF instance: after A-structure recognition and before modifier attachment the QLF associated to the edges are used to create instances in the KB; during this steps also specialisation is applied on the predicates;
\par {\pntext\pard\plain\f1 \'b7\tab}during the application of the cascades of FSTs, every time the following primitives are used:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 HEAD-SEM, NOT-HEAD-SEM, PREP-SEM for checking the ISA hierarchy;
\par {\pntext\pard\plain\f1 \'b7\tab}BEING, NOT-FILLED for checking the filler of slots of an instance
\par {\pntext\pard\plain\f1 \'b7\tab}SEM, REVERSE-SEM in the actions for filling slots of instances; type specialisation is applied before filling the slot, so the instances used can change type after the filling (they can be specialised).
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 As mentioned the role of the knowledge base is also that of storing some part of the  lexical information (see the paragraph above).
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104268}3.3.1 Why is Knowledge shared between FSTs and the KB?{\*\bkmkend _Toc433104268}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 There seems to be an overlap between the KB content and some of the  FST cascades using semantic information. For example in the KB there can be the following information:
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\f4\fs20 {\pict\wmetafile8\picw11748\pich2011\picwgoal6672\pichgoal1152 \box\brdrs\brdrw15 \picscalex69\picscaley69\piccropl-396\piccropr-20\piccropb-20 
010009000003170200000500110000000000050000000b0200000000050000000c0239004d010400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000007000000fc020000ffffff000000040000002d01000008000000fa0206000100010000000000040000002d010100070000001b04330074001a0001000a00000026060f000a00ffffffff0100000000000a00
000026060f000a00ffffffff00000000000011000000fb02f2ff00000000000090010000000000000031436f7572696572000000040000002d0102000c00000021050c006f7267616e697a6174696f6e2a0007000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000a0000
0026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff000000000000070000001b0433004d011a00f2000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000800000021050400626f64792a0004010a00000026060f000a00ffffffff010000000000
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016042900b00027007900050000001402280042000500000013022800e700040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000
000700000018042f00bc002200af000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000008000000fa02050000000000ffffff00040000002d0103000e000000240305007e000000ea000000ea0019007e0019007e000000
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000021050700626f64792d6f6600100085000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d0101
00030000001e000700000016042900ea002700bb0005000000140228008c0005000000130228001901040000002701ffff07000000fc020000000000000000040000002d010400040000002d0103000c00000024030400f2002800e3002300e3002c00f20028000a00000026060f000a00ffffffff0100000000000c000000
26060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff010000000000040000002701ffff03000000000000000000000000000000000000000000000000060f000a00ffffffff000000000000040000002d010000040000002d010100000000001b04a2014d022d0174010a00000026060f000a
00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000021050800476500706574746f45010a020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b045e01e101390180010000000021050700556e696669657200500199010a00
000026060f000a00ffff00ff0100000000000a00000026060f000a00ffffffff00000000000007000000}}{\lang2057 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 A rule in the modifier attachment grammar can be
\par }\pard\plain \s62\li426\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (DEF-FST-RULE body-of-org
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=SL::BODY> 
\par \tab      EL2 <SPEC=|*|,SYN=\{adjunct relative-clause\}>  
\par \tab      EL3 <SYN=pp,PREP-SEM=SL::OF-PREPO,HEAD-SEM=SL::ORGANIZATION>  )
\par     :ACTION \{(SEM = (EL1(SL::BODY-OF = EL3)))\})
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 i.e. if in the search space there is an instance of BODY and an instance of ORGANIZATION introduced by
 the preposition OF, then fill the slot BODY-OF in the BODY instance by using the ORGANIZATION instance. 
\par The domain definition provides the definition of the concepts, the ISA hierarchy and the role definition. The Modifier attachment rule provides the actual linguistic realisation of the relation. There is no overlapping between the two, except for the fact
 that the rule implicitly states that the filler of the BODY-OF slot is an ORGANIZATION. It is important to remark that the only purpose of the rule is
 that of defining the  linguistic realisation of the attachment. It is the knowledge base that decides if the current instances are of type BODY and ORGANIZATION: maybe they are actually instances of subtypes of them, but the KB is able to cope with this 
fact; moreover it is possible that in the subtypes the actual role name is not BODY-OF; for example for an instance of  Board of Directors (subtype of BODY) the slot name could be BoD-of (where BoD-of is a sub-role of BODY-OF): the KB is able to fill the 
co
rrect slot. The KB is also able to specialise the instance types when filling slots. It is also important to understand that the HEAD-SEM condition in the FST rule are just used for efficiency reasons; they could be omitted and the rule would work in any 
case, as the choice on the element types would be left to the KB; the restrictions on slots of concepts would allow to select the correct element. 
\par }{\b\i\lang2057 The check for mismatches between the rule semantic conditions and the KB is left to the user!
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 Porting PINOCCHIO to New Languages 
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 All the resources in PINOCCHIO must be redefined in porting PINOCCHIO to new languages. The current Italian resources can largely be re-used for the new language.
\par Two main steps are envisaged for changing language:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 re-defining the preprocessor-PINOCCHIO interface;
\par {\pntext\pard\plain\f1 \'b7\tab}re-defining the resources (lexica, hierarchy, part of the KB, FST grammars, etc.). 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The main difficulties in porting PINOCCHIO to new languages are related to the definition of the syntactic part of the resources, i.e. the parts related to Geppetto. In an experiment in porting PINOCCHIO 
to Russian, one month (out of three) was spent in working on the Geppetto hierarchy, one on Chunking and A-structure Recognition. 
\par In the following we will analyse these two main steps.
\par }\pard\plain \s68\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs36\lang1024 {\lang2057 Adapting The Pinocchio-Preprocessor Interface}{\cs26\fs16\up6\lang2057 \chftn {\footnote \pard\plain \s22\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\cs26\fs16\up6 
\chftn } This part was written by Alberto Lavelli}}{\lang2057 
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Here are the instructions for using within PINOCCHIO 
the morphological information provided by the Xerox tools; if you do so, you can build a lexicon consisting of lemmas (plus entries for morphological features) and, during processing, integrate the information pr
ovided by the lemma (syntactic category, subcategorization frame, link to KB, etc.) with the information provided by the morphological features.  Apart from setting the appropriate language using the FACILE interface, you need to produce a mapping between
 Xerox lexical categories and morphological features, on one side, and the syntactic types and morphological entries contained within the Geppetto hierarchy and lexicon, on the other side. To do that you need to copy the file 
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\f3\lang2057 "dam/DAM/code/GEPPETTO/prepro/morph-mapping"}{\lang2057  
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 (which contains the mapping for Italian) in 
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\f3\lang2057 "dam/DAM/code/GEPPETTO/prepro/morph-}{\i\lang2057 YOURLANGUAGE}{\lang2057 " 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 and modify it.
\par In this file, first you find the mapping between Xerox lexical categories and the syntactic types defined in the Geppetto hierarchy and then the mapping between Xerox morphological features and morphological entries within the Geppetto lexicon.
\par In the Italian lexicon, all morphological entries start with a }{\f3\lang2057 ":"}{\lang2057  (this is not a mandatory feature, but was simply done for our own convenience).
\par After that you need to do:
\par }\pard \li720\ri100\sb80\sa80\nowidctlpar {\f3\lang2057 (setq TFS::+morph-mapping-file+ "morph-YOURLANGUAGE")
\par (TFS::init-morph)
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 
Please note that part of the mapping is accomplished procedurally. More specifically, the one that involves the mapping of a lexical category plus a morphological feature to a syntactic type; for example, an article (lexical category "Art") is mapped to t
he type "undef" (i.e. indefinite article) if "Indef" is among its morphological features, to the type "def" otherwise. Such mapping is accomplished wit
hin the code that interfaces with the lexicon (more precisely in the function TFS::convert-lex-features). This solution was chosen as a "quick and dirty" way of solving problems during the development of Pinocchio
; now we are studying how to do that declaratively.
\par Another assumption currently hidden in the code regards the treatment of "generic" lexical entries for words not contained in the lexicon. The solution is that of using the information about the lexical category of a word provided by the Xerox morpholog
ical analyser. If Geppetto doesn't find the lemma corresponding to the word-form in its lexicon, it looks for a generic entry for the lexical category of the word, or better the string of the lexical category with a "!" both at the beginning and at the en
d of the category; for example, if the noun "region" is not in the lexicon, its Xerox lexical category is "Noun", and the mapping between Xerox lexical categories and Geppetto types produces "noun", then Geppetto gets the lexical entry for "!noun!".

\par }\pard\plain \s68\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs36\lang1024 {\lang2057 Reusing the Italian Resources for Development
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Most part of the resources developed for Italian can be reused for building the resources for another language. This has been partially done for English and it worked. Also in porting 
PINOCCHIO to a language such as Russian it worked, even if this required much work.
\par This paragraph is written with the porting to German in mind. I will try to envisage the difficulties in porting the different resources to German. Apologies for errors due to my limited knowledge of German. 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 Reusing the Lexicon
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
Entries in the lexicon cannot be used by simply applying a translation to the Italian lexicon, as they contain information related for example to subcategorization that can change across languages. In any case the Italian lexicon can be a good starting po
int.
\par }{\b\lang2057 A major point to be analysed are German compounds: }{\lang2057 it is not clear to me what is the output of the morphological analyser, so I cannot say how they could be coped with.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 Reusing the KB
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Most part of the KB can be reused as is. The following parts need additions/modifications for new languages:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the lexicalized actions (see the file }{\i\lang2057 lexicalized-actions.lisp}{\lang2057 
) contains mainly subcategorization frames for verbs; it is possible that for a new language some additional (or different) frames are needed;
\par {\pntext\pard\plain\f1 \'b7\tab}the lexicalized relations (see the file }{\i\lang2057 lexicalized-relations.lisp}{\lang2057 ) contain relations such as }{\i\lang2057 DI-PREPO}{\lang2057 , i.e. a concept triggered by - among other words - the \ldblquote di
\rdblquote  Italian preposition. An equivalent }{\i\lang2057 OF-PREPO}{\lang2057  should be defined for example for English. Obviously there is not a one to one mapping between }{\i\lang2057 DI-PREPO }{\lang2057  and }{\i\lang2057 OF-PREPO}{\lang2057 
; this different use is the next point;
\par {\pntext\pard\plain\f1 \'b7\tab}the reified relations (see the file }{\i\lang2057 reified-relations.lisp}{\lang2057 ) are defined by using the lexicalized relations in the ISA hierarchy; for example the reified relation }{\i\lang2057 BODY-OF }{\lang2057 
 is defined as a subtype of }{\i\lang2057 DI-PREPO}{\lang2057 ; this means that it can be lexicalized by using the preposition \ldblquote di\rdblquote  in Italian (in the sentence \ldblquote Il cda della societa`\rdblquote 
, i.e. the board of directors of the company). In English it can be also lexicalized by using \ldblquote of\rdblquote , so the concept }{\i\lang2057 OF-PREPO}{\lang2057  should be added in the super-concept list of }{\i\lang2057 BODY-OF}{
\cs26\i\fs16\up6\lang2057 \chftn {\footnote \pard\plain \s22\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\cs26\fs16\up6 \chftn } Note that the declaration of the lexicalization of the relations is no longer strictly needed by PINOCCHIO 
since V2.0, as it is in any case explicitly indicated in the modifier attachment FST grammar by using the condition PREP-SEM.}}{\lang2057 .
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 Reusing the Syntactic resources
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
Concerning the implemented resources, the Italian hierarchy was derived from a pre-existent hierarchy developed for an HPSG-like grammar. This means that it is very complex and difficult to understand for a non expert. Moreover it is probably unnecessaril
y complex with respect the PINOCCHIO needs. It would probably need a hard reworking that we feel not necessary for IPINOCCHIO yet (as the hierarchy is currently stable since years) but that can be useful in case PINOCCHIO 
is ported to a new language. Anyway, in porting PINOCCHIO 
to English within FACILE, Umist decided to reuse the Italian hierarchy and modify it. It did not required much reworking, but forced the developers to first of all understand the current hierarchy and also the FST resources are now more complex than what 
is probably needed. In another experience in porting PINOCCHIO to Russian (an ITC-irsT internal activity), the same choice
 was done. The hierarchy needed reworking mainly for introducing cases (nominative, accusative, etc.), that are not present in Italian and English but are present in Russian (and German) for nominal phrases. We can provide the Russian hierarchy in case it
 is needed for German.
\par The syntactic FST grammars can be largely reused, especially the chunking grammar. In case the new language uses cases, then the conditions using cases and percolation of cases are to be added. As far I can foresee with my limited kno
wledge of German, Dps and verb groups are very similar; also Pps can be recognised independently as they are never ambiguous. The use of auxiliaries presents some problems as they force the main verb to be at the end of the sentence, then the verb group c
an only be recognised during A-structure recognition.
\par At the A-structure level there should be some differences: first of all the use of cases for arguments; then }{\i\lang2057 trennbar}{\lang2057  verbs; they need some care, as the semantic of the verb cannot be decided until the s
eparable part has been found, hence the verbal argument cannot be filled before (as the KB is checked during parsing). This is a problem only if the compound verb has different restrictions with respect to the root verb. This is something that has to be d
iscussed. Also the recognition of the VG at A-structure level needs some care.
\par Modifier attachment should not constitute a problem, except for the need of case checking. As far as I know the search space for Pps (or NP with associated case) follows the same rules for Italian}{\cs26\fs16\up6\lang2057 \chftn {\footnote \pard\plain 
\s22\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\cs26\fs16\up6 \chftn } The search space for modifiers is currently hardwired in the code and cannot be changed easily. It would be a major problem if the modifiers needed a different search space.}}{
\lang2057 . To some extent most of the rules in the FST grammar can be reused, provided that the lexicalization is changed (i.e. the content of the PREP-SEM condition) and conditions for cases are added.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 Reusing the Other Domain-dependent Resources
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
Neither the porting to English, nor the porting to Russian have currently reached the level of development necessary to thoroughly use the other FST domain-dependent grammars (normalization, discourse processing and template filling). As far as I can und
erstand most of the normalization rules can be reused as they are, so as the semantic rules in discourse processing and template creation/filling rules, as they only loosely depend from the actual lexicalization of the forms. The syntactic rules for disco
urse processing can probably be largely reused as they were derived from a general theory. A major problem that I can foresee is that in Italian the use of pronouns in financial texts is very rare, so we did not have pronouns recognition in the current 
Italian version. We mainly 
cope with nominal anaphora and Zero Pronouns; zero pronouns are treated as implicit relations. The pronoun resolution is something that is to be considered anew, even if should not constitute a problem. Again the search space for reference resolution is c
urrently hardwired in the lisp code and cannot be easily changed. It is based on a general theory, so it should work also for other languages, but this must be checked.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104269}4. Porting PINOCCHIO to new Applications{\*\bkmkend _Toc433104269}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Much effort has been spend in order to make PINOCCHIO portable across the domains and the applications. A PINOCCHIO 
 application is a set of resources and modules used to fill different template associated to different text classes. Different template applications are defined by defining the associated resources and templates.
\par All the resources are precompiled and transformed into Lisp code at system start-up time. When  at  run-time SAM classifies an incoming text, PINOCCHIO is able to load in no time the correct resources and modules for the given class.
\par The PINOCCHIO resources and modules can be divided in three classes:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 template application dependent
\par {\pntext\pard\plain\f1 \'b7\tab}template application independent
\par {\pntext\pard\plain\f1 \'b7\tab}user dependent
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 
The terms template application dependent/independent are here to be seen with respect to their use, i.e. it is considered independent a resource/module that is shared by all the applications. Obviously also the basic PINOCCHIO 
machinery (i.e. the FST machinery, Geppetto and the Knowledge Representation Tool) are independent from any PINOCCHIO application and will not be considered here.
\par }{\f4\fs20 {\pict\wmetafile8\picw22895\pich15134\picwgoal12980\pichgoal8580 \box\brdrs\brdrw15 \picscalex59\picscaley59\piccropl-303\piccropr-336 
0100090000033c0d000009002d0000000000050000000b02b8faf8f5050000000c02680d48140400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0000000000
0005000000090211edf7002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000ffffff0000000000f0000000f0000000f0000000f00000000f0000000f0000000f0000000f000000040000002d01000008000000fa02060008000000000000000400
00002d010100070000001b0431047c04ea0184000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000fc02000000ff00000000040000002d01020004000000f0010000070000001b0442007c0400fc84000a00000026060f000a00ffffffff0100000000000a0000
0026060f000a00ffffffff000000000000070000001b042204f1f9bafbf9f50a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000ffffff000000
0000f0000000f0000000f0000000f00000000f0000000f0000000f0000000f000000040000002d01000004000000f0010200070000001b04fe0241ff99fc49fb0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000fc020000ffffff000000040000002d01020004
000000f0010000070000001b042bff99f91ffe51f60500000009020000000015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d0100000c00000021050c005072652d6368756e6b696e67c8fe98f60a00000026060f000a00ffffffff0100000000000a00
000026060f000a00ffffffff000000000000070000001b04980399f94d0251f60c00000021050b00412d53747275637475726500c902c3f60c00000021050b005265636f676e6974696f6e006303b8f60a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b0425
fee9fed5fca1fb0b000000210509004d6f646966696572200053fd4dfc0b00000021050a004174746163686d656e74edfd16fc0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b046b00e9fe25ffa1fb0c00000021050b005072656c696d696e617279009eff
13fc0b00000021050900526561736f6e696e6700380033fc0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04520199f9460051f60a0000002105080043
68756e6b696e67ef00f4f60a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016041102400ab8faf8f5030000001e000700000016045502f5f74a01ecf70500000014024b00f1f70500000013025403f1f7040000002701ffff040000002701ffff030000001e00
0700000016042008400ab8faf8f5040000002d01010007000000fc020100000000000000040000002d01030008000000fa0206000100010000000000040000002d01040004000000f00101000c00000024030400f1f74c0213f8d501cef7d501f1f74c0207000000fc020000000000000000040000002d01010008000000fa
02050000000000ffffff00040000002d0105000c00000024030400f1f74d0214f8d501cef7d501f1f74d020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016042008fcfab8faf8f508000000fa0206000800000000000000040000002d010600030000001e00
070000001604e7ff40fbdeff05fa050000001402e3ffd6f8050000001302e3ff6ffc040000002701ffff040000002701ffff030000001e000700000016042008400ab8faf8f5040000002d010600040000002d010300040000002d01040004000000f00106000c0000002403040037fbe3ffc0fac0ffc0fa050037fbe3ff04
0000002d010100040000002d0105000c0000002403040038fbe3ffc0fac0ffc0fa060038fbe3ff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01020008000000fa0206000800000000000000040000002d010600070000001b041bfd99f90ffc51f60400
00002d0100000b00000021050a0050726570617273696e67b8fcdff60a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001604dafd400ab8faf8f5030000001e000700000016041efef5f713fdecf705000000140214fcf1f70500000013021dfff1f70400000027
01ffff040000002701ffff030000001e000700000016042008400ab8faf8f5040000002d010600040000002d010300040000002d01040004000000f00106000c00000024030400f1f715fe13f89efdcef79efdf1f715fe040000002d010100040000002d0105000c00000024030400f1f716fe14f89efdcef79efdf1f716fe
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000015000000fb0290ff000000000000bc02020000000000001054696d6573204e657720526f6d616e000000040000002d
01060004000000f00100000a0000002105070047656e6572616c00ce061efe0e00000021051000446f6d61696e20446570656e64656e7454071efe0d00000021050e005573657220446570656e64656e74da071efe0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000400
00002d01020008000000fa0206000800000000000000040000002d010000070000001b04a2fd24044bfcdc0015000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f00106000b0000002105090053796e74616374696300cdfc8e010c0000
0021050c0052756c65732028646973632967fd48010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000160475fe400ab8faf8f5030000001e00070000001604b9fe8002adfd7702050000001402adfc7c02050000001302b9ff7c02040000002701ffff04000000
2701ffff030000001e000700000016042008400ab8faf8f5040000002d010000040000002d010300040000002d01040004000000f00100000c000000240304007c02b0fe9e0239fe590239fe7c02b0fe040000002d010100040000002d0105000c000000240304007c02b1fe9f0239fe590239fe7c02b1fe0a00000026060f
000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01020008000000fa0206000800000000000000040000002d010000070000001b04f9ff2404aefedc00040000002d0107000d00000021050d00284469736329204d6572676520002aff15010b00000021050900496e7374616e
63657300c4ff8e010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b048f02e9fe8301a1fb0a0000002105080053656d616e746963df0153fc0c00000021050c0052756c65732028646973632979020dfc0a00000026060f000a00ffffffff0100000000000a
00000026060f000a00ffffffff00000000000005000000090211edf7002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000ffffff0000000000f0000000f0000000f0000000f00000000f0000000f0000000f0000000f000000040000002d010600
070000001b0493013d0a5cfb45060a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01020004000000f0010600070000001b04d3fee5099afd9d06050000000902000000000a0000002105080054656d706c6174650dfe4b070a000000210507004d65726769
6e6700a7fe60070a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04befce50993fb9d060b00000021050a00496e7374616e63652026fffb26070a0000002105070046696c6c696e670099fc92070a00000026060f000a00ffffffff0100000000000a000000
26060f000a00ffffffff0000000000000700000016045efd400ab8faf8f5030000001e00070000001604a2fd4508b6fc3608050000001402d6fb330805000000130282fe4808040000002701ffff040000002701ffff030000001e000700000016042008400ab8faf8f5040000002d010000040000002d010300040000002d
01040004000000f00100000c00000024030400400899fd5f0821fd1a0823fd400899fd040000002d010100040000002d0105000c0000002403040041089afd600821fd1a0823fd41089afd0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000015000000fb02b0ff00000000
0000bc02000000000000001054696d6573204e657720526f6d616e000000040000002d01000004000000f00107000e0000002105100054656d706c6174652046696c6c696e671dfb22070a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01020008000000fa
0206000800000000000000040000002d010600070000001b043401e50903009d0615000000fb0280ff0000000000009001000000000000001054696d6573204e657720526f6d616e000000040000002d01070004000000f00100000c00000021050b00496e666f726d6174696f6e0072000b070a000000210508005265636f
766572790c0148070a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001604a6ff400ab8faf8f5030000001e00070000001604eaff4108dffe3808050000001402e0fd3d08050000001302e9003d08040000002701ffff040000002701ffff030000001e00070000
0016042008400ab8faf8f5040000002d010600040000002d010300040000002d01040004000000f00106000c000000240304003d08e1ff5f086aff1a086aff3d08e1ff040000002d010100040000002d0105000c000000240304003d08e2ff60086aff1a086aff3d08e2ff0a00000026060f000a00ffffffff010000000000
0a00000026060f000a00ffffffff000000000000040000002d01020008000000fa0206000800000000000000040000002d010000070000001b04b90324046f02dc00040000002d010700090000002105050046696e616c00ea02f8010b00000021050900526561736f6e696e670084036e010a00000026060f000a00ffffff
ff0100000000000a00000026060f000a00ffffffff000000000000070000001604f5ff400ab8faf8f5030000001e000700000016043900f5f72effecf70500000014022ffef1f70500000013023801f1f7040000002701ffff040000002701ffff030000001e000700000016042008400ab8faf8f5040000002d0100000400
00002d010300040000002d01040004000000f00100000c00000024030400f1f7300013f8b9ffcef7b9fff1f73000040000002d010100040000002d0105000c00000024030400f1f7310014f8b9ffcef7b9fff1f731000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007
0000001604fcfe400ab8faf8f508000000fa0206000800000000000000040000002d010000030000001e0007000000160440ff45fd35fe3cfd05000000140236fd41fd0500000013023f0041fd040000002701ffff040000002701ffff030000001e000700000016042008400ab8faf8f5040000002d010000040000002d01
0300040000002d01040004000000f00100000c0000002403040041fd37ff63fdc0fe1efdc0fe41fd37ff040000002d010100040000002d0105000c0000002403040041fd38ff64fdc0fe1efdc0fe41fd38ff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016
043c01400ab8faf8f508000000fa0206000800000000000000040000002d010000030000001e00070000001604800145fd75003cfd05000000140276ff41fd0500000013027f0241fd040000002701ffff040000002701ffff030000001e000700000016042008400ab8faf8f5040000002d010000040000002d0103000400
00002d01040004000000f00100000c0000002403040041fd770163fd00011efd000141fd7701040000002d010100040000002d0105000c0000002403040041fd780164fd00011efd000141fd78010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a
00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016049a01400ab8faf8f508000000fa0206000800000000000000040000002d010000030000001e00070000001604de0181025a007802050000001402e2fe7e0205000000130256037b02040000002701ffff040000002701ffff0300
00001e000700000016042008400ab8faf8f5040000002d010000040000002d010300040000002d01040004000000f00100000c000000240304007c02d5019e025e0159025e017c02d501040000002d010100040000002d0105000c000000240304007c02d6019f025e0159025e017c02d6010a00000026060f000a00ffffff
ff0100000000000a00000026060f000a00ffffffff00000000000007000000160420084200b8faf8f508000000fa0206000800000000000000040000002d010000030000001e000700000016043cfe860033fe4bff05000000140238fe1cfe05000000130238feb501040000002701ffff040000002701ffff030000001e00
0700000016042008400ab8faf8f5040000002d010000040000002d010300040000002d01040004000000f00100000c000000240304007d0038fe060015fe06005afe7d0038fe040000002d010100040000002d0105000c000000240304007e0038fe060015fe06005bfe7e0038fe0a00000026060f000a00ffffffff010000
0000000a00000026060f000a00ffffffff0000000000000700000016042008cc05b8faf8f508000000fa0206000800000000000000040000002d010000030000001e0007000000160490001006870030050500000014028a005c040500000013028d00e406040000002701ffff040000002701ffff030000001e0007000000
16042008400ab8faf8f5040000002d010000040000002d010300040000002d01040004000000f00100000c0000002403040007068b00900568009005ad0007068b00040000002d010100040000002d0105000c0000002403040008068c00900568009005ae0008068c000a00000026060f000a00ffffffff0100000000000a
00000026060f000a00ffffffff00000000000008000000fa0206000800000000000000040000002d010000030000001e000700000016041d0334058b00270505000000140205fe3505050000001302a3052605040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000
00000000030000001e000700000016041f033305160386040500000014021b03d4050500000013021b03e503040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000fc02000000ff00000000040000002d010600070000001b04dd06a2fd6f06ea
fb0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000005000000090211edf7002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000ffffff0000000000f0000000f0000000f0000000f00000000f00
00000f0000000f0000000f000000040000002d01080004000000f0010600070000001b046807a2fdfa06eafb0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000050000000902fc0128002d0000004201050000002800000008000000080000000100010000000000200000
0000000000000000000000000000000000ffffff0000000000ff000000ef000000c7000000830000000100000083000000c7000000ef000000040000002d01060004000000f0010800070000001b04f807a2fd8a07eafb0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000
070000001b047d04430aaf024b060a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01020004000000f0010600070000001b043804eb090703a30605000000090200000000040000002d0107000a0000002105080054656d706c617465760351070c00000021
050c0050726573656e746174696f6e100406070a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000700000016046b02400ab8faf8f5030000001e00070000001604af024108a4013808050000001402a5003d08050000001302ae033d08040000002701ffff040000002701
ffff030000001e000700000016042008400ab8faf8f5040000002d010000040000002d010300040000002d01040004000000f00100000c000000240304003d08a6025f082f021a082f023d08a602040000002d010100040000002d0105000c000000240304003d08a70260082f021a082f023d08a7020a00000026060f000a
00ffffffff0100000000000a00000026060f000a00ffffffff010000000000040000002701ffff030000000000000000000000000000003b020500000014022e0014020500000013022e008902040000002701ffff000000002d010300040000002d0104000c000000240304006b022e005c022a00000233006b022e000a00
000026060f000a00ffffffff0100000000000a00000000060f000a00ffffffff000000000000040000002d010000040000002d0101000000000018044700cb021a006b0208000000210504004c6973702d008c020800000021050400436f64653b008a020a00000026060f000a00ffffffff0100000000000a00000026060f
000a00ffffffff000000000000030000001e0007000000}}{\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104270}4.1 DOMAIN INDEPENDENT RESOURCES{\*\bkmkend _Toc433104270}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Are common to all the classes:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 All the Geppetto resources, i.e.:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 Lexicon
\par {\pntext\pard\plain\f1 \'b7\tab}Hierarchy
\par {\pntext\pard\plain\f1 \'b7\tab}Macros
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the Knowledge Base
\par {\pntext\pard\plain\f1 \'b7\tab}the following  FST grammars:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 preparser
\par {\pntext\pard\plain\f1 \'b7\tab}prechunker
\par {\pntext\pard\plain\f1 \'b7\tab}chunk grammar
\par {\pntext\pard\plain\f1 \'b7\tab}A-structure Recognition grammar
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the Lisp code for generating the MUC-compatible output.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 These resources are shared by all the template applications.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104271}4.2 DOMAIN DEPENDENT RESOURCES{\*\bkmkend _Toc433104271}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Are template application dependent:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the following  FST resources:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 Modifier Attachment
\par {\pntext\pard\plain\f1 \'b7\tab}Normalizer
\par {\pntext\pard\plain\f1 \'b7\tab}template creation
\par {\pntext\pard\plain\f1 \'b7\tab}discourse processing (both SEM-COREF and SYN-COREF)
\par {\pntext\pard\plain\f1 \'b7\tab}template filling
\par {\pntext\pard\plain\f1 \'b7\tab}template merging
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 A copy of the above resources is to be generated for each new template application.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104272}4.3 USER-DEPENDENT MODULES{\*\bkmkend _Toc433104272}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The only user dependent modules are currently the modules used for presenting the user with PINOCCHIO results. The currently available modules are presented in one the next sections. 

\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104273}5. Evaluating PINOCCHIO by using the MUC scorer{\*\bkmkend _Toc433104273}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Since V2.0 it is possible to evaluate the PINOCCHIO results by using the MUC scorer V3.1. [Douthat98].
\par The output provided by PINOCCHIO is compatible with the input required by the MUC scorer. This means that PINOCCHIO results can be automatically evaluated against a user defined tagged corpus.
\par The evaluation procedure is sketched in the next figure. It requires four files to be defined:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the corpus
\par {\pntext\pard\plain\f1 \'b7\tab}the scorer configuration file
\par {\pntext\pard\plain\f1 \'b7\tab}the response keys: the answer as provided by the user;
\par {\pntext\pard\plain\f1 \'b7\tab}the system responses: the file in which the system will place its answers.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The latter three are the standard files for the MUC scorer (see [Douthat98]).
\par 
\par }{\f4\fs20 {\pict\wmetafile8\picw17463\pich15134\picwgoal9900\pichgoal8580 \box\brdrs\brdrw15 \picscalex68\picscaley68\piccropl-773\piccropt-269\piccropr151\piccropb-185 
0100090000033806000008002d0000000000050000000b0200000000050000000c02ad01ef010400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000c00000026060f000e00544e50500400040000
00010001000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff00000000000007000000fc020000fc0128000000040000002d01000008000000fa0206000100010000000000040000002d010100070000001b044d01090116017e000a00000026060f000a00ffffffff0100000000000a00
000026060f000a00ffffffff000000000000070000001b048e008b005800000015000000fb02f6ff000000000000bc02000000000000001254696d6573204e657720526f6d616e000000040000002d0102000d00000021050d0050524550524f43455353494e470075001b000a00000026060f000a00ffffffff0100000000
000a00000026060f000a00ffffffff00000000000007000000fc020000ffffff000000040000002d01030004000000f0010000070000001b0485007e0060000b0015000000fb02f0ff0000000000009001000000000000001254696d6573204e657720526f6d616e000000040000002d01000004000000f00102000d000000
21050d0050726570726f636573736f7220006d001900090000002105060026202044414d810027000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b044401fd001f018a000b00000021050a004d55432053636f72657236019a000a00000026060f000a00ff
ffffff0100000000000a00000026060f000a00ffffffff00000000000007000000fc020100000000000000040000002d010200070000001804e8007d00b7001000090000002105060053797374656dca002e000b00000021050900526573706f6e73657300dd0024000a00000026060f000a00ffffffff0100000000000a00
000026060f000a00ffffffff000000000000030000001e00070000001604ab0046008f00440005000000140273004500050000001302c7004500040000002701ffff07000000fc020000000000000000040000002d01040008000000fa02050000000000ffffff00040000002d0105000c000000240304004500b3004900a4
004100a4004500b3000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e000700000016045300b90029004b00050000001402ffff27010500000013027d00ddff040000002701ffff040000002d0105000c00000024030400430056005300
55004f004d00430056000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010300040000002d0101000700000018042b000601000099000900000021050600436f727075731a00b8000a00000026060f000a00ffffffff0100000000000a00000026060f000a
00ffffffff0000000000002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000ffffff0000000000cc000000cc000000cc000000cc000000cc000000cc000000cc000000cc000000040000002d010600070000001b048e008d01580002010a000000
26060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01020004000000f0010600070000001804e8008101b7001401080000002105040055736572ca003b010b00000021050900526573706f6e73657300dd0028010a00000026060f000a00ffffffff0100000000000a0000
0026060f000a00ffffffff000000000000030000001e00070000001604ad004b019100490105000000140275004a01050000001302c9004a01040000002701ffff040000002d010400040000002d0105000c000000240304004a01b5004e01a6004501a6004a01b5000a00000026060f000a00ffffffff0100000000000a00
000026060f000a00ffffffff000000000000040000002d010300040000002d010100070000001b048500810160000e010b00000021050a004b657920546167676572770021010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e0007000000160453003e0128
00e400050000001402fdff8a000500000013027e009801040000002701ffff040000002d010400040000002d0105000c00000024030400470158003b014d0037015500470158000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e000700
0000160411014901e600e400050000001402bb00ae010500000013023c017f00040000002701ffff040000002d0105000c00000024030400dc001501ec001401e8000c01dc0015010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e0007
000000160410019c00e7004600050000001402be00f0ff0500000013023901f200040000002701ffff040000002d0105000c00000024030400a500150199000a0195001201a50015010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e00
0700000016047301ad004c016a000500000014029a0127000500000013022501f000040000002701ffff040000002d0105000c0000002403040062007801710074016d006d01620078010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d010100030000001e
00070000001604760116014c01d80005000000140222019a00050000001302a0015401040000002701ffff040000002d0105000c000000240304001e017d01140170010f0178011e017d010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01020004000000
2d010100070000001804aa019d0079013000090000002105060053636f726573960151000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001804ad0156017c01e90009000000210506005265706f72748f0109010a0000002105070053756d6d61727900a301ff
000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000015000000fb02f2ff000000000000bc02020000000000001254696d6573204e657720526f6d616e000000040000002d01060004000000f001000009000000210506006d616e75616c2e01ad010b000000210509006175
746f6d61746963003f01ad010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000ffffff0000000000cc000000cc000000cc000000cc000000cc
000000cc000000cc000000cc000000040000002d010000070000001b0430019e01220167010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000fc020000fc0128000000040000002d01070004000000f0010000070000001b0441019e01340167010a0000002606
0f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000040000002d01020004000000f0010700070000001804e800fb00b7008e0015000000fb02f0ff0000000000009001000000000000001254696d6573204e657720526f6d616e000000040000002d01000004000000f00106000d00000021
050d00436f6e66696775726174696f6e00ca009700080000002105040046696c65dd00b7000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016040c01c500e600c300050000001402c000c4000500000013023201c400040000002701ffff0400
00002d010400040000002d0105000c00000024030400c3001401c8000501bf000501c30014010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000c00000026060f000e00544e5050040004000000000000000a00000026060f000a00ffffffff0100000000000400000027
01ffff0300000000000000000000000000000000000000000000000a00000026060f000a00ffffffff000000000000070000001b04befce50900fb9d060b00000021050a00496e7374616e63652026fffb26070a0000002105000046696c6c696e670099fc92070a00000026060f000a00ffffffff0100000000000a000000
26060f000a00ffffffff0000000000000700000016045efd400a00faf8f5030000001e00070000001604a2fd4508b6fc3608050000001402d6fb000805000000130282fe4808040000002701ffff040000002701ffff0300000000000700000016042008400ab8faf8f5040000002d010000040000002d010300}}{
\lang2057 
\par Depending on how the corpus is provided (i.e. via the FACILE integrated environment or via the Geppetto Interface), the syntax of the corpus can change. The Geppetto Interface requires a corpus as a file composed by four lines for each text:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057  text identifier
\par  text class
\par  text body 
\par  blank line
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 where }{\f3\fs20\lang2057 text identifier}{\lang2057  is a sequence of character ([A-Z]}{\f1\lang2057  \'bb}{\lang2057  [a-z]}{\f1\lang2057  \'bb}{\lang2057 [0-9])}{\lang2057\super +}{
\lang2057 
\par and }{\f3\fs20\lang2057 text class}{\lang2057  is a label (i.e. a not quoted Lisp symbol) identifying a class
\par and }{\f3\fs20\lang2057 text body}{\lang2057  is the body of the text written on a single line.
\par The MUC experiment can be invoked by using the Pinocchio Window (menu Test). For each run the following information is provided: 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the cpu and user time spent by the system for analysing each text;
\par {\pntext\pard\plain\f1 \'b7\tab}the cpu and user time spent for analysing the whole corpus;
\par {\pntext\pard\plain\f1 \'b7\tab}in the directory USER::* MUC-TEST-DIR* the following files are produced:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 scores: the MUC score file (containing  the standard MUC measures (P, R, F, etc.);
\par {\pntext\pard\plain\f1 \'b7\tab}report_summary: the file showing the differences between the user responses and the user responses.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104274}6. Evaluation of IPINOCCHIO V3.0{\*\bkmkend _Toc433104274}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 IPINOCCHIO (PINOCCHIO 
for Italian) has been tested on 95 texts in the BONDS domain taken from ANSA (40 news), Radiocor (36 news) and Il SOLE 24 Ore (19 articles, just the relevant part for the bond domain). The texts were manually tagged with the correct answers, then the syst
em was run on the plain texts and the MUC scorer (V3.1) used to evaluate the effectiveness of the analysis. Formally the results are:
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\lang2057  P=80 \tab  R=72 \tab  F(1)=76
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar\pvpara\phpg\posx720\posy538\absh4177\absw5569\dxfrtext180\dfrmtxtx180\dfrmtxty0 {\pard\plain \qc\ri100\sb80\sa80\nowidctlpar\pvpara\phpg\posx720\posy538\absh4177\absw5569\dxfrtext180\dfrmtxtx180\dfrmtxty0 
\f8\lang1024 {\object\objemb\objsetsize\objw4813\objh4501\objcropt300\objcropl48{\*\objclass Excel.Chart.5}{\*\objdata 01050000020000000e000000457863656c2e43686172742e3500000000000000000000c80000
d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff27000000fefffffffeffffff05000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a0000001b0000001c0000001d0000001e00
00001f00000020000000210000002200000023000000240000002500000026000000fefffffffeffffff290000002a0000002b0000002c0000002d0000002e0000002f000000300000003100000032000000330000003400000035000000360000003700000038000000390000003a0000003b0000003c0000003d000000
3e0000003f00000040000000feffffff42000000430000004400000045000000460000004700000048000000490000004a0000004b0000004c0000004d0000004e0000004f000000500000005100000052000000530000005400000055000000560000005700000058000000590000005a0000005b0000005c0000005d00
00005e0000005f000000600000006100000062000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e007400720079000000029e00000117000000b7000000c90000019800000128000002370000006a000000290000007a0000015916000500ffffffffffffffff020000001108020000000000c00000000000004600000000000000070000016386af
a3bdd2c6be0103000000800100000000002c01004f006c0065000000001e0000002d0000030000000240000000e10000000000000157000000bf0000002b0000006e000000010000002800000013000000480a000201ffffffffffffffffffffffff0000004dffffffb10000006000000094000000140000000000000000
000000000000000000000000140000000000008203005000490043000000018c000002a6000001a1000000ca000001000000020b000000b500000102000001060000023c000000d80000039c00000031000001270a0002010100000004000000ffffffff0000001e00000015000000760000004000000099000000000000
00000000000000000000010000004c0000000000000d42006f006f006b00000003400000000000000109000001f70000005a000001600000015900000170ffffffe3000001100000007d0000000300000030000002460a000201ffffffffffffffffffffffff00000010000001050000005c000000bf0000006b00000000
00000000000000000000000004000000c2440000000000b0feffffff02000000feffffff04000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0100000200000000000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff09000600000000000000000000004c000000000000000000080028210000021f0000cc120000941100000000
0000000000000000000000000000e8030000e8030000300000002c01000000000000000000000900090009000900d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff090006000000000000000000000001000000010000000100feff030a0000ffffffff1108020000000000c000000000000046
1a0000004d6963726f736f667420457863656c20352e3020436861727400060000004269666635000e000000457863656c2e43686172742e350000000000d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff090006000000000000020300d0cf11e0a1b11ae10000000000000000000000000000
00003b000300feff090006000000000000000000000001000000010000000000000000100000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff09080800000505006c09c90742000200e4049c0002000e00de00080008b50000100000041900020000001200020000001300020000003d001200000000009c1524153c0000000000010058024000020000008d000200
00002200020000000e0002000100da000200000031001400c8000000ff7f900100000000001205417269616c31001400c8000100ff7fbc0200000000001205417269616c31001400c8000200ff7f900100000000001205417269616c31001400c8000300ff7fbc0200000000001205417269616c31001400c8000000ff7f
900100000000001205417269616c31001400a0000000ff7f900100000000001205417269616c31001400a0000100ff7fbc0200000000001205417269616c31001400c8000100ff7fbc0200000000001205417269616c31001400c8000000ff7f900100000002001205417269616c1e041c00050019224c2e225c20232c23
23303b5c2d224c2e225c20232c2323301e04210006001e224c2e225c20232c2323303b5b5265645d5c2d224c2e225c20232c2323301e04220007001f224c2e225c20232c2323302e30303b5c2d224c2e225c20232c2323302e30301e042700080024224c2e225c20232c2323302e30303b5b5265645d5c2d224c2e225c20
232c2323302e30301e043c002a00395f2d224c2e225c202a20232c2323305f2d3b5c2d224c2e225c202a20232c2323305f2d3b5f2d224c2e225c202a20222d225f2d3b5f2d405f2d1e042a002900275f2d2a20232c2323305f2d3b5c2d2a20232c2323305f2d3b5f2d2a20222d225f2d3b5f2d405f2d1e0444002c00415f
2d224c2e225c202a20232c2323302e30305f2d3b5c2d224c2e225c202a20232c2323302e30305f2d3b5f2d224c2e225c202a20222d223f3f5f2d3b5f2d405f2d1e0432002b002f5f2d2a20232c2323302e30305f2d3b5c2d2a20232c2323302e30305f2d3b5f2d2a20222d223f3f5f2d3b5f2d405f2de000100000000000
f5ff2000c020000000000000e000100001000000f5ff20f4c020000000000000e000100001000000f5ff20f4c020000000000000e000100002000000f5ff20f4c020000000000000e000100002000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020
000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000
e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e00010000000000001002000c020000000000000e000100005002b00f5ff20f8c020000000000000e000100005002900f5ff20f8c020000000000000e000100005002c00f5ff20f8c020000000000000e00010000500
2a00f5ff20f8c020000000000000e000100005000900f5ff20f8c02000000000000093020400108003ff93020400118006ff93020400128004ff93020400138007ff93020400008000ff93020400148005ff85000d00ad0400000000065368656574310a00000009080800000510006c09c9070d00020001000c00020064
000f000200010011000200000010000800fca9f1d24d62503f5f00020001002a00020000002b000200010082000200000080000800000000000000000025020400000008018c0004000100270081000200c104140003000226411500080007506167652026508300020000008400020000004d00ca0000004170706c6520
4c61736572577269746572204949204e545800000000000000000a035703440084001f5b000001000900990b35086400010001000000010000000000030005002c010000fe010100000000000000000009000900090009000900090009000900090009000900090009000900000000000000000000000000000000000000
0000000000000000000000000000000000000000000000005802c2015a005a0000000000000001000100000000000100010000000000a801000000000000000001006500a100220009006400010001000100020000000000000000000000e03f000000000000e03f010055000200080000020a000000600000000e000000
08021000000000000e0008010000c8340001308908021000010000000e00080100002f1b0001000008021000020000000e0008010000e8a80001000008021000030000000e0008010000c8340001070508021000040000000e00080100004f150001000208021000050000000e0008010000704200010002080210000600
00000e0008010000030900011f0008021000070000000e000801000097460001004008021000080000000e0008010000feff00016f4e08021000090000000e0008010000064000010000080210000a0000000e0008010000000000010a0b080210000b0000000e000801000030000001cf4c080210000c0000000e000801
000000000001dc05080210000d0000000e0008010000000000012f0b080210000e0000000e000801000000000001360e080210000f0000000e000801000000000001380208021000100000000e0008010000400600010b0008021000110000000e000801000000000001ff0408021000120000000e000801000090290001
004008021000130000000e000801000005000001fecf08021000140000000e000801000018020001000008021000150000000e000801000000000001070508021000160000000e0008010000b50d0001208b08021000170000000e0008010000001b0001000008021000180000000e00080100004eaa0001400608021000
190000000e0008010000181200010000080210001a0000000e0008010000400600011802080210001b0000000e000801000000000001a68a080210001c0000000e0008010000d74700012488080210001d0000000e0008010000010000010000080210001e0000000e0008010000000000010300080210001f0000000e00
08010000000000010300be002200000000000f000f000f000f000f000f000f000f000f000f000f000f000f000f000d00bd005a00010000000f00000036400f00000034400f00000034400f00000000000f00000000000f00000000400f00000000000f00000024400f0000c056400f00000059400f00000022400f000000
00000f00000000000f00000022400d00bd005a00020000000f00000030400f00000033400f00000028400f00000000000f000000f03f0f00000008400f00000018400f00000018400f0000c052400f0000804f400f00000033400f00000040400f00000020400f00008046400d00bd005a00030000000f00000028400f00
000028400f00000028400f00000000000f00000000000f00000000000f00000000000f00000010400f00000059400f00000059400f00000000000f00000000000f00000000000f00000000000d00bd005a00040000000f0000002a400f0000002c400f0000002a400f00000000000f00000000000f00000000000f000000
f03f0f00000010400f00000059400f00004057400f00000000000f0000001c400f00000000000f0000001c400d00bd005a00050000000f00000033400f00000020400f00000018400f00000000000f000000f03f0f00000028400f000000f03f0f00000024400f00000040400f0000c052400f0000804f400f0000002a40
0f0000002c400f00008051400d00bd005a00060000000f00000020400f00000020400f00000020400f00000000000f00000000000f00000000000f00000000000f00000000400f00000059400f00000059400f00000000000f00000000000f00000000000f00000000000d00bd005a00070000000f00000020400f000000
1c400f0000001c400f00000000000f00000000000f000000f03f0f00000000000f00000000400f00000056400f00000059400f0000002a400f00000000000f00000000000f0000002a400d00bd005a00080000000f00000022400f0000002c400f0000001c400f00000000000f00000000000f00000000400f0000001c40
0f00000014400f00008053400f00000049400f00000036400f00000049400f00000000000f0000004c400d00bd005a00090000000f00000020400f0000001c400f0000001c400f00000000000f00000000000f000000f03f0f00000000000f00000000400f00000056400f00000059400f0000002a400f00000000000f00
000000000f0000002a400d00bd005a000a0000000f00000024400f00000030400f00000024400f00000000000f00000000000f00000000000f00000018400f00000000400f00000059400f0000804f400f00000000000f00000043400f00000000000f00000043400d00bd005a000b0000000f0000003f400f0000003b40
0f0000003a400f00000000000f00000000000f00000014400f000000f03f0f00000014400f00000055400f00000058400f00000030400f00000010400f00000000000f00000033400d00bd005a000c0000000f00000031400f0000001c400f0000001c400f00000000000f00000000000f00000024400f00000000000f00
000010400f00008044400f00000059400f0000804d400f00000000000f00000000000f0000804d400d00bd005a000d0000000f00000039400f00000038400f00000033400f00000000000f00000008400f00000008400f00000000400f00000031400f00000053400f0000c053400f00000028400f00000020400f000000
2c400f0000003e400d00bd005a000e0000000f00000031400f00000031400f0000002c400f00000000000f000000f03f0f00000000400f00000000400f0000002a400f00008054400f00008054400f00000028400f00000028400f0000001c400f0000003a400d00bd005a000f0000000f00000022400f00000022400f00
000022400f00000000000f00000000000f00000000000f00000000000f00000014400f00000059400f00000059400f00000000000f00000000000f00000000000f00000000000d00bd005a00100000000f00000022400f0000002a400f0000001c400f00000000000f000000f03f0f000000f03f0f00000014400f000000
10400f00008053400f0000004b400f00000026400f00000043400f0000002a400f00000049400d00bd005a00110000000f00000014400f00000014400f00000014400f00000000000f00000000000f00000000000f00000000000f000000f03f0f00000059400f00000059400f00000000000f00000000000f0000000000
0f00000000000d00bd005a00120000000f00000020400f00000020400f00000020400f00000000000f00000000000f00000000000f00000000000f00000014400f00000059400f00000059400f00000000000f00000000000f00000000000f00000000000d00bd005a00130000000f0000003e400f0000002e400f000000
24400f00000000000f000000f03f0f00000033400f00000010400f0000003a400f00008040400f0000c050400f0000804f400f0000003b400f00000022400f0000c051400d00bd005a00140000000f00000022400f00000020400f00000020400f00000000000f00000000000f000000f03f0f00000000000f0000001040
0f00004056400f00000059400f00000026400f00000000000f00000000000f00000026400d00bd005a00150000000f00000020400f00000018400f00000018400f00000000000f00000000000f00000000400f00000000000f00000008400f0000c052400f00000059400f00000039400f00000000000f00000000000f00
000039400d00bd005a00160000000f00000018400f0000001c400f00000014400f00000000000f000000f03f0f00000000000f000000f03f0f00000000400f0000c054400f0000c051400f00000000000f0000002c400f00000031400f0000003d400d00bd005a00170000000f00000024400f00000022400f0000002240
0f00000000000f00000000000f000000f03f0f00000000000f00000014400f00008056400f00000059400f00000024400f00000000000f00000000000f00000024400d00bd005a00180000000f00000020400f0000001c400f0000001c400f00000000000f00000000000f000000f03f0f00000000000f0000001c400f00
000056400f00000059400f0000002a400f00000000000f00000000000f0000002a400d00bd005a00190000000f00000022400f0000002c400f0000001c400f00000000000f000000f03f0f000000f03f0f00000018400f00000008400f00008053400f00000049400f00000026400f00008045400f0000002a400f000080
4a400d00bd005a001a0000000f00000037400f00000037400f00000030400f00000000000f00000000400f00000014400f00000014400f00000008400f00008051400f00008051400f00000036400f00000036400f00000026400f00008045400d00bd005a001b0000000f00000026400f00000030400f0000001c400f00
000000000f00000000400f00000000400f0000001c400f00000010400f00000050400f00000046400f00000032400f00000046400f00000036400f0000804e400d00bd005a001c0000000f00000024400f0000002c400f00000018400f00000000000f000000f03f0f00000008400f0000001c400f00000022400f000000
4e400f00008045400f0000003e400f00000049400f0000002c400f00004050400d00bd005a001d0000000f00000032400f0000002a400f00000020400f00000000000f00000000400f00000020400f00000008400f00000028400f00000046400f0000004f400f00000046400f00000037400f00000034400f0000004f40
0d00bd005a001e0000000f00000022400f00000022400f00000020400f00000000000f000000f03f0f00000000000f00000000000f00000008400f00004056400f00004056400f00000000000f00000000000f00000026400f00000026400d00bd005a001f0000000f00000022400f00000024400f00000020400f000000
00000f00000000000f000000f03f0f00000000400f00000026400f00004056400f00000054400f00000026400f00000034400f00000000000f0000003b400d00d7004400080e00006c0226005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e00
5e005e005e005e005e0008021000200000000e0008010000c8340001308908021000210000000e00080100002f1b0001000008021000220000000e0008010000e8a80001000008021000230000000e0008010000c8340001070508021000240000000e00080100004f150001000208021000250000000e00080100007042
0001000208021000260000000e0008010000030900011f0008021000270000000e000801000097460001004008021000280000000e0008010000feff00016f4e08021000290000000e0008010000064000010000080210002a0000000e0008010000000000010a0b080210002b0000000e000801000030000001cf4c0802
10002c0000000e000801000000000001dc05080210002d0000000e0008010000000000012f0b080210002e0000000e000801000000000001360e080210002f0000000e000801000000000001380208021000300000000e0008010000400600010b0008021000310000000e000801000000000001ff040802100032000000
0e000801000090290001004008021000330000000e000801000005000001fecf08021000340000000e000801000018020001000008021000350000000e000801000000000001070508021000360000000e0008010000b50d0001208b08021000370000000e0008010000001b0001000008021000380000000e0008010000
4eaa0001400608021000390000000e0008010000181200010000080210003a0000000e0008010000400600011802080210003b0000000e000801000000000001a68a080210003c0000000e0008010000d74700012488080210003d0000000e0008010000010000010000080210003e0000000e0008010000000000010300
080210003f0000000e0008010000000000010300bd005a00200000000f00000022400f00000020400f0000001c400f00000000000f00000000000f00000000400f000000f03f0f00000008400f00008053400f00000056400f00000036400f0000002a400f00000000000f0000003e400d00bd005a00210000000f000000
22400f00000020400f00000020400f00000000000f00000000000f000000f03f0f00000000000f00000008400f00004056400f00000059400f00000026400f00000000000f00000000000f00000026400d00bd005a00220000000f0000003c400f00000033400f00000031400f00000000000f000000f03f0f0000002440
0f000000f03f0f0000001c400f0000804e400f00004056400f00000042400f00000014400f00000018400f00008044400d00bd005a00230000000f00008043400f00000040400f00000035400f00000000000f0000001c400f00000026400f00000010400f00000028400f0000004b400f00008050400f0000003c400f00
00002a400f00000039400f00008049400d00bd005a00240000000f00000020400f0000001c400f0000001c400f00000000000f00000000000f000000f03f0f00000000000f000000f03f0f00000056400f00000059400f0000002a400f00000000000f00000000000f0000002a400d00bd005a00250000000f0000003240
0f0000002c400f00000024400f00000000000f00000000400f00000018400f00000000400f00000032400f0000004c400f0000c051400f00008040400f0000002c400f00000031400f00000049400d00bd005a00260000000f00000020400f00000020400f00000014400f00000000000f00000000400f000000f03f0f00
0000f03f0f00000008400f0000804f400f0000804f400f0000002a400f0000002a400f0000003d400f00000046400d00bd005a00270000000f00000022400f00000018400f00000014400f00000000000f000000f03f0f00000008400f00000000000f00000020400f0000004c400f0000c054400f00008040400f000000
00000f00000031400f00000046400d00bd005a00280000000f00000020400f00000032400f00000014400f00000000000f00000000000f00000008400f0000002a400f00000000400f0000804f400f0000003c400f00000043400f00000052400f00000000000f00000053400d00bd005a00290000000f00000020400f00
000022400f00000018400f00000000000f00000000000f00000000400f00000008400f00000020400f0000c052400f0000c050400f00000039400f00008040400f00000000000f00008046400d00bd005a002a0000000f00000024400f00000020400f00000020400f00000000000f00000000000f00000000400f000000
00000f00000008400f00000054400f00000059400f00000034400f00000000000f00000000000f00000034400d00bd005a002b0000000f00000032400f00000028400f00000022400f00000000000f00000008400f00000018400f00000000000f000000f03f0f00000049400f0000c052400f00008040400f0000000000
0f00000039400f00000049400d00bd005a002c0000000f00000054400f00008051400f00008050400f00000000000f00000008400f00000026400f000000f03f0f00000026400f0000c054400f00008057400f0000002c400f000000f03f0f00000010400f00000033400d00bd005a002d0000000f00000020400f000000
1c400f00000018400f00000000000f000000f03f0f000000f03f0f00000000000f00000008400f0000c052400f00008055400f0000002a400f00000000000f0000002c400f00000039400d00bd005a002e0000000f00000018400f00000018400f00000018400f00000000000f00000000000f00000000000f0000000000
0f00000000400f00000059400f00000059400f00000000000f00000000000f00000000000f00000000000d00bd005a002f0000000f0000002e400f00000024400f0000001c400f00000000000f000000f03f0f0000001c400f00000000400f00000018400f00008047400f00008051400f00008047400f00000034400f00
00002a400f0000804d400d00bd005a00300000000f0000001c400f00000018400f00000010400f00000000000f00000000400f000000f03f0f00000000000f00000000400f0000804c400f0000c050400f0000002c400f00000000000f00008040400f00008045400d00bd005a00310000000f00000024400f0000002640
0f00000014400f00000000000f00000000000f00000014400f00000018400f00000008400f00000049400f00008046400f00000049400f0000804b400f00000000000f00004051400d00bd005a00320000000f0000004d400f00008045400f00000043400f00000000000f00000014400f0000002e400f00000000000f00
00001c400f00008050400f00000056400f0000003a400f00000000000f00000028400f00000041400d00bd005a00330000000f0000804a400f00000042400f00008040400f00000000000f00000008400f00000031400f00000000000f00000000400f0000004f400f00000057400f00000040400f00000000000f000000
20400f00000043400d00bd005a00340000000f00000022400f00000022400f00000018400f00000000000f00000000400f000000f03f0f000000f03f0f000000f03f0f0000c050400f0000c050400f00000026400f00000026400f00000039400f00000044400d00bd005a00350000000f00000020400f00000014400f00
000010400f00000000000f000000f03f0f00000008400f00000000000f000000f03f0f00000049400f00000054400f00000043400f00000000000f00000034400f00000049400d00bd005a00360000000f00000008400f00000000000f00000000000f00000000000f00000000000f00000008400f00000000000f000000
f03f0f00000000000f00000000000f00000059400f00000000000f00000000000f00000059400d00bd005a00370000000f00000018400f00000014400f00000014400f00000000000f00000000000f000000f03f0f00000000000f00000000400f0000c054400f00000059400f00000031400f00000000000f0000000000
0f00000031400d00bd005a00380000000f00000020400f0000001c400f00000018400f00000000000f000000f03f0f000000f03f0f00000000000f00000000400f0000c052400f00008055400f0000002a400f00000000000f0000002c400f00000039400d00bd005a00390000000f00000026400f00000026400f000000
24400f00000000000f000000f03f0f00000000000f00000000000f00000008400f0000c056400f0000c056400f00000000000f00000000000f00000022400f00000022400d00bd005a003a0000000f0000003b400f00000035400f00000035400f00000000000f00000000000f00000018400f00000000000f0000000840
0f00008053400f00000059400f00000036400f00000000000f00000000000f00000036400d00bd005a003b0000000f00000032400f00000030400f0000002e400f00000000000f000000f03f0f00000000400f00000000000f00000000400f0000c054400f00008057400f00000026400f00000000000f00000018400f00
000031400d00bd005a003c0000000f00008044400f00000041400f0000003f400f00000000000f000000f03f0f00000022400f00000000400f00000008400f00000053400f0000c056400f00000036400f00000018400f00000008400f0000003c400d00bd005a003d0000000f00000022400f00000022400f0000002040
0f00000000000f000000f03f0f00000000000f00000000000f00000008400f00004056400f00004056400f00000000000f00000000000f00000026400f00000026400d00bd005a003e0000000f0000001c400f0000001c400f00000014400f00000000000f000000f03f0f000000f03f0f000000f03f0f00000000400f00
00c051400f0000c051400f0000002c400f0000002c400f00000031400f00000043400d00bd005a003f0000000f00000000000f00000000000f00000000000f00000000000f00000000000f00000000000f00000000000f000000f03f0f00000000000f00000000000f00000000000f00000000000f00000000000f000000
00000d00d7004400400e00006c025e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e0008021000400000000e0008010000c8340001308908021000410000000e00080100002f1b0001000008021000420000000e00
08010000e8a80001000008021000430000000e0008010000c8340001070508021000440000000e00080100004f150001000208021000450000000e000801000070420001000208021000460000000e0008010000030900011f0008021000470000000e000801000097460001004008021000480000000e0008010000feff
00016f4e08021000490000000e0008010000064000010000080210004a0000000e0008010000000000010a0b080210004b0000000e000801000030000001cf4c080210004c0000000e000801000000000001dc05080210004d0000000e0008010000000000012f0b080210004e0000000e000801000000000001360e0802
10004f0000000e000801000000000001380208021000500000000e0008010000400600010b0008021000510000000e000801000000000001ff0408021000520000000e000801000090290001004008021000530000000e000801000005000001fecf08021000540000000e00080100001802000100000802100055000000
0e000801000000000001070508021000560000000e0008010000b50d0001208b08021000570000000e0008010000001b0001000008021000580000000e00080100004eaa0001400608021000590000000e0008010000181200010000080210005a0000000e0008010000400600011802080210005b0000000e0008010000
00000001a68a080210005c0000000e0008010000d74700012488080210005d0000000e0008010000010000010000080210005e0000000e0008010000000000010300080210005f0000000e0008010000000000010300bd005a00400000000f00000022400f00000020400f00000020400f00000000000f00000000000f00
0000f03f0f00000000000f000000f03f0f00004056400f00000059400f00000026400f00000000000f00000000000f00000026400d00bd005a00410000000f00000024400f00000022400f00000020400f00000000000f00000000000f00000000400f000000f03f0f00000010400f00000054400f00004056400f000000
34400f00000026400f00000000000f0000003b400d00bd005a00420000000f0000001c400f0000001c400f00000018400f00000000000f000000f03f0f00000000000f00000000000f00000000400f00008055400f00008055400f00000000000f00000000000f0000002c400f0000002c400d00bd005a00430000000f00
000020400f00000024400f0000001c400f00000000000f00000000000f000000f03f0f00000008400f00000000400f00000056400f00008051400f0000002a400f0000003e400f00000000000f00000042400d00bd005a00440000000f00000022400f0000001c400f0000001c400f00000000000f00000000000f000000
00400f00000000000f000000f03f0f00008053400f00000059400f00000036400f00000000000f00000000000f00000036400d00bd005a00450000000f0000001c400f0000001c400f00000010400f00000000000f000000f03f0f00000000400f00000000400f00000000400f0000804c400f0000804c400f0000003d40
0f0000003d400f00000034400f0000004c400d00bd005a00460000000f00000024400f00000030400f0000001c400f00000000000f00000000400f000000f03f0f0000001c400f000000f03f0f00008051400f00000046400f00000024400f00000046400f00000036400f0000804d400d00bd005a00470000000f000000
22400f00000022400f00000020400f00000000000f000000f03f0f00000000000f00000000000f000000f03f0f00004056400f00004056400f00000000000f00000000000f00000026400f00000026400d00bd005a00480000000f00000020400f00000026400f00000020400f00000000000f00000000000f0000000000
0f00000008400f000000f03f0f00000059400f00004052400f00000000000f0000003b400f00000000000f0000003b400d00bd005a00490000000f00000041400f0000003e400f0000003a400f00000000000f00000000400f00000018400f00000000400f00000000400f00000053400f0000c055400f00000032400f00
00001c400f0000001c400f0000003c400d00bd005a004a0000000f00000018400f0000001c400f00000014400f00000000000f000000f03f0f00000000000f000000f03f0f00000000400f0000c054400f0000c051400f00000000000f0000002c400f00000031400f0000003d400d00bd005a004b0000000f0000001840
0f00000018400f00000018400f00000000000f00000000000f00000000000f00000000000f000000f03f0f00000059400f00000059400f00000000000f00000000000f00000000000f00000000000d00bd005a004c0000000f0000001c400f0000001c400f00000018400f00000000000f000000f03f0f00000000000f00
000000000f00000000400f00008055400f00008055400f00000000000f00000000000f0000002c400f0000002c400d00bd005a004d0000000f00000018400f00000018400f00000014400f00000000000f000000f03f0f00000000000f00000000000f000000f03f0f0000c054400f0000c054400f00000000000f000000
00000f00000031400f00000031400d00bd005a004e0000000f0000001c400f00000026400f00000014400f00000000000f00000000000f00000000400f00000018400f000000f03f0f0000c051400f00008046400f0000003d400f0000804b400f00000000000f0000004f400d00bd005a004f0000000f0000003f400f00
00003b400f00000035400f00000000000f00000010400f00000018400f00000000400f00000014400f00000051400f00008053400f00000033400f0000001c400f00000030400f00000042400d00bd005a00500000000f0000001c400f0000001c400f0000001c400f00000000000f00000000000f00000000000f000000
00000f000000f03f0f00000059400f00000059400f00000000000f00000000000f00000000000f00000000000d00bd005a00510000000f0000001c400f00000024400f00000014400f00000000000f000000f03f0f000000f03f0f00000010400f000000f03f0f0000c051400f00000049400f0000002c400f0000004440
0f00000031400f0000804b400d00bd005a00520000000f0000001c400f0000001c400f00000018400f00000000000f000000f03f0f00000000000f00000000000f000000f03f0f00008055400f00008055400f00000000000f00000000000f0000002c400f0000002c400d00bd005a00530000000f00000014400f000000
00400f00000000400f00000000000f00000000000f00000008400f00000000000f000000f03f0f00000044400f00000059400f0000004e400f00000000000f00000000000f0000004e400d00bd005a00540000000f00000020400f00000014400f00000010400f00000000000f000000f03f0f00000008400f0000000000
0f00000008400f00000049400f00000054400f00000043400f00000000000f00000034400f00000049400d00bd005a00550000000f0000001c400f00000020400f0000001c400f00000000000f00000000000f00000000000f000000f03f0f000000f03f0f00000059400f00000056400f00000000000f0000002a400f00
000000000f0000002a400d00bd005a00560000000f00000020400f00000008400f00000008400f00000000000f00000000000f00000014400f00000000000f000000f03f0f00000043400f00000059400f0000804f400f00000000000f00000000000f0000804f400d00bd005a00570000000f0000001c400f0000002640
0f00000018400f00000000000f00000000000f000000f03f0f00000014400f0000001c400f00008055400f0000804b400f0000002c400f00008046400f00000000000f00000049400d00bd005a00580000000f00000018400f00000018400f00000018400f00000000000f00000000000f00000000000f00000000000f00
000008400f00000059400f00000059400f00000000000f00000000000f00000000000f00000000000d00bd005a00590000000f00000020400f00000018400f00000014400f00000000000f000000f03f0f00000000400f00000000000f00000020400f0000804f400f0000c054400f00000039400f00000000000f000000
31400f00000043400d00bd005a005a0000000f00000018400f00000008400f00000008400f00000000000f00000000000f00000008400f00000000000f000000f03f0f00000049400f00000059400f00000049400f00000000000f00000000000f00000049400d00bd005a005b0000000f00000032400f00000028400f00
000022400f00000000000f00000000000f00000022400f00000008400f000000f03f0f00000049400f0000c052400f00000049400f00000039400f00000000000f0000804c400d00bd005a005c0000000f00000020400f00000018400f00000014400f00000000000f000000f03f0f00000000400f00000000000f000000
00400f0000804f400f0000c054400f00000039400f00000000000f00000031400f00000043400d00bd005a005d0000000f00000014400f00000000400f00000000400f00000000000f00000000000f00000008400f00000000000f00000000400f00000044400f00000059400f0000004e400f00000000000f0000000000
0f0000004e400d00bd005a005e0000000f00000020400f00000018400f00000010400f00000000000f000000f03f0f00000008400f000000f03f0f000000f03f0f00000049400f0000c050400f00000043400f00000031400f00000034400f0000004c400d00bd005a005f0000000f00000018400f00000018400f000000
14400f00000000000f000000f03f0f00000000000f00000000000f00000000400f0000c054400f0000c054400f00000000000f00000000000f00000031400f00000031400d00d7004400400e00006c025e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e005e00
5e005e005e005e005e005e005e005e005d003e000100000005000500170600000d00000000000500cd00110069000000000000000000404101014000000100000400de129f4c54accf4b000000009c059f4c09080800000520006c09c90714000300022641150008000750616765202650830002000000840002000000a1
0022000000000001000100010004000d000000000000000000e03f000000000000e03f00003300020003001200020000001600020001001700020001020110020000000210100000000000000000007899f9005866e60033100000a00004000100010003100800010001005f005f003310000051101a0000020000000012
003affff00002b00d74c0510000000000000090d10030000000051101d0001020000000015003bffff00004700d74c05100000000001005f00090951101d0002020000000015003bffff00000000000005100000000001005f00080806100800ffff00000000000045100200000034100000441003000a00004610020001
00411012000000d6020000ea020000280b0000c1090000331000004f101400020002008b01000078020000e60c0000820b00001d101200000000000000000000000000000000000000331000001f102a00000000000000000000000000000000000000000000000000000000000000000000000000000000001f011e101a
00020003010000000000000000000000000000000000000000230021100200010007100a00000000000000ffff0100341000001d101200010000000000000000000000000000000000331000001f102a00000000000000000000000000000000000000000000000000000000000000000000000000000000001f011e101a
00020003010000000000000000000000000000000000000000230021100200010007100a00000000000000ffff01003410000025101a00020201000000000076070000fa0d0000de010000240100008100331000004f101400020002000000000000000000300000001b0000002610020007005110080000010000000000
000d100900000006526563616c6c271006000300000000003410000025101a00020201000000000081000000560600000d010000ea0200008902331000004f1014000200020000000000000000001b000000450000002610020007005110080000010000000000000d100c00000009507265636973696f6e271006000200
00000000341000003510000032100400000003003310000007100a00808080000000000000000a100c00e3e3e300000000000100000034100000141014000000000000000000000000000000000000000000331000001b10000022100a0000000000000000000f0015101400920a0000be0500001e000000160000000701
0200331000004f10140005000100950a0000c2050000020000000100000025101a0002020100ffffff00baffffffb4ffffff0000000000000000b000331000004f10140002000200000000000000000000000000000000002610020009005110080000010000000000003410000032100400000002003310000007100a00
000000000000ffff01000a100c00ffffff00ffffff0001000000341000003410000024100200020025101a000202010000000000baffffffb4ffffff0000000000000000b100331000004f101400020002000000000000000000000000000000000026100200060051100800000100000000000034100000061008000000
0000fdff00003310000007100a00000000000500ffff00000a100c00ffffff0000000000010001000b100200000009100c0000000000000000000200010034100000341000003410000025101a0002020100000000008a0700004c0000008b000000700100008100331000004f1014000200020000000000000000000e00
0000220000002610020008005110080000010000000000000d1004000000012027100600010000000000341000003410000000000a000000be0000000100a8000a0000003e020a00b60600000000000000001d000f000300000000000001000000000000000a00000003020e00020000000000000000000000594003020e
00030000000000000000000000594003020e00040000000000000000000000404003020e00050000000000000000000000594003020e00060000000000000000000000564003020e00070000000000000000000080534003020e00080000000000000000000000564003020e00090000000000000000000000594003020e
000a0000000000000000000000554003020e000b0000000000000000000080444003020e000c0000000000000000000000534003020e000d0000000000000000000080544003020e000e0000000000000000000000594003020e000f0000000000000000000080534003020e00100000000000000000000000594003020e
00110000000000000000000000594003020e00120000000000000000000080404003020e00130000000000000000000040564003020e001400000000000000000000c0524003020e001500000000000000000000c0544003020e00160000000000000000000080564003020e00170000000000000000000000564003020e
00180000000000000000000080534003020e00190000000000000000000080514003020e001a0000000000000000000000504003020e001b00000000000000000000004e4003020e001c0000000000000000000000464003020e001d0000000000000000000040564003020e001e0000000000000000000040564003020e
001f0000000000000000000080534003020e00200000000000000000000040564003020e002100000000000000000000804e4003020e002200000000000000000000004b4003020e00230000000000000000000000564003020e002400000000000000000000004c4003020e002500000000000000000000804f4003020e
002600000000000000000000004c4003020e002700000000000000000000804f4003020e002800000000000000000000c0524003020e00290000000000000000000000544003020e002a0000000000000000000000494003020e002b00000000000000000000c0544003020e002c00000000000000000000c0524003020e
002d0000000000000000000000594003020e002e0000000000000000000080474003020e002f00000000000000000000804c4003020e00300000000000000000000000494003020e00310000000000000000000080504003020e003200000000000000000000004f4003020e003300000000000000000000c0504003020e
00340000000000000000000000494003020e00350000000000000000000000000003020e003600000000000000000000c0544003020e003700000000000000000000c0524003020e003800000000000000000000c0564003020e00390000000000000000000080534003020e003a00000000000000000000c0544003020e
003b0000000000000000000000534003020e003c0000000000000000000040564003020e003d00000000000000000000c0514003020e003e0000000000000000000000000003020e003f0000000000000000000040564003020e00400000000000000000000000544003020e00410000000000000000000080554003020e
00420000000000000000000000564003020e00430000000000000000000080534003020e004400000000000000000000804c4003020e00450000000000000000000080514003020e00460000000000000000000040564003020e00470000000000000000000000594003020e00480000000000000000000000534003020e
004900000000000000000000c0544003020e004a0000000000000000000000594003020e004b0000000000000000000080554003020e004c00000000000000000000c0544003020e004d00000000000000000000c0514003020e004e0000000000000000000000514003020e004f0000000000000000000000594003020e
005000000000000000000000c0514003020e00510000000000000000000080554003020e00520000000000000000000000444003020e00530000000000000000000000494003020e00540000000000000000000000594003020e00550000000000000000000000434003020e00560000000000000000000080554003020e
00570000000000000000000000594003020e005800000000000000000000804f4003020e00590000000000000000000000494003020e005a0000000000000000000000494003020e005b00000000000000000000804f4003020e005c0000000000000000000000444003020e005d0000000000000000000000494003020e
005e00000000000000000000c0544003020e005f0000000000000000000000594003020e006000000000000000000000804f4003020e00610000000000000000000000594003020e00620000000000000000000040574003020e006300000000000000000000c0524003020e00640000000000000000000000594003020e
00650000000000000000000000594003020e00660000000000000000000000494003020e00670000000000000000000000594003020e006800000000000000000000804f4003020e00690000000000000000000000584003020e006a0000000000000000000000594003020e006b00000000000000000000c0534003020e
006c0000000000000000000080544003020e006d0000000000000000000000594003020e006e00000000000000000000004b4003020e006f0000000000000000000000594003020e00700000000000000000000000594003020e007100000000000000000000c0504003020e00720000000000000000000000594003020e
00730000000000000000000000594003020e007400000000000000000000c0514003020e00750000000000000000000000594003020e00760000000000000000000000594003020e00770000000000000000000000494003020e00780000000000000000000080514003020e00790000000000000000000000464003020e
007a0000000000000000000080454003020e007b00000000000000000000004f4003020e007c0000000000000000000040564003020e007d0000000000000000000000544003020e007e0000000000000000000000564003020e007f0000000000000000000000594003020e00800000000000000000000040564003020e
00810000000000000000000080504003020e00820000000000000000000000594003020e008300000000000000000000c0514003020e008400000000000000000000804f4003020e008500000000000000000000c0544003020e008600000000000000000000003c4003020e008700000000000000000000c0504003020e
00880000000000000000000000594003020e008900000000000000000000c0524003020e008a0000000000000000000080574003020e008b0000000000000000000080554003020e008c0000000000000000000000594003020e008d0000000000000000000080514003020e008e00000000000000000000c0504003020e
008f0000000000000000000080464003020e00900000000000000000000000564003020e00910000000000000000000000574003020e009200000000000000000000c0504003020e00930000000000000000000000544003020e00940000000000000000000000000003020e00950000000000000000000000594003020e
00960000000000000000000080554003020e009700000000000000000000c0564003020e00980000000000000000000000594003020e00990000000000000000000080574003020e009a00000000000000000000c0564003020e009b0000000000000000000040564003020e009c00000000000000000000c0514003020e
009d0000000000000000000000000003020e009e0000000000000000000000594003020e009f0000000000000000000040564003020e00a00000000000000000000080554003020e00a10000000000000000000080514003020e00a20000000000000000000000594003020e00a300000000000000000000804c4003020e
00a40000000000000000000000464003020e00a50000000000000000000040564003020e00a60000000000000000000040524003020e00a700000000000000000000c0554003020e00a800000000000000000000c0514003020e00a90000000000000000000000594003020e00aa0000000000000000000080554003020e
00ab00000000000000000000c0544003020e00ac0000000000000000000080464003020e00ad0000000000000000000080534003020e00ae0000000000000000000000594003020e00af0000000000000000000000494003020e00b00000000000000000000080554003020e00b10000000000000000000000594003020e
00b20000000000000000000000544003020e00b30000000000000000000000564003020e00b40000000000000000000000594003020e00b500000000000000000000804b4003020e00b60000000000000000000000594003020e00b700000000000000000000c0544003020e00b80000000000000000000000594003020e
00b900000000000000000000c0524003020e00ba00000000000000000000c0544003020e00bb0000000000000000000000594003020e00bc00000000000000000000c0504003020e00bd00000000000000000000c054400a0000003e020a00b60600000000000000001d000f000300000000000001000000000000000a00
0000d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03004d004500540041000000000000990000009b000000a7000000b4000000c8000000ca000000cd000000d4000000dd000000fb000001360000
01480000014b0c0002000300000006000000ffffffff000001ad000001e0000002300000027b0000028f0000000000000000000000000000000028000000283100000000000103005000720069006e0074000000001b0000001b0000001b0000001b0000003200000036000000390000001b0000001b0000004a0000004f
0000004f000000640e000200ffffffffffffffffffffffff0000004f000000820000004f0000004f00000089000000000000000000000000000000004100000048420000000000ad010043006f006d0070004f0062006a00000000bc000000bf000000ca000000df000000e3000000fc00000106000001190000011d0000
01220000015c000000cd120002010500000007000000ffffffff000001e6000001ea000001f7000002080000021f00000000000000000000000000000000030000005a000000000002f203004f0062006a0049006e0066006f00000003db000003ec00000411000004acfffffe7efffffed2fffffedefffffef6fffffefb
ffffff05ffffff1cffffff3612000200ffffffffffffffffffffffffffffffceffffffd1ffffffd4ffffffd5ffffffde0000000000000000000000000000000005000000040000000000001108002821021fe74d01000900000388180000100010000000000005000000090200003f00050000000102ffffff0004000000
04010d000400000002010200050000000c0277019101030000001e00040000002701ffff050000000b0200000000030000001e00050000000102ffffff0005000000090200003f0005000000090200003f00040000002701ffff030000001e00050000000102ffffff0005000000090200003f0007000000160477019101
0000000007000000fc020000c0c0c0000000040000002d010000050000000902c0c0c000050000000102c0c0c0000400000004010d00040000000201020008000000fa02000000000000c0c0c000040000002d010100050000001402000000000500000013020000910108000000fa020000000000000000000004000000
2d010200090000001d062100f0000100910100000000040000002d0101000500000014020000000005000000130277010000040000002d010200090000001d062100f000770101000000000007000000fc020000ffffff000000040000002d010300040000002701ffff030000001e00040000002d010000050000000102
c0c0c000050000000902c0c0c00007000000160477019101000000000400000004010d000400000002010200040000002d0101000500000014021600010005000000130216009101040000002d010200090000001d062100f0000100900116000100040000002d0101000500000014022c0001000500000013022c009101
040000002d010200090000001d062100f000010090012c000100040000002d0101000500000014024200010005000000130242009101040000002d010200090000001d062100f0000100900142000100040000002d0101000500000014025800010005000000130258009101040000002d010200090000001d062100f000
0100900158000100040000002d0101000500000014026e0001000500000013026e009101040000002d010200090000001d062100f000010090016e000100040000002d0101000500000014028400010005000000130284009101040000002d010200090000001d062100f0000100900184000100040000002d0101000500
000014029a0001000500000013029a009101040000002d010200090000001d062100f000010090019a000100040000002d010100050000001402b0000100050000001302b0009101040000002d010200090000001d062100f00001009001b0000100040000002d010100050000001402c6000100050000001302c6009101
040000002d010200090000001d062100f00001009001c6000100040000002d010100050000001402dc000100050000001302dc009101040000002d010200090000001d062100f00001009001dc000100040000002d010100050000001402f2000100050000001302f2009101040000002d010200090000001d062100f000
01009001f2000100040000002d0101000500000014020801010005000000130208019101040000002d010200090000001d062100f0000100900108010100040000002d0101000500000014021e0101000500000013021e019101040000002d010200090000001d062100f000010090011e010100040000002d0101000500
000014023401010005000000130234019101040000002d010200090000001d062100f0000100900134010100040000002d0101000500000014024a0101000500000013024a019101040000002d010200090000001d062100f000010090014a010100040000002d0101000500000014026001010005000000130260019101
040000002d010200090000001d062100f0000100900160010100040000002d0101000500000014027601010005000000130276019101040000002d010200090000001d062100f0000100900176010100040000002d0101000500000014020100500005000000130277015000040000002d010200090000001d062100f000
7601010001005000040000002d0101000500000014020100a0000500000013027701a000040000002d010200090000001d062100f000760101000100a000040000002d0101000500000014020100f0000500000013027701f000040000002d010200090000001d062100f000760101000100f000040000002d0101000500
000014020100400105000000130277014001040000002d010200090000001d062100f0007601010001004001040000002d0101000500000014020100900105000000130277019001040000002d010200090000001d062100f0007601010001009001040000002d010300040000002701ffff030000001e00040000002d01
0000050000000102c0c0c000050000000902c0c0c000070000001604770191010000000010000000fb02efff000000000000bc020000000000000000417269616c000000040000002d010400040000002d01030010000000fb021400090000000000bc02000000000202022253797374656d0000040000002d0105000400
00002701ffff030000001e00040000002d010400040000002d010000050000000102c0c0c000050000000902c0c0c000070000001604770191010100010010000000fb02efff00000000000090010000000000000000417269616c000000040000002d01060005000000090200003f00050000000102ffffff0004000000
04010d0004000000020101000a000000320a19003b00020000003232090009000a000000320a19008b00020000003230090009000a000000320a1900db000200000032300900090009000000320a19003401010000003000090009000000320a1900840101000000300009000a000000320a2f003b000200000031360900
09000a000000320a2f008b00020000003139090009000a000000320a2f00db000200000031320900090009000000320a2f003401010000003000090009000000320a2f00840101000000310009000a000000320a45003b00020000003132090009000a000000320a45008b00020000003132090009000a000000320a4500
db000200000031320900090009000000320a45003401010000003000090009000000320a4500840101000000300009000a000000320a5b003b00020000003133090009000a000000320a5b008b00020000003134090009000a000000320a5b00db000200000031330900090009000000320a5b0034010100000030000900
09000000320a5b00840101000000300009000a000000320a71003b000200000031390900090009000000320a71009400010000003800090009000000320a7100e400010000003600090009000000320a71003401010000003000090009000000320a71008401010000003100090009000000320a87004400010000003800
090009000000320a87009400010000003800090009000000320a8700e400010000003800090009000000320a87003401010000003000090009000000320a87008401010000003000090009000000320a9d004400010000003800090009000000320a9d009400010000003700090009000000320a9d00e400010000003700
090009000000320a9d003401010000003000090009000000320a9d008401010000003000090009000000320ab300440001000000390009000a000000320ab3008b000200000031340900090009000000320ab300e400010000003700090009000000320ab3003401010000003000090009000000320ab300840101000000
3000090009000000320ac9004400010000003800090009000000320ac9009400010000003700090009000000320ac900e400010000003700090009000000320ac9003401010000003000090009000000320ac900840101000000300009000a000000320adf003b00020000003130090009000a000000320adf008b000200
00003136090009000a000000320adf00db000200000031300900090009000000320adf003401010000003000090009000000320adf00840101000000300009000a000000320af5003b00020000003331090009000a000000320af5008b00020000003237090009000a000000320af500db00020000003236090009000900
0000320af5003401010000003000090009000000320af500840101000000300009000a000000320a0b013b000200000031370900090009000000320a0b019400010000003700090009000000320a0b01e400010000003700090009000000320a0b013401010000003000090009000000320a0b0184010100000030000900
0a000000320a21013b00020000003235090009000a000000320a21018b00020000003234090009000a000000320a2101db000200000031390900090009000000320a21013401010000003000090009000000320a2101840101000000330009000a000000320a37013b00020000003137090009000a000000320a37018b00
020000003137090009000a000000320a3701db000200000031340900090009000000320a37013401010000003000090009000000320a37018401010000003100090009000000320a4d014400010000003900090009000000320a4d019400010000003900090009000000320a4d01e400010000003900090009000000320a
4d013401010000003000090009000000320a4d018401010000003000090009000000320a6301440001000000390009000a000000320a63018b000200000031330900090009000000320a6301e400010000003700090009000000320a63013401010000003000090009000000320a63018401010000003100090007000000
fc020000000000000000040000002d010700070000001604770191010100010008000000fa0205000000000000003f00040000002d01080007000000fc020000ffffff000000040000002d010900050000000902ffffff0005000000010200003f000400000002010200070000001b048101a20100000100040000002d01
0200040000002d010300040000002d010500040000002701ffff050000000b0200000000030000001e00040000002d010600040000002d010900040000002d01080005000000010200003f00050000000902ffffff00040000002d010200040000002d010300040000002d010500040000002701ffff050000000b020000
ffff030000001e00040000002d010600040000002d010900040000002d01080005000000010200003f00050000000902ffffff0010000000fb02f3ff00000000000090010000000000000000417269616c000000040000002d010a0010000000fb02efff000000000000bc020000000000000000417269616c0000000400
00002d010b0010000000fb02efff00000000000090010000000000000020417269616c000000040000002d010c0010000000fb02f3ff000000000000bc020000000000000000417269616c000000040000002d010d00040000002d010a00040000002d010200040000002d010300040000002d010500040000002701ffff
030000001e00040000002d010a00040000002d010900040000002d01080005000000010200003f00050000000902ffffff000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010900040000002d010800
05000000010200003f00050000000902ffffff00070000001604770190010100000007000000fc020000e3e3e3000000040000002d010e0004000000f001090008000000fa0205000000000000003f00040000002d01090004000000f0010800050000000902e3e3e300050000000102000000000400000004010d000400
0000020102000e0000002403050050004d006f014d006f0133015000330150004d0008000000fa0200000000000000003f00040000002d01080004000000f0010900040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d01
080005000000010200000000050000000902e3e3e30007000000160437016f014900500007000000150493001a01910017010500000014021c015000050000000102ffffff000400000004010d0004000000020101000500000013021c016f010500000014020501500005000000130205016f01050000001402ee005000
050000001302ee006f01050000001402d7005000050000001302d7006f01050000001402c0005000050000001302c0006f01050000001402a9005000050000001302a9006f010500000014029200500005000000130292006f010500000014027b0050000500000013027b006f0105000000140264005000050000001302
64006f010500000014024d0050000500000013024d006f01040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e3000700000016047701900101000000040000002d01
0200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e300070000001604330173014d004c0007000000150493001a01910017010500000014024d0089000400000004010d0004000000
02010100050000001302330189000500000014024d00c3000500000013023301c3000500000014024d00fc000500000013023301fc000500000014024d003601050000001302330136010500000014024d006f0105000000130233016f01040000002d010200040000002d010300040000002d010500040000002701ffff
030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e300070000001604770190010100000007000000150493001a019100170108000000fa0200000100010080808000040000002d01090004000000f00108000500000014024d005000040000000401
0d0004000000020101000500000013024d006f0105000000130233016f01050000001302330150000500000013024d005000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010900050000000102ffffff0005000000
0902e3e3e300070000001604770190010100000008000000fa0200000000000000003f00040000002d01080004000000f00109000500000014024d0050000400000004010d0004000000020101000500000013023301500005000000140233014c00050000001302330150000500000014021c014c000500000013021c01
500005000000140205014c0005000000130205015000050000001402ee004c00050000001302ee005000050000001402d7004c00050000001302d7005000050000001402c0004c00050000001302c0005000050000001402a9004c00050000001302a900500005000000140292004c000500000013029200500005000000
14027b004c000500000013027b00500005000000140264004c00050000001302640050000500000014024d004c000500000013024d0050000500000014023301500005000000130233016f01050000001402370150000500000013023301500005000000140237018900050000001302330189000500000014023701c300
0500000013023301c3000500000014023701fc000500000013023301fc00050000001402370136010500000013023301360105000000140237016f0105000000130233016f01040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e000400
00002d010800050000000102ffffff00050000000902e3e3e3000700000016047701900107000700040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e30007000000
1604360173014d005000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e3000700000016043901760147004a0007000000fc020100000000000000040000002d01
090004000000f0010e000500000014024d00550107000000fc020000000080000000040000002d010e0008000000fa0200000100010000008000040000002d010f0004000000f001080005000000090200008000050000000102000000000400000004010d0004000000020102000e000000240305005501490059014d00
5501510051014d0055014900050000001402a20027010e0000002403050027019e002b01a2002701a6002301a20027019e000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014025d006f010e000000240305006f01590073015d006f0161006b015d006f015900
0500000014028700ac000e00000024030500ac008300b0008700ac008b00a8008700ac0083000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d014900050000001402c00030010e00
0000240305003001bc003401c0003001c4002c01c0003001bc000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d014900050000001402a2006f010e000000240305006f019e007301a2006f01a6006b01a2006f019e00050000001402560041010e00000024030500410152004501
560041015a003d015600410152000500000014024d00c6000e00000024030500c6004900ca004d00c6005100c2004d00c60049000500000014027d002a010e000000240305002a0179002e017d002a01810026017d002a01790005000000140276003b010e000000240305003b0172003f0176003b017a00370176003b01
72000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f014900050000001402b70030010e000000240305003001b3003401b7003001bb002c01b7003001b3000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014024d006f01
0e000000240305006f01490073014d006f0151006b014d006f0149000500000014029900af000e00000024030500af009500b3009900af009d00ab009900af0095000500000014024d004f010e000000240305004f01490053014d004f0151004b014d004f0149000500000014024d0027010e0000002403050027014900
2b014d002701510023014d002701490005000000140290003e010e000000240305003e018c00420190003e0194003a0190003e018c000500000014024d0052010e000000240305005201490056014d00520151004e014d00520149000500000014024d004d010e000000240305004d01490051014d004d01510049014d00
4d014900050000001402c00030010e000000240305003001bc003401c0003001c4002c01c0003001bc00050000001402920019010e0000002403050019018e001d019200190196001501920019018e00050000001402ce0008010e000000240305000801ca000c01ce000801d2000401ce000801ca00050000001402d000
fc000e00000024030500fc00cc000001d000fc00d400f800d000fc00cc00050000001402a400ce000e00000024030500ce00a000d200a400ce00a800ca00a400ce00a00005000000140266004f010e000000240305004f016200530166004f016a004b0166004f0162000500000014027b004f010e000000240305004f01
770053017b004f017f004b017b004f017700050000001402690030010e00000024030500300165003401690030016d002c016900300165000500000014024d004f010e000000240305004f01490053014d004f0151004b014d004f0149000500000014026600ff000e00000024030500ff00620003016600ff006a00fb00
6600ff0062000500000014029b00eb000e00000024030500eb009700ef009b00eb009f00e7009b00eb0097000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d0149000500000014029000f1000e00000024030500f1008c00f5009000f1009400ed009000f1008c00050000001402
a20005010e0000002403050005019e000901a2000501a6000101a20005019e000500000014027400f1000e00000024030500f1007000f5007400f1007800ed007400f1007000050000001402f30005010e000000240305000501ef000901f3000501f7000101f3000501ef00050000001402990027010e00000024030500
270195002b01990027019d0023019900270195000500000014024d0036010e00000024030500360149003a014d003601510032014d00360149000500000014028700e0000e00000024030500e0008300e4008700e0008b00dc008700e00083000500000014025b003e010e000000240305003e01570042015b003e015f00
3a015b003e0157000500000014026d0027010e00000024030500270169002b016d002701710023016d00270169000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014029200d7000e00000024030500d7008e00db009200d7009600d3009200d7008e0005000000
14029900f4000e00000024030500f4009500f8009900f4009d00f0009900f4009500050000001402cc00e0000e00000024030500e000c800e400cc00e000d000dc00cc00e000c80005000000140269000d010e000000240305000d016500110169000d016d00090169000d0165000500000014025f0002010e0000002403
050002015b0006015f0002016300fe005f0002015b00050000001402990010010e00000024030500100195001401990010019d000c019900100195000500000014027b00e0000e00000024030500e0007700e4007b00e0007f00dc007b00e0007700050000001402330150000e0000002403050050002f01540033015000
37014c00330150002f010500000014024d003e010e000000240305003e01490042014d003e0151003a014d003e0149000500000014026d0027010e00000024030500270169002b016d002701710023016d0027016900050000001402620055010e0000002403050055015e0059016200550166005101620055015e000500
000014024d0030010e000000240305003001490034014d00300151002c014d00300149000500000014025b003e010e000000240305003e01570042015b003e015f003a015b003e01570005000000140262002a010e000000240305002a015e002e0162002a016600260162002a015e0005000000140266004f010e000000
240305004f016200530166004f016a004b0166004f01620005000000140290001c010e000000240305001c018c00200190001c019400180190001c018c00050000001402330150000e0000002403050050002f0154003301500037014c00330150002f010500000014024d004f010e000000240305004f01490053014d00
4f0151004b014d004f014900050000001402660036010e00000024030500360162003a01660036016a0032016600360162000500000014026d0047010e00000024030500470169004b016d004701710043016d004701690005000000140292004d010e000000240305004d018e00510192004d019600490192004d018e00
0500000014024d0030010e000000240305003001490034014d00300151002c014d0030014900050000001402b000f4000e00000024030500f400ac00f800b000f400b400f000b000f400ac00050000001402ce0019010e000000240305001901ca001d01ce001901d2001501ce001901ca0005000000140266004f010e00
0000240305004f016200530166004f016a004b0166004f0162000500000014028b006f010e000000240305006f01870073018b006f018f006b018b006f0187000500000014026b002a010e000000240305002a0167002e016b002a016f0026016b002a01670005000000140290003e010e000000240305003e018c004201
90003e0194003a0190003e018c000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014026d0047010e00000024030500470169004b016d004701710043016d004701690005000000140274003e010e000000240305003e017000420174003e0178003a0174003e01
7000050000001402cc001c010e000000240305001c01c8002001cc001c01d0001801cc001c01c800050000001402800013010e0000002403050013017c0017018000130184000f01800013017c000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f014900050000001402c0001c01
0e000000240305001c01bc002001c0001c01c4001801c0001c01bc000500000014026d0047010e00000024030500470169004b016d004701710043016d00470169000500000014024d00c3000e00000024030500c3004900c7004d00c3005100bf004d00c30049000500000014027b00e0000e00000024030500e0007700
e4007b00e0007f00dc007b00e000770005000000140269006f010e000000240305006f016500730169006f016d006b0169006f0165000500000014024d00bd000e00000024030500bd004900c1004d00bd005100b9004d00bd004900050000001402b50047010e000000240305004701b1004b01b5004701b9004301b500
4701b1000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f014900050000001402740005010e0000002403050005017000090174000501780001017400050170000500000014024d00e0000e00000024030500e0004900e4004d00e0005100dc004d00e00049000500000014028700
e0000e00000024030500e0008300e4008700e0008b00dc008700e0008300050000001402740005010e0000002403050005017000090174000501780001017400050170000500000014024d00c3000e00000024030500c3004900c7004d00c3005100bf004d00c30049000500000014029900e0000e00000024030500e000
9500e4009900e0009d00dc009900e000950005000000140274003e010e000000240305003e017000420174003e0178003a0174003e017000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f000500000001020000
000005000000090200008000070000001604360173014d005000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f000500000001020000000005000000090200008000070000001604770190010100000004000000
2d010b00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010e00040000002d010f0005000000010200000000050000000902000080000700000016043000d7000e00c900040000002d010200040000002d010300040000002d0105000400
00002701ffff030000001e00040000002d010b00040000002d010e00040000002d010f0005000000010200000000050000000902000080000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010e000400
00002d010f0005000000010200000000050000000902000080000700000016047701900101000000040000002d010a00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f0005000000010200000000050000000902
00008000070000001604770190010100000005000000090200003f00050000000102ffffff000400000004010d00040000000201010009000000320a2c013f0001000000300007000a000000320a15013800020000003130070007000a000000320afe003800020000003230070007000a000000320ae700380002000000
3330070007000a000000320ad0003800020000003430070007000a000000320ab9003800020000003530070007000a000000320aa2003800020000003630070007000a000000320a8b003800020000003730070007000a000000320a74003800020000003830070007000a000000320a5d00380002000000393007000700
0c000000320a460031000300000031303000070007000700040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d01
0200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f0007000000160477019001010000000400000004010d00040000000201010009000000320a3f014d0001000000300007000a00
0000320a3f018200020000003230070007000a000000320a3f01bc00020000003430070007000a000000320a3f01f500020000003630070007000a000000320a3f012f01020000003830070007000c000000320a3f0165010300000031303000070007000700040000002d010200040000002d010300040000002d010500
040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d010d00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00
040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016046d01f7005201c7000400000004010d00040000000201010010000000320a5801cc0006000000526563616c6c090007000700070004000400040000002d010200040000002d010300040000002d01050004000000
2701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e0004000000
2d010f00050000000102ffffff0005000000090200003f00070000001604e3002f009e0014000400000004010d00040000000201010010000000fb02f3ff000084038403bc020000000000100000417269616c000000040000002d0108000c000000320ade00190009000000507265636973696f6e00040000002d010d00
04000000f0010800040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d010c0007000000fc020000ffffff000000
040000002d01080004000000f0010e0008000000fa0200000000000000003f00040000002d010e0004000000f0010f00050000000902ffffff000400000004010d000400000002010200070000001b0494001a0191001701040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00
040000002d010c00040000002d010800040000002d010e00050000000102ffffff00050000000902ffffff000700000016040000ffff0000ffff040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010800040000002d010e00050000000102
ffffff00050000000902ffffff000700000016040000ffff0000ffff08000000fa0205000000000000003f00040000002d010f0004000000f0010e000500000014029e001c010500000014029e0027010500000014029e00210107000000fc020000000080000000040000002d010e0004000000f001080008000000fa02
00000100010000008000040000002d01080004000000f0010f0005000000090200008000050000000102000000000400000004010d0004000000020102000e0000002403050021019a0025019e002101a2001d019e0021019a00050000000902ffffff00040000002d010200040000002d010300040000002d0105000400
00002701ffff030000001e00040000002d010c00040000002d010e00040000002d01080005000000010200000000050000000902ffffff000700000016040000ffff0000ffff040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010e000400
00002d01080005000000010200000000050000000902ffffff000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010e00040000002d01080005000000010200000000050000000902ffffff0007000000
16047701900101000000040000002d01090004000000f0010e00040000002d010700040000002d01020004000000f0010800040000002701ffff050000000c0277019101030000001e0005000000010200000000050000000902ffffff00040000002701ffff050000000b0200000000030000001e000500000001020000
0000050000000902ffffff00040000002701ffff030000001e0005000000010200000000050000000902ffffff00070000001604770191010100010008000000fa0200000000000000003f00040000002d010800040000002d01090005000000010200003f000400000004010d000400000002010200070000001b048001
a10100000100040000002d010700040000002d01020004000000f0010800040000002701ffff03000000000000000000000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003b000300feff090006000000000000000000000001000000010000000000000000100000020000000100
0000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff0800de215e1d1726010009000003132100000e0010000000000005000000090200000000050000000102ffffff000400000004010d000400000002010200050000000c0278030004030000001e00040000002701ffff050000000b0200000000030000001e00
050000000102ffffff0005000000090200000000040000002701ffff030000001e00050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002701ffff030000001e00050000000102ffffff00050000000902000000000700000016047403fc030400040007000000fc0200000000
00000000040000002d0100000400000004010d00040000000201020008000000fa0200000000000000000000040000002d010100050000001402020002000500000013020200ff0308000000fa0200000000000000000000040000002d010200090000001d062100f0000100fd0302000200040000002d01010005000000
1402360002000500000013023600ff03040000002d010200090000001d062100f0000100fd0336000200040000002d0101000500000014026a0002000500000013026a00ff03040000002d010200090000001d062100f0000100fd036a000200040000002d0101000500000014029e0002000500000013029e00ff030400
00002d010200090000001d062100f0000100fd039e000200040000002d010100050000001402d2000200050000001302d200ff03040000002d010200090000001d062100f0000100fd03d2000200040000002d010100050000001402060102000500000013020601ff03040000002d010200090000001d062100f0000100
fd0306010200040000002d0101000500000014023a0102000500000013023a01ff03040000002d010200090000001d062100f0000100fd033a010200040000002d0101000500000014026e0102000500000013026e01ff03040000002d010200090000001d062100f0000100fd036e010200040000002d01010005000000
1402a2010200050000001302a201ff03040000002d010200090000001d062100f0000100fd03a2010200040000002d010100050000001402d6010200050000001302d601ff03040000002d010200090000001d062100f0000100fd03d6010200040000002d0101000500000014020a0202000500000013020a02ff030400
00002d010200090000001d062100f0000100fd030a020200040000002d0101000500000014023e0202000500000013023e02ff03040000002d010200090000001d062100f0000100fd033e020200040000002d010100050000001402720202000500000013027202ff03040000002d010200090000001d062100f0000100
fd0372020200040000002d010100050000001402a6020200050000001302a602ff03040000002d010200090000001d062100f0000100fd03a6020200040000002d010100050000001402da020200050000001302da02ff03040000002d010200090000001d062100f0000100fd03da020200040000002d01010005000000
14020e0302000500000013020e03ff03040000002d010200090000001d062100f0000100fd030e030200040000002d010100050000001402420302000500000013024203ff03040000002d010200090000001d062100f0000100fd0342030200040000002d010100050000001402760302000500000013027603ff030400
00002d010200090000001d062100f0000100fd037603020007000000fc020000ffffff000000040000002d010300040000002701ffff030000001e00040000002d010000050000000102ffffff00050000000902000000000700000016047703ff030400040010000000fb02d6ff000000000000bc020000000000000000
417269616c000000040000002d010400040000002d01030010000000fb021400090000000000bc02000000000202022253797374656d0000040000002d010500040000002701ffff030000001e00040000002d010400040000002d010000050000000102ffffff00050000000902000000000700000016047703ff030400
040010000000fb02d6ff00000000000090010000000000000000417269616c000000040000002d010600040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc030400040004000000
2d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d01000005000000
0102ffffff00050000000902000000000700000016047703ff03040004000400000004010d0004000000020101000a000000320a38009800020000003232170017000a000000320a38006401020000003230170017000a000000320a380030020200000032301700170009000000320a3800130301000000300017000900
0000320a3800df030100000030001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00
040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03
040004000400000004010d0004000000020101000a000000320a6c009800020000003136170017000a000000320a6c006401020000003139170017000a000000320a6c0030020200000031321700170009000000320a6c001303010000003000170009000000320a6c00df030100000031001700040000002d0103000400
00002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00
050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d0004000000020101000a000000320a
a0009800020000003132170017000a000000320aa0006401020000003132170017000a000000320aa00030020200000031321700170009000000320aa0001303010000003000170009000000320aa000df030100000030001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d01
0600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400
00002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d0004000000020101000a000000320ad4009800020000003133170017000a000000320ad40064010200
00003134170017000a000000320ad40030020200000031331700170009000000320ad4001303010000003000170009000000320ad400df030100000030001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902
000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff03000000
1e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d0004000000020101000a000000320a080198000200000031391700170009000000320a08017b01010000003800170009000000320a0801470201000000360017000900
0000320a08011303010000003000170009000000320a0801df030100000031001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d01030004000000
2d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff000500
00000902000000000700000016047703ff03040004000400000004010d00040000000201010009000000320a3c01af00010000003800170009000000320a3c017b01010000003800170009000000320a3c014702010000003800170009000000320a3c011303010000003000170009000000320a3c01df03010000003000
1700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d01
0000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d000400
00000201010009000000320a7001af00010000003800170009000000320a70017b01010000003700170009000000320a70014702010000003700170009000000320a70011303010000003000170009000000320a7001df030100000030001700040000002d010300040000002d010500040000002701ffff030000001e00
040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03
04000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d00040000000201010009000000320aa401af0001000000390017000a000000320aa401
64010200000031341700170009000000320aa4014702010000003700170009000000320aa4011303010000003000170009000000320aa401df030100000030001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff0005000000
0902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff0300
00001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d00040000000201010009000000320ad801af00010000003800170009000000320ad8017b01010000003700170009000000320ad801470201000000370017000900
0000320ad8011303010000003000170009000000320ad801df030100000030001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d01030004000000
2d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff000500
00000902000000000700000016047703ff03040004000400000004010d0004000000020101000a000000320a0c029800020000003130170017000a000000320a0c026401020000003136170017000a000000320a0c0230020200000031301700170009000000320a0c021303010000003000170009000000320a0c02df03
0100000030001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600
040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff030400040004000000
04010d0004000000020101000a000000320a40029800020000003331170017000a000000320a40026401020000003237170017000a000000320a400230020200000032361700170009000000320a40021303010000003000170009000000320a4002df030100000030001700040000002d010300040000002d0105000400
00002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff000500000009020000
00000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d0004000000020101000a000000320a7402980002000000
31371700170009000000320a74027b01010000003700170009000000320a74024702010000003700170009000000320a74021303010000003000170009000000320a7402df030100000030001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d0100000500
00000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d01
0500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d0004000000020101000a000000320aa8029800020000003235170017000a000000320aa8026401020000003234170017000a000000
320aa80230020200000031391700170009000000320aa8021303010000003000170009000000320aa802df030100000033001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403
fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d0106000400
00002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d0004000000020101000a000000320adc029800020000003137170017000a000000320adc026401020000003137170017000a000000320adc0230020200000031341700170009000000320adc021303
010000003000170009000000320adc02df030100000031001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d01050004000000
2701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff0005000000090200000000
0700000016047703ff03040004000400000004010d00040000000201010009000000320a1003af00010000003900170009000000320a10037b01010000003900170009000000320a10034702010000003900170009000000320a10031303010000003000170009000000320a1003df030100000030001700040000002d01
0300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102
ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400000004010d0004000000020101000900
0000320a4403af0001000000390017000a000000320a440364010200000031331700170009000000320a44034702010000003700170009000000320a44031303010000003000170009000000320a4403df030100000031001700040000002d010300040000002d010500040000002701ffff030000001e00040000002d01
0600040000002d010000050000000102ffffff00050000000902000000000700000016047403fc0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff03040004000400
00002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d010000050000000102ffffff00050000000902000000000700000016047703ff0304000400040000002d010300040000002d010500040000002701ffff030000001e00040000002d010600040000002d0100000500
00000102ffffff00050000000902000000000700000016047403fc03040004000400000004010d000400000002010200040000002d0101000500000014020200020005000000130276030200040000002d010200090000001d062100f0007403010002000200040000002d0101000500000014020200ce00050000001302
7603ce00040000002d010200090000001d062100f000740301000200ce00040000002d01010005000000140202009a0105000000130276039a01040000002d010200090000001d062100f0007403010002009a01040000002d0101000500000014020200660205000000130276036602040000002d010200090000001d06
2100f0007403010002006602040000002d0101000500000014020200320305000000130276033203040000002d010200090000001d062100f0007403010002003203040000002d0101000500000014020200fe030500000013027603fe03040000002d010200090000001d062100f000740301000200fe03040000002d01
0000070000001604780300040400040008000000fa0205000000000000000000040000002d01070007000000fc020000ffffff000000040000002d010800070000001b048d03290402000500040000002d010200040000002d010300040000002d010500040000002701ffff050000000b0200000000030000001e000400
00002d010600040000002d010800040000002d010700050000000102ffffff0005000000090200000000040000002d010200040000002d010300040000002d010500040000002701ffff050000000b02fefffbff030000001e00040000002d010600040000002d010800040000002d010700050000000102ffffff000500
000009020000000010000000fb02dfff000000000000bc020000000000000000417269616c000000040000002d010900040000002d01040010000000fb02d6ff00000000000090010000000000000020417269616c000000040000002d010a00040000002d01090010000000fb02dfff0000000000009001000000000000
0000417269616c000000040000002d010b00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010800040000002d010700050000000102ffffff00050000000902000000000700000016047603fb0302000000040000002d01020004000000
2d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010800040000002d010700050000000102ffffff00050000000902000000000700000016047603fb030200000007000000fc020000e3e3e3000000040000002d010c0004000000f001080008000000fa02050000000000
00000000040000002d01080004000000f00107000400000004010d0004000000020102000e00000024030500c800bd00a503bd00a503cb02c800cb02c800bd0008000000fa0200000000000000000000040000002d01070004000000f0010800040000002d010200040000002d010300040000002d010500040000002701
ffff030000001e00040000002d010b00040000002d010c00040000002d010700050000000102ffffff0005000000090200000000070000001604cf02a503b900c8000700000015045b01ce025701c6020500000014029602c8000400000004010d0004000000020101000500000013029602a5030500000014026202c800
0500000013026202a5030500000014022d02c8000500000013022d02a503050000001402f901c800050000001302f901a503050000001402c401c800050000001302c401a5030500000014028f01c8000500000013028f01a5030500000014025b01c8000500000013025b01a5030500000014022601c800050000001302
2601a503050000001402f200c800050000001302f200a503050000001402bd00c800050000001302bd00a503040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d010700050000000102ffffff0005000000090200000000
0700000016047603fb0302000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d010700050000000102ffffff0005000000090200000000070000001604cb02a903bd00c4000700000015045b01ce025701c6020500
00001402bd005b010400000004010d000400000002010100050000001302cb025b01050000001402bd00ed01050000001302cb02ed01050000001402bd008002050000001302cb028002050000001402bd001203050000001302cb021203050000001402bd00a503050000001302cb02a503040000002d01020004000000
2d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d010700050000000102ffffff00050000000902000000000700000016047603fb03020000000700000015045b01ce025701c60208000000fa0200000400040080808000040000002d01080004000000
f0010700050000001402bd00c8000400000004010d000400000002010100050000001302bd00a503050000001302cb02a503050000001302cb02c800050000001302bd00c800040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c000400
00002d010800050000000102ffffff00050000000902000000000700000016047603fb030200000008000000fa0200000000000000000000040000002d01070004000000f0010800050000001402bd00c8000400000004010d000400000002010100050000001302cb02c800050000001402cb02be00050000001302cb02
c8000500000014029602be000500000013029602c8000500000014026202be000500000013026202c8000500000014022d02be000500000013022d02c800050000001402f901be00050000001302f901c800050000001402c401be00050000001302c401c8000500000014028f01be000500000013028f01c80005000000
14025b01be000500000013025b01c8000500000014022601be000500000013022601c800050000001402f200be00050000001302f200c800050000001402bd00be00050000001302bd00c800050000001402cb02c800050000001302cb02a503050000001402d502c800050000001302cb02c800050000001402d5025b01
050000001302cb025b01050000001402d502ed01050000001302cb02ed01050000001402d5028002050000001302cb028002050000001402d5021203050000001302cb021203050000001402d502a503050000001302cb02a503040000002d010200040000002d010300040000002d010500040000002701ffff03000000
1e00040000002d010b00040000002d010c00040000002d010700050000000102ffffff00050000000902000000000700000016047603fb0311001100040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d01070005000000
0102ffffff0005000000090200000000070000001604ce02a903bd00c800040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d010700050000000102ffffff0005000000090200000000070000001604d702b203b100bc00
07000000fc020100000000000000040000002d01080004000000f0010c00050000001402bd00630307000000fc020000000080000000040000002d010c0008000000fa0200000400040000008000040000002d010d0004000000f00107000400000004010d0004000000020102000e000000240305006303b3006d03bd00
6303c7005903bd006303b3000500000014028001ee020e00000024030500ee027601f8028001ee028a01e4028001ee027601050000001402bd00a5030e00000024030500a503b300af03bd00a503c7009b03bd00a503b300050000001402e200a5030e00000024030500a503d800af03e200a503ec009b03e200a503d800
0500000014024101b3010e00000024030500b3013701bd014101b3014b01a9014101b3013701050000001402bd00a5030e00000024030500a503b300af03bd00a503c7009b03bd00a503b300050000001402bd004d030e000000240305004d03b3005703bd004d03c7004303bd004d03b300050000001402c40104030e00
0000240305000403ba010e03c4010403ce01fa02c4010403ba01050000001402bd004d030e000000240305004d03b3005703bd004d03c7004303bd004d03b3000500000014028001a5030e00000024030500a5037601af038001a5038a019b038001a5037601050000001402d20030030e000000240305003003c8003a03
d2003003dc002603d2003003c800050000001402bd00f5010e00000024030500f501b300ff01bd00f501c700eb01bd00f501b3000500000014022b01f5020e00000024030500f5022101ff022b01f5023501eb022b01f50221010500000014021c0121030e00000024030500210312012b031c012103260117031c012103
1201050000001402bd00a5030e00000024030500a503b300af03bd00a503c7009b03bd00a503b300050000001402af0104030e000000240305000403a5010e03af010403b901fa02af010403a501050000001402bd00a5030e00000024030500a503b300af03bd00a503c7009b03bd00a503b300050000001402bd00a503
0e00000024030500a503b300af03bd00a503c7009b03bd00a503b3000500000014026b01ba010e00000024030500ba016101c4016b01ba017501b0016b01ba016101050000001402bd0054030e000000240305005403b3005e03bd005403c7004a03bd005403b300050000001402bd00ee020e00000024030500ee02b300
f802bd00ee02c700e402bd00ee02b300050000001402560128030e0000002403050028034c0132035601280360011e03560128034c01050000001402bd005c030e000000240305005c03b3006603bd005c03c7005203bd005c03b300050000001402bd004d030e000000240305004d03b3005703bd004d03c7004303bd00
4d03b300050000001402c40104030e000000240305000403ba010e03c4010403ce01fa02c4010403ba010500000014025b01c9020e00000024030500c9025101d3025b01c9026501bf025b01c9025101050000001402e4019d020e000000240305009d02da01a702e4019d02ee019302e4019d02da01050000001402e901
80020e000000240305008002df018a02e9018002f3017602e9018002df0105000000140285010b020e000000240305000b027b01150285010b028f01010285010b027b01050000001402f70054030e000000240305005403ed005e03f700540301014a03f7005403ed00050000001402260154030e000000240305005403
1c015e032601540330014a03260154031c01050000001402fc0004030e000000240305000403f2000e03fc0004030601fa02fc000403f200050000001402bd0054030e000000240305005403b3005e03bd005403c7004a03bd005403b300050000001402f70087020e000000240305008702ed009102f700870201017d02
f7008702ed00050000001402700154020e00000024030500540266015e02700154027a014a02700154026601050000001402bd004d030e000000240305004d03b3005703bd004d03c7004303bd004d03b300050000001402560162020e0000002403050062024c016c025601620260015802560162024c01050000001402
800196020e0000002403050096027601a002800196028a018c02800196027601050000001402160162020e0000002403050062020c016c021601620220015802160162020c01050000001402380296020e0000002403050096022e02a0023802960242028c02380296022e020500000014026b01ee020e00000024030500
ee026101f8026b01ee027501e4026b01ee026101050000001402bd0012030e000000240305001203b3001c03bd001203c7000803bd001203b300050000001402410137020e00000024030500370237014102410137024b012d02410137023701050000001402dd0028030e000000240305002803d3003203dd002803e700
1e03dd002803d3000500000014020701ee020e00000024030500ee02fd00f8020701ee021101e4020701ee02fd00050000001402bd00a5030e00000024030500a503b300af03bd00a503c7009b03bd00a503b3000500000014025b0121020e00000024030500210251012b025b012102650117025b012102510105000000
14026b016a020e000000240305006a02610174026b016a02750160026b016a026101050000001402de0137020e000000240305003702d4014102de013702e8012d02de013702d401050000001402fc00ac020e00000024030500ac02f200b602fc00ac020601a202fc00ac02f200050000001402e7008e020e0000002403
05008e02dd009802e7008e02f1008402e7008e02dd000500000014026b01b3020e00000024030500b3026101bd026b01b3027501a9026b01b3026101050000001402260137020e0000002403050037021c0141022601370230012d02260137021c01050000001402cb02c8000e00000024030500c800c102d200cb02c800
d502be00cb02c800c102050000001402bd0028030e000000240305002803b3003203bd002803c7001e03bd002803b3000500000014020701ee020e00000024030500ee02fd00f8020701ee021101e4020701ee02fd00050000001402ec0063030e000000240305006303e2006d03ec006303f6005903ec006303e2000500
00001402bd0004030e000000240305000403b3000e03bd000403c700fa02bd000403b300050000001402dd0028030e000000240305002803d3003203dd002803e7001e03dd002803d300050000001402ec00f5020e00000024030500f502e200ff02ec00f502f600eb02ec00f502e200050000001402f70054030e000000
240305005403ed005e03f700540301014a03f7005403ed000500000014025601d0020e00000024030500d0024c01da025601d0026001c6025601d0024c01050000001402cb02c8000e00000024030500c800c102d200cb02c800d502be00cb02c800c102050000001402bd0054030e000000240305005403b3005e03bd00
5403c7004a03bd005403b300050000001402f70012030e000000240305001203ed001c03f700120301010803f7001203ed0005000000140207013e030e000000240305003e03fd00480307013e031101340307013e03fd000500000014025b014d030e000000240305004d03510157035b014d03650143035b014d035101
050000001402bd0004030e000000240305000403b3000e03bd000403c700fa02bd000403b3000500000014029f016a020e000000240305006a02950174029f016a02a90160029f016a029501050000001402e401c9020e00000024030500c902da01d302e401c902ee01bf02e401c902da01050000001402f70054030e00
0000240305005403ed005e03f700540301014a03f7005403ed000500000014024b01a5030e00000024030500a5034101af034b01a50355019b034b01a50341010500000014020101f5020e00000024030500f502f700ff020101f5020b01eb020101f502f700050000001402560128030e0000002403050028034c013203
5601280360011e03560128034c01050000001402bd00a5030e00000024030500a503b300af03bd00a503c7009b03bd00a503b30005000000140207013e030e000000240305003e03fd00480307013e031101340307013e03fd00050000001402160128030e0000002403050028030c0132031601280320011e0316012803
0c01050000001402de01d0020e00000024030500d002d401da02de01d002e801c602de01d002d4010500000014023101ba020e00000024030500ba022701c4023101ba023b01b0023101ba022701050000001402bd00a5030e00000024030500a503b300af03bd00a503c7009b03bd00a503b300050000001402c401d002
0e00000024030500d002ba01da02c401d002ce01c602c401d002ba0105000000140207013e030e000000240305003e03fd00480307013e031101340307013e03fd00050000001402bd00ed010e00000024030500ed01b300f701bd00ed01c700e301bd00ed01b300050000001402260137020e0000002403050037021c01
41022601370230012d02260137021c01050000001402fc00a5030e00000024030500a503f200af03fc00a50306019b03fc00a503f200050000001402bd00df010e00000024030500df01b300e901bd00df01c700d501bd00df01b300050000001402aa013e030e000000240305003e03a0014803aa013e03b4013403aa01
3e03a001050000001402bd00a5030e00000024030500a503b300af03bd00a503c7009b03bd00a503b300050000001402160196020e0000002403050096020c01a0021601960220018c02160196020c01050000001402bd0037020e000000240305003702b3004102bd003702c7002d02bd003702b3000500000014024101
37020e00000024030500370237014102410137024b012d02410137023701050000001402160196020e0000002403050096020c01a0021601960220018c02160196020c01050000001402bd00ed010e00000024030500ed01b300f701bd00ed01c700e301bd00ed01b3000500000014026b0137020e000000240305003702
610141026b01370275012d026b0137026101050000001402160128030e0000002403050028030c0132031601280320011e03160128030c01040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d010d00050000000102ffff
ff0005000000090200000000070000001604ce02a903bd00c800040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d010d00050000000102ffffff00050000000902000000000700000016047603fb030200000004000000
2d010400040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010400040000002d010c00040000002d010d00050000000102ffffff00050000000902000000000700000016047200210222000102040000002d010200040000002d010300040000002d0105000400
00002701ffff030000001e00040000002d010400040000002d010c00040000002d010d00050000000102ffffff00050000000902000000000700000016047603fb0302000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010400040000002d010c000400
00002d010d00050000000102ffffff00050000000902000000000700000016047603fb0302000000040000002d010b00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d010d00050000000102ffffff00050000000902
000000000700000016047603fb03020000000400000004010d00040000000201010009000000320ab7029d0001000000300012000a000000320a82028b00020000003130120012000a000000320a4e028b00020000003230120012000a000000320a19028b00020000003330120012000a000000320ae5018b0002000000
3430120012000a000000320ab0018b00020000003530120012000a000000320a7b018b00020000003630120012000a000000320a47018b00020000003730120012000a000000320a12018b00020000003830120012000a000000320ade008b00020000003930120012000c000000320aa900790003000000313030001200
12001200040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010c00040000002d010d00050000000102ffffff00050000000902000000000700000016047603fb0302000000040000002d010200040000002d010300040000002d0105000400
00002701ffff030000001e00040000002d010b00040000002d010c00040000002d010d00050000000102ffffff00050000000902000000000700000016047603fb03020000000400000004010d00040000000201010009000000320ae702bf0001000000300012000a000000320ae7024901020000003230120012000a00
0000320ae702db01020000003430120012000a000000320ae7026e02020000003630120012000a000000320ae7020003020000003830120012000c000000320ae7028a030300000031303000120012001200040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d01
0b00040000002d010c00040000002d010d00050000000102ffffff00050000000902000000000700000016047603fb0302000000040000002d010900040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010900040000002d010c00040000002d010d0005000000
0102ffffff0005000000090200000000070000001604590374021703f8010400000004010d00040000000201010010000000320a2403060206000000526563616c6c180012001200120009000900040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d0109000400
00002d010c00040000002d010d00050000000102ffffff00050000000902000000000700000016047603fb0302000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010900040000002d010c00040000002d010d00050000000102ffffff00050000000902
000000000700000016041c0274006d012a000400000004010d00040000000201010010000000fb02dfff000084038403bc020000000000100000417269616c000000040000002d0107000c000000320a0e023a0009000000507265636973696f6e00040000002d01090004000000f0010700040000002d01020004000000
2d010300040000002d010500040000002701ffff030000001e00040000002d010900040000002d010c00040000002d010d00050000000102ffffff00050000000902000000000700000016047603fb0302000000040000002d010a0007000000fc020000ffffff000000040000002d01070004000000f0010c0008000000
fa0200000000000000000000040000002d010c0004000000f0010d000400000004010d000400000002010200070000001b045c01ce025701c602040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010700040000002d010c00050000000102
ffffff00050000000902000000000700000016045a01cd025801c702040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010700040000002d010c00050000000102ffffff00050000000902000000000700000016045a01cd025801c7020800
0000fa0205000000000000000000040000002d010d0004000000f0010c000500000014027701d1020500000014027701eb020500000014027701de0207000000fc020000000080000000040000002d010c0004000000f001070008000000fa0200000400040000008000040000002d01070004000000f0010d0004000000
04010d0004000000020102000e00000024030500de026d01e8027701de028101d4027701de026d01050000000902ffffff00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010c00040000002d010700050000000102ffffff0005000000
0902ffffff000700000016045a01cd025801c702040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010c00040000002d010700050000000102ffffff00050000000902ffffff000700000016047603fb0302000000040000002d0102000400
00002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010c00040000002d010700050000000102ffffff00050000000902ffffff000700000016047603fb0302000000040000002d01080004000000f0010c00040000002d010000040000002d01020004000000f0010700
040000002701ffff050000000c0278030004030000001e00050000000102ffffff00050000000902ffffff00040000002701ffff050000000b0200000000030000001e00050000000102ffffff00050000000902ffffff00040000002701ffff030000001e00050000000102ffffff00050000000902ffffff0007000000
1604780300040400040008000000fa0200000000000000000000040000002d010700040000002d010800050000000902000000000400000004010d000400000002010200070000001b048c03280402000500040000002d010000040000002d01020004000000f0010700040000002701ffff030000001e00050000000102
ffffff0005000000090200000000070000001604780300040000000007000000fc020000000000000000040000002d0107000400000004010d000400000002010200090000001d062100f0000400000400000000090000001d062100f0000400000474030000090000001d062100f0007003040004000000090000001d06
2100f000700304000400fc03040000002d01000004000000f001060004000000f0010b0004000000f001090004000000f001040004000000f0010a0004000000f0010700040000002701ffff0300000000000000000000000000000000000000000000000000000000000000d0cf11e0a1b11ae100000000000000000000
0000000000003b000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01050000050000000d0000004d45544146494c45504943540028210000fee0ffff4831000008002821021f0000
01000900000388180000100010000000000005000000090200003f00050000000102ffffff000400000004010d000400000002010200050000000c0277019101030000001e00040000002701ffff050000000b0200000000030000001e00050000000102ffffff0005000000090200003f0005000000090200003f000400
00002701ffff030000001e00050000000102ffffff0005000000090200003f00070000001604770191010000000007000000fc020000c0c0c0000000040000002d010000050000000902c0c0c000050000000102c0c0c0000400000004010d00040000000201020008000000fa02000000000000c0c0c000040000002d01
0100050000001402000000000500000013020000910108000000fa0200000000000000000000040000002d010200090000001d062100f0000100910100000000040000002d0101000500000014020000000005000000130277010000040000002d010200090000001d062100f000770101000000000007000000fc020000
ffffff000000040000002d010300040000002701ffff030000001e00040000002d010000050000000102c0c0c000050000000902c0c0c00007000000160477019101000000000400000004010d000400000002010200040000002d0101000500000014021600010005000000130216009101040000002d01020009000000
1d062100f0000100900116000100040000002d0101000500000014022c0001000500000013022c009101040000002d010200090000001d062100f000010090012c000100040000002d0101000500000014024200010005000000130242009101040000002d010200090000001d062100f000010090014200010004000000
2d0101000500000014025800010005000000130258009101040000002d010200090000001d062100f0000100900158000100040000002d0101000500000014026e0001000500000013026e009101040000002d010200090000001d062100f000010090016e000100040000002d0101000500000014028400010005000000
130284009101040000002d010200090000001d062100f0000100900184000100040000002d0101000500000014029a0001000500000013029a009101040000002d010200090000001d062100f000010090019a000100040000002d010100050000001402b0000100050000001302b0009101040000002d01020009000000
1d062100f00001009001b0000100040000002d010100050000001402c6000100050000001302c6009101040000002d010200090000001d062100f00001009001c6000100040000002d010100050000001402dc000100050000001302dc009101040000002d010200090000001d062100f00001009001dc00010004000000
2d010100050000001402f2000100050000001302f2009101040000002d010200090000001d062100f00001009001f2000100040000002d0101000500000014020801010005000000130208019101040000002d010200090000001d062100f0000100900108010100040000002d0101000500000014021e01010005000000
13021e019101040000002d010200090000001d062100f000010090011e010100040000002d0101000500000014023401010005000000130234019101040000002d010200090000001d062100f0000100900134010100040000002d0101000500000014024a0101000500000013024a019101040000002d01020009000000
1d062100f000010090014a010100040000002d0101000500000014026001010005000000130260019101040000002d010200090000001d062100f0000100900160010100040000002d0101000500000014027601010005000000130276019101040000002d010200090000001d062100f000010090017601010004000000
2d0101000500000014020100500005000000130277015000040000002d010200090000001d062100f0007601010001005000040000002d0101000500000014020100a0000500000013027701a000040000002d010200090000001d062100f000760101000100a000040000002d0101000500000014020100f00005000000
13027701f000040000002d010200090000001d062100f000760101000100f000040000002d0101000500000014020100400105000000130277014001040000002d010200090000001d062100f0007601010001004001040000002d0101000500000014020100900105000000130277019001040000002d01020009000000
1d062100f0007601010001009001040000002d010300040000002701ffff030000001e00040000002d010000050000000102c0c0c000050000000902c0c0c000070000001604770191010000000010000000fb02efff000000000000bc020000000000000000417269616c000000040000002d010400040000002d010300
10000000fb021400090000000000bc02000000000202022253797374656d0000040000002d010500040000002701ffff030000001e00040000002d010400040000002d010000050000000102c0c0c000050000000902c0c0c000070000001604770191010100010010000000fb02efff0000000000009001000000000000
0000417269616c000000040000002d01060005000000090200003f00050000000102ffffff000400000004010d0004000000020101000a000000320a19003b00020000003232090009000a000000320a19008b00020000003230090009000a000000320a1900db000200000032300900090009000000320a190034010100
00003000090009000000320a1900840101000000300009000a000000320a2f003b00020000003136090009000a000000320a2f008b00020000003139090009000a000000320a2f00db000200000031320900090009000000320a2f003401010000003000090009000000320a2f00840101000000310009000a000000320a
45003b00020000003132090009000a000000320a45008b00020000003132090009000a000000320a4500db000200000031320900090009000000320a45003401010000003000090009000000320a4500840101000000300009000a000000320a5b003b00020000003133090009000a000000320a5b008b00020000003134
090009000a000000320a5b00db000200000031330900090009000000320a5b003401010000003000090009000000320a5b00840101000000300009000a000000320a71003b000200000031390900090009000000320a71009400010000003800090009000000320a7100e400010000003600090009000000320a71003401
010000003000090009000000320a71008401010000003100090009000000320a87004400010000003800090009000000320a87009400010000003800090009000000320a8700e400010000003800090009000000320a87003401010000003000090009000000320a87008401010000003000090009000000320a9d004400
010000003800090009000000320a9d009400010000003700090009000000320a9d00e400010000003700090009000000320a9d003401010000003000090009000000320a9d008401010000003000090009000000320ab300440001000000390009000a000000320ab3008b000200000031340900090009000000320ab300
e400010000003700090009000000320ab3003401010000003000090009000000320ab3008401010000003000090009000000320ac9004400010000003800090009000000320ac9009400010000003700090009000000320ac900e400010000003700090009000000320ac9003401010000003000090009000000320ac900
840101000000300009000a000000320adf003b00020000003130090009000a000000320adf008b00020000003136090009000a000000320adf00db000200000031300900090009000000320adf003401010000003000090009000000320adf00840101000000300009000a000000320af5003b0002000000333109000900
0a000000320af5008b00020000003237090009000a000000320af500db000200000032360900090009000000320af5003401010000003000090009000000320af500840101000000300009000a000000320a0b013b000200000031370900090009000000320a0b019400010000003700090009000000320a0b01e4000100
00003700090009000000320a0b013401010000003000090009000000320a0b01840101000000300009000a000000320a21013b00020000003235090009000a000000320a21018b00020000003234090009000a000000320a2101db000200000031390900090009000000320a21013401010000003000090009000000320a
2101840101000000330009000a000000320a37013b00020000003137090009000a000000320a37018b00020000003137090009000a000000320a3701db000200000031340900090009000000320a37013401010000003000090009000000320a37018401010000003100090009000000320a4d0144000100000039000900
09000000320a4d019400010000003900090009000000320a4d01e400010000003900090009000000320a4d013401010000003000090009000000320a4d018401010000003000090009000000320a6301440001000000390009000a000000320a63018b000200000031330900090009000000320a6301e400010000003700
090009000000320a63013401010000003000090009000000320a63018401010000003100090007000000fc020000000000000000040000002d010700070000001604770191010100010008000000fa0205000000000000003f00040000002d01080007000000fc020000ffffff000000040000002d010900050000000902
ffffff0005000000010200003f000400000002010200070000001b048101a20100000100040000002d010200040000002d010300040000002d010500040000002701ffff050000000b0200000000030000001e00040000002d010600040000002d010900040000002d01080005000000010200003f00050000000902ffff
ff00040000002d010200040000002d010300040000002d010500040000002701ffff050000000b020000ffff030000001e00040000002d010600040000002d010900040000002d01080005000000010200003f00050000000902ffffff0010000000fb02f3ff00000000000090010000000000000000417269616c000000
040000002d010a0010000000fb02efff000000000000bc020000000000000000417269616c000000040000002d010b0010000000fb02efff00000000000090010000000000000020417269616c000000040000002d010c0010000000fb02f3ff000000000000bc020000000000000000417269616c000000040000002d01
0d00040000002d010a00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010900040000002d01080005000000010200003f00050000000902ffffff000700000016047701900101000000040000002d010200040000002d01030004000000
2d010500040000002701ffff030000001e00040000002d010a00040000002d010900040000002d01080005000000010200003f00050000000902ffffff00070000001604770190010100000007000000fc020000e3e3e3000000040000002d010e0004000000f001090008000000fa0205000000000000003f0004000000
2d01090004000000f0010800050000000902e3e3e300050000000102000000000400000004010d0004000000020102000e0000002403050050004d006f014d006f0133015000330150004d0008000000fa0200000000000000003f00040000002d01080004000000f0010900040000002d010200040000002d0103000400
00002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d01080005000000010200000000050000000902e3e3e30007000000160437016f014900500007000000150493001a01910017010500000014021c015000050000000102ffffff000400000004010d00040000000201
01000500000013021c016f010500000014020501500005000000130205016f01050000001402ee005000050000001302ee006f01050000001402d7005000050000001302d7006f01050000001402c0005000050000001302c0006f01050000001402a9005000050000001302a9006f010500000014029200500005000000
130292006f010500000014027b0050000500000013027b006f010500000014026400500005000000130264006f010500000014024d0050000500000013024d006f01040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d01
0800050000000102ffffff00050000000902e3e3e3000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e3000700000016043301
73014d004c0007000000150493001a01910017010500000014024d0089000400000004010d000400000002010100050000001302330189000500000014024d00c3000500000013023301c3000500000014024d00fc000500000013023301fc000500000014024d003601050000001302330136010500000014024d006f01
05000000130233016f01040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e300070000001604770190010100000007000000150493001a019100170108000000fa02
00000100010080808000040000002d01090004000000f00108000500000014024d0050000400000004010d0004000000020101000500000013024d006f0105000000130233016f01050000001302330150000500000013024d005000040000002d010200040000002d010300040000002d010500040000002701ffff0300
00001e00040000002d010a00040000002d010e00040000002d010900050000000102ffffff00050000000902e3e3e300070000001604770190010100000008000000fa0200000000000000003f00040000002d01080004000000f00109000500000014024d0050000400000004010d000400000002010100050000001302
3301500005000000140233014c00050000001302330150000500000014021c014c000500000013021c01500005000000140205014c0005000000130205015000050000001402ee004c00050000001302ee005000050000001402d7004c00050000001302d7005000050000001402c0004c00050000001302c00050000500
00001402a9004c00050000001302a900500005000000140292004c00050000001302920050000500000014027b004c000500000013027b00500005000000140264004c00050000001302640050000500000014024d004c000500000013024d0050000500000014023301500005000000130233016f010500000014023701
50000500000013023301500005000000140237018900050000001302330189000500000014023701c3000500000013023301c3000500000014023701fc000500000013023301fc00050000001402370136010500000013023301360105000000140237016f0105000000130233016f01040000002d010200040000002d01
0300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e3000700000016047701900107000700040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d01
0a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e300070000001604360173014d005000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff000500
00000902e3e3e3000700000016043901760147004a0007000000fc020100000000000000040000002d01090004000000f0010e000500000014024d00550107000000fc020000000080000000040000002d010e0008000000fa0200000100010000008000040000002d010f0004000000f001080005000000090200008000
050000000102000000000400000004010d0004000000020102000e000000240305005501490059014d005501510051014d0055014900050000001402a20027010e0000002403050027019e002b01a2002701a6002301a20027019e000500000014024d006f010e000000240305006f01490073014d006f0151006b014d00
6f0149000500000014025d006f010e000000240305006f01590073015d006f0161006b015d006f0159000500000014028700ac000e00000024030500ac008300b0008700ac008b00a8008700ac0083000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014024d00
4d010e000000240305004d01490051014d004d01510049014d004d014900050000001402c00030010e000000240305003001bc003401c0003001c4002c01c0003001bc000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d014900050000001402a2006f010e000000240305006f01
9e007301a2006f01a6006b01a2006f019e00050000001402560041010e00000024030500410152004501560041015a003d015600410152000500000014024d00c6000e00000024030500c6004900ca004d00c6005100c2004d00c60049000500000014027d002a010e000000240305002a0179002e017d002a0181002601
7d002a01790005000000140276003b010e000000240305003b0172003f0176003b017a00370176003b0172000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f014900050000001402b70030010e000000240305003001b3003401b7003001bb002c01b7003001b300050000001402
4d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014029900af000e00000024030500af009500b3009900af009d00ab009900af0095000500000014024d004f010e00000024030500
4f01490053014d004f0151004b014d004f0149000500000014024d0027010e00000024030500270149002b014d002701510023014d002701490005000000140290003e010e000000240305003e018c00420190003e0194003a0190003e018c000500000014024d0052010e000000240305005201490056014d0052015100
4e014d00520149000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d014900050000001402c00030010e000000240305003001bc003401c0003001c4002c01c0003001bc00050000001402920019010e0000002403050019018e001d019200190196001501920019018e0005000000
1402ce0008010e000000240305000801ca000c01ce000801d2000401ce000801ca00050000001402d000fc000e00000024030500fc00cc000001d000fc00d400f800d000fc00cc00050000001402a400ce000e00000024030500ce00a000d200a400ce00a800ca00a400ce00a00005000000140266004f010e0000002403
05004f016200530166004f016a004b0166004f0162000500000014027b004f010e000000240305004f01770053017b004f017f004b017b004f017700050000001402690030010e00000024030500300165003401690030016d002c016900300165000500000014024d004f010e000000240305004f01490053014d004f01
51004b014d004f0149000500000014026600ff000e00000024030500ff00620003016600ff006a00fb006600ff0062000500000014029b00eb000e00000024030500eb009700ef009b00eb009f00e7009b00eb0097000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d0149000500
000014029000f1000e00000024030500f1008c00f5009000f1009400ed009000f1008c00050000001402a20005010e0000002403050005019e000901a2000501a6000101a20005019e000500000014027400f1000e00000024030500f1007000f5007400f1007800ed007400f1007000050000001402f30005010e000000
240305000501ef000901f3000501f7000101f3000501ef00050000001402990027010e00000024030500270195002b01990027019d0023019900270195000500000014024d0036010e00000024030500360149003a014d003601510032014d00360149000500000014028700e0000e00000024030500e0008300e4008700
e0008b00dc008700e00083000500000014025b003e010e000000240305003e01570042015b003e015f003a015b003e0157000500000014026d0027010e00000024030500270169002b016d002701710023016d00270169000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f014900
0500000014029200d7000e00000024030500d7008e00db009200d7009600d3009200d7008e000500000014029900f4000e00000024030500f4009500f8009900f4009d00f0009900f4009500050000001402cc00e0000e00000024030500e000c800e400cc00e000d000dc00cc00e000c80005000000140269000d010e00
0000240305000d016500110169000d016d00090169000d0165000500000014025f0002010e0000002403050002015b0006015f0002016300fe005f0002015b00050000001402990010010e00000024030500100195001401990010019d000c019900100195000500000014027b00e0000e00000024030500e0007700e400
7b00e0007f00dc007b00e0007700050000001402330150000e0000002403050050002f0154003301500037014c00330150002f010500000014024d003e010e000000240305003e01490042014d003e0151003a014d003e0149000500000014026d0027010e00000024030500270169002b016d002701710023016d002701
6900050000001402620055010e0000002403050055015e0059016200550166005101620055015e000500000014024d0030010e000000240305003001490034014d00300151002c014d00300149000500000014025b003e010e000000240305003e01570042015b003e015f003a015b003e01570005000000140262002a01
0e000000240305002a015e002e0162002a016600260162002a015e0005000000140266004f010e000000240305004f016200530166004f016a004b0166004f01620005000000140290001c010e000000240305001c018c00200190001c019400180190001c018c00050000001402330150000e0000002403050050002f01
54003301500037014c00330150002f010500000014024d004f010e000000240305004f01490053014d004f0151004b014d004f014900050000001402660036010e00000024030500360162003a01660036016a0032016600360162000500000014026d0047010e00000024030500470169004b016d004701710043016d00
4701690005000000140292004d010e000000240305004d018e00510192004d019600490192004d018e000500000014024d0030010e000000240305003001490034014d00300151002c014d0030014900050000001402b000f4000e00000024030500f400ac00f800b000f400b400f000b000f400ac00050000001402ce00
19010e000000240305001901ca001d01ce001901d2001501ce001901ca0005000000140266004f010e000000240305004f016200530166004f016a004b0166004f0162000500000014028b006f010e000000240305006f01870073018b006f018f006b018b006f0187000500000014026b002a010e000000240305002a01
67002e016b002a016f0026016b002a01670005000000140290003e010e000000240305003e018c00420190003e0194003a0190003e018c000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014026d0047010e00000024030500470169004b016d00470171004301
6d004701690005000000140274003e010e000000240305003e017000420174003e0178003a0174003e017000050000001402cc001c010e000000240305001c01c8002001cc001c01d0001801cc001c01c800050000001402800013010e0000002403050013017c0017018000130184000f01800013017c00050000001402
4d006f010e000000240305006f01490073014d006f0151006b014d006f014900050000001402c0001c010e000000240305001c01bc002001c0001c01c4001801c0001c01bc000500000014026d0047010e00000024030500470169004b016d004701710043016d00470169000500000014024d00c3000e00000024030500
c3004900c7004d00c3005100bf004d00c30049000500000014027b00e0000e00000024030500e0007700e4007b00e0007f00dc007b00e000770005000000140269006f010e000000240305006f016500730169006f016d006b0169006f0165000500000014024d00bd000e00000024030500bd004900c1004d00bd005100
b9004d00bd004900050000001402b50047010e000000240305004701b1004b01b5004701b9004301b5004701b1000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f014900050000001402740005010e00000024030500050170000901740005017800010174000501700005000000
14024d00e0000e00000024030500e0004900e4004d00e0005100dc004d00e00049000500000014028700e0000e00000024030500e0008300e4008700e0008b00dc008700e0008300050000001402740005010e0000002403050005017000090174000501780001017400050170000500000014024d00c3000e0000002403
0500c3004900c7004d00c3005100bf004d00c30049000500000014029900e0000e00000024030500e0009500e4009900e0009d00dc009900e000950005000000140274003e010e000000240305003e017000420174003e0178003a0174003e017000040000002d010200040000002d010300040000002d01050004000000
2701ffff030000001e00040000002d010a00040000002d010e00040000002d010f000500000001020000000005000000090200008000070000001604360173014d005000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e0004000000
2d010f0005000000010200000000050000000902000080000700000016047701900101000000040000002d010b00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010e00040000002d010f00050000000102000000000500000009020000
80000700000016043000d7000e00c900040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010e00040000002d010f0005000000010200000000050000000902000080000700000016047701900101000000040000002d010200040000002d01
0300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010e00040000002d010f0005000000010200000000050000000902000080000700000016047701900101000000040000002d010a00040000002d010200040000002d010300040000002d010500040000002701ffff03000000
1e00040000002d010a00040000002d010e00040000002d010f000500000001020000000005000000090200008000070000001604770190010100000005000000090200003f00050000000102ffffff000400000004010d00040000000201010009000000320a2c013f0001000000300007000a000000320a150138000200
00003130070007000a000000320afe003800020000003230070007000a000000320ae7003800020000003330070007000a000000320ad0003800020000003430070007000a000000320ab9003800020000003530070007000a000000320aa2003800020000003630070007000a000000320a8b0038000200000037300700
07000a000000320a74003800020000003830070007000a000000320a5d003800020000003930070007000c000000320a460031000300000031303000070007000700040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d01
0f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701
9001010000000400000004010d00040000000201010009000000320a3f014d0001000000300007000a000000320a3f018200020000003230070007000a000000320a3f01bc00020000003430070007000a000000320a3f01f500020000003630070007000a000000320a3f012f01020000003830070007000c000000320a
3f0165010300000031303000070007000700040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d010d0004000000
2d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016046d01f7005201c7000400000004010d00040000000201010010000000320a5801cc000600000052656361
6c6c090007000700070004000400040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d010200040000002d010300
040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f00070000001604e3002f009e0014000400000004010d00040000000201010010000000fb02f3ff000084038403bc020000000000100000417269616c00
0000040000002d0108000c000000320ade00190009000000507265636973696f6e00040000002d010d0004000000f0010800040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000
090200003f000700000016047701900101000000040000002d010c0007000000fc020000ffffff000000040000002d01080004000000f0010e0008000000fa0200000000000000003f00040000002d010e0004000000f0010f00050000000902ffffff000400000004010d000400000002010200070000001b0494001a01
91001701040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010800040000002d010e00050000000102ffffff00050000000902ffffff000700000016040000ffff0000ffff040000002d010200040000002d010300040000002d0105000400
00002701ffff030000001e00040000002d010c00040000002d010800040000002d010e00050000000102ffffff00050000000902ffffff000700000016040000ffff0000ffff08000000fa0205000000000000003f00040000002d010f0004000000f0010e000500000014029e001c010500000014029e00270105000000
14029e00210107000000fc020000000080000000040000002d010e0004000000f001080008000000fa0200000100010000008000040000002d01080004000000f0010f0005000000090200008000050000000102000000000400000004010d0004000000020102000e0000002403050021019a0025019e002101a2001d01
9e0021019a00050000000902ffffff00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010e00040000002d01080005000000010200000000050000000902ffffff000700000016040000ffff0000ffff040000002d010200040000002d01
0300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010e00040000002d01080005000000010200000000050000000902ffffff000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d01
0c00040000002d010e00040000002d01080005000000010200000000050000000902ffffff000700000016047701900101000000040000002d01090004000000f0010e00040000002d010700040000002d01020004000000f0010800040000002701ffff050000000c0277019101030000001e0005000000010200000000
050000000902ffffff00040000002701ffff050000000b0200000000030000001e0005000000010200000000050000000902ffffff00040000002701ffff030000001e0005000000010200000000050000000902ffffff00070000001604770191010100010008000000fa0200000000000000003f00040000002d010800
040000002d01090005000000010200003f000400000004010d000400000002010200070000001b048001a10100000100040000002d010700040000002d01020004000000f0010800040000002701ffff03000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000}{\result {\fs20 {\pict\wmetafile8\picw8488\pich7938\picwgoal4915\pichgoal4262 \box\brdrs\brdrw15 \piccropl48\piccropt300 
01000900000388180000100010000000000005000000090200003f00050000000102ffffff000400000004010d000400000002010200050000000c0277019101030000001e00040000002701ffff050000000b0200000000030000001e00050000000102ffffff0005000000090200003f0005000000090200003f00040000
002701ffff030000001e00050000000102ffffff0005000000090200003f00070000001604770191010000000007000000fc020000c0c0c0000000040000002d010000050000000902c0c0c000050000000102c0c0c0000400000004010d00040000000201020008000000fa02000000000000c0c0c000040000002d010100
050000001402000000000500000013020000910108000000fa0200000000000000000000040000002d010200090000001d062100f0000100910100000000040000002d0101000500000014020000000005000000130277010000040000002d010200090000001d062100f000770101000000000007000000fc020000ffffff
000000040000002d010300040000002701ffff030000001e00040000002d010000050000000102c0c0c000050000000902c0c0c00007000000160477019101000000000400000004010d000400000002010200040000002d0101000500000014021600010005000000130216009101040000002d010200090000001d062100
f0000100900116000100040000002d0101000500000014022c0001000500000013022c009101040000002d010200090000001d062100f000010090012c000100040000002d0101000500000014024200010005000000130242009101040000002d010200090000001d062100f0000100900142000100040000002d01010005
00000014025800010005000000130258009101040000002d010200090000001d062100f0000100900158000100040000002d0101000500000014026e0001000500000013026e009101040000002d010200090000001d062100f000010090016e000100040000002d0101000500000014028400010005000000130284009101
040000002d010200090000001d062100f0000100900184000100040000002d0101000500000014029a0001000500000013029a009101040000002d010200090000001d062100f000010090019a000100040000002d010100050000001402b0000100050000001302b0009101040000002d010200090000001d062100f00001
009001b0000100040000002d010100050000001402c6000100050000001302c6009101040000002d010200090000001d062100f00001009001c6000100040000002d010100050000001402dc000100050000001302dc009101040000002d010200090000001d062100f00001009001dc000100040000002d01010005000000
1402f2000100050000001302f2009101040000002d010200090000001d062100f00001009001f2000100040000002d0101000500000014020801010005000000130208019101040000002d010200090000001d062100f0000100900108010100040000002d0101000500000014021e0101000500000013021e019101040000
002d010200090000001d062100f000010090011e010100040000002d0101000500000014023401010005000000130234019101040000002d010200090000001d062100f0000100900134010100040000002d0101000500000014024a0101000500000013024a019101040000002d010200090000001d062100f00001009001
4a010100040000002d0101000500000014026001010005000000130260019101040000002d010200090000001d062100f0000100900160010100040000002d0101000500000014027601010005000000130276019101040000002d010200090000001d062100f0000100900176010100040000002d01010005000000140201
00500005000000130277015000040000002d010200090000001d062100f0007601010001005000040000002d0101000500000014020100a0000500000013027701a000040000002d010200090000001d062100f000760101000100a000040000002d0101000500000014020100f0000500000013027701f000040000002d01
0200090000001d062100f000760101000100f000040000002d0101000500000014020100400105000000130277014001040000002d010200090000001d062100f0007601010001004001040000002d0101000500000014020100900105000000130277019001040000002d010200090000001d062100f00076010100010090
01040000002d010300040000002701ffff030000001e00040000002d010000050000000102c0c0c000050000000902c0c0c000070000001604770191010000000010000000fb02efff000000000000bc020000000000000000417269616c000000040000002d010400040000002d01030010000000fb021400090000000000
bc02000000000202022253797374656d0000040000002d010500040000002701ffff030000001e00040000002d010400040000002d010000050000000102c0c0c000050000000902c0c0c000070000001604770191010100010010000000fb02efff00000000000090010000000000000000417269616c000000040000002d
01060005000000090200003f00050000000102ffffff000400000004010d0004000000020101000a000000320a19003b00020000003232090009000a000000320a19008b00020000003230090009000a000000320a1900db000200000032300900090009000000320a19003401010000003000090009000000320a19008401
01000000300009000a000000320a2f003b00020000003136090009000a000000320a2f008b00020000003139090009000a000000320a2f00db000200000031320900090009000000320a2f003401010000003000090009000000320a2f00840101000000310009000a000000320a45003b00020000003132090009000a0000
00320a45008b00020000003132090009000a000000320a4500db000200000031320900090009000000320a45003401010000003000090009000000320a4500840101000000300009000a000000320a5b003b00020000003133090009000a000000320a5b008b00020000003134090009000a000000320a5b00db0002000000
31330900090009000000320a5b003401010000003000090009000000320a5b00840101000000300009000a000000320a71003b000200000031390900090009000000320a71009400010000003800090009000000320a7100e400010000003600090009000000320a71003401010000003000090009000000320a7100840101
0000003100090009000000320a87004400010000003800090009000000320a87009400010000003800090009000000320a8700e400010000003800090009000000320a87003401010000003000090009000000320a87008401010000003000090009000000320a9d004400010000003800090009000000320a9d0094000100
00003700090009000000320a9d00e400010000003700090009000000320a9d003401010000003000090009000000320a9d008401010000003000090009000000320ab300440001000000390009000a000000320ab3008b000200000031340900090009000000320ab300e400010000003700090009000000320ab300340101
0000003000090009000000320ab3008401010000003000090009000000320ac9004400010000003800090009000000320ac9009400010000003700090009000000320ac900e400010000003700090009000000320ac9003401010000003000090009000000320ac900840101000000300009000a000000320adf003b000200
00003130090009000a000000320adf008b00020000003136090009000a000000320adf00db000200000031300900090009000000320adf003401010000003000090009000000320adf00840101000000300009000a000000320af5003b00020000003331090009000a000000320af5008b00020000003237090009000a0000
00320af500db000200000032360900090009000000320af5003401010000003000090009000000320af500840101000000300009000a000000320a0b013b000200000031370900090009000000320a0b019400010000003700090009000000320a0b01e400010000003700090009000000320a0b0134010100000030000900
09000000320a0b01840101000000300009000a000000320a21013b00020000003235090009000a000000320a21018b00020000003234090009000a000000320a2101db000200000031390900090009000000320a21013401010000003000090009000000320a2101840101000000330009000a000000320a37013b00020000
003137090009000a000000320a37018b00020000003137090009000a000000320a3701db000200000031340900090009000000320a37013401010000003000090009000000320a37018401010000003100090009000000320a4d014400010000003900090009000000320a4d019400010000003900090009000000320a4d01
e400010000003900090009000000320a4d013401010000003000090009000000320a4d018401010000003000090009000000320a6301440001000000390009000a000000320a63018b000200000031330900090009000000320a6301e400010000003700090009000000320a63013401010000003000090009000000320a63
018401010000003100090007000000fc020000000000000000040000002d010700070000001604770191010100010008000000fa0205000000000000003f00040000002d01080007000000fc020000ffffff000000040000002d010900050000000902ffffff0005000000010200003f000400000002010200070000001b04
8101a20100000100040000002d010200040000002d010300040000002d010500040000002701ffff050000000b0200000000030000001e00040000002d010600040000002d010900040000002d01080005000000010200003f00050000000902ffffff00040000002d010200040000002d010300040000002d010500040000
002701ffff050000000b020000ffff030000001e00040000002d010600040000002d010900040000002d01080005000000010200003f00050000000902ffffff0010000000fb02f3ff00000000000090010000000000000000417269616c000000040000002d010a0010000000fb02efff000000000000bc02000000000000
0000417269616c000000040000002d010b0010000000fb02efff00000000000090010000000000000020417269616c000000040000002d010c0010000000fb02f3ff000000000000bc020000000000000000417269616c000000040000002d010d00040000002d010a00040000002d010200040000002d010300040000002d
010500040000002701ffff030000001e00040000002d010a00040000002d010900040000002d01080005000000010200003f00050000000902ffffff000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d01
0900040000002d01080005000000010200003f00050000000902ffffff00070000001604770190010100000007000000fc020000e3e3e3000000040000002d010e0004000000f001090008000000fa0205000000000000003f00040000002d01090004000000f0010800050000000902e3e3e3000500000001020000000004
00000004010d0004000000020102000e0000002403050050004d006f014d006f0133015000330150004d0008000000fa0200000000000000003f00040000002d01080004000000f0010900040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d01
0e00040000002d01080005000000010200000000050000000902e3e3e30007000000160437016f014900500007000000150493001a01910017010500000014021c015000050000000102ffffff000400000004010d0004000000020101000500000013021c016f010500000014020501500005000000130205016f01050000
001402ee005000050000001302ee006f01050000001402d7005000050000001302d7006f01050000001402c0005000050000001302c0006f01050000001402a9005000050000001302a9006f010500000014029200500005000000130292006f010500000014027b0050000500000013027b006f0105000000140264005000
05000000130264006f010500000014024d0050000500000013024d006f01040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e300070000001604770190010100000004
0000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e300070000001604330173014d004c0007000000150493001a01910017010500000014024d0089000400000004010d00
0400000002010100050000001302330189000500000014024d00c3000500000013023301c3000500000014024d00fc000500000013023301fc000500000014024d003601050000001302330136010500000014024d006f0105000000130233016f01040000002d010200040000002d010300040000002d0105000400000027
01ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e300070000001604770190010100000007000000150493001a019100170108000000fa0200000100010080808000040000002d01090004000000f00108000500000014024d00500004000000
04010d0004000000020101000500000013024d006f0105000000130233016f01050000001302330150000500000013024d005000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010900050000000102ffffff00050000
000902e3e3e300070000001604770190010100000008000000fa0200000000000000003f00040000002d01080004000000f00109000500000014024d0050000400000004010d0004000000020101000500000013023301500005000000140233014c00050000001302330150000500000014021c014c000500000013021c01
500005000000140205014c0005000000130205015000050000001402ee004c00050000001302ee005000050000001402d7004c00050000001302d7005000050000001402c0004c00050000001302c0005000050000001402a9004c00050000001302a900500005000000140292004c00050000001302920050000500000014
027b004c000500000013027b00500005000000140264004c00050000001302640050000500000014024d004c000500000013024d0050000500000014023301500005000000130233016f01050000001402370150000500000013023301500005000000140237018900050000001302330189000500000014023701c3000500
000013023301c3000500000014023701fc000500000013023301fc00050000001402370136010500000013023301360105000000140237016f0105000000130233016f01040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d
010800050000000102ffffff00050000000902e3e3e3000700000016047701900107000700040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e3000700000016043601
73014d005000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010800050000000102ffffff00050000000902e3e3e3000700000016043901760147004a0007000000fc020100000000000000040000002d010900040000
00f0010e000500000014024d00550107000000fc020000000080000000040000002d010e0008000000fa0200000100010000008000040000002d010f0004000000f001080005000000090200008000050000000102000000000400000004010d0004000000020102000e000000240305005501490059014d00550151005101
4d0055014900050000001402a20027010e0000002403050027019e002b01a2002701a6002301a20027019e000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014025d006f010e000000240305006f01590073015d006f0161006b015d006f01590005000000140287
00ac000e00000024030500ac008300b0008700ac008b00a8008700ac0083000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d014900050000001402c00030010e000000240305003001
bc003401c0003001c4002c01c0003001bc000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d014900050000001402a2006f010e000000240305006f019e007301a2006f01a6006b01a2006f019e00050000001402560041010e00000024030500410152004501560041015a003d0156
00410152000500000014024d00c6000e00000024030500c6004900ca004d00c6005100c2004d00c60049000500000014027d002a010e000000240305002a0179002e017d002a01810026017d002a01790005000000140276003b010e000000240305003b0172003f0176003b017a00370176003b0172000500000014024d00
6f010e000000240305006f01490073014d006f0151006b014d006f014900050000001402b70030010e000000240305003001b3003401b7003001bb002c01b7003001b3000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014024d006f010e000000240305006f0149
0073014d006f0151006b014d006f0149000500000014029900af000e00000024030500af009500b3009900af009d00ab009900af0095000500000014024d004f010e000000240305004f01490053014d004f0151004b014d004f0149000500000014024d0027010e00000024030500270149002b014d002701510023014d00
2701490005000000140290003e010e000000240305003e018c00420190003e0194003a0190003e018c000500000014024d0052010e000000240305005201490056014d00520151004e014d00520149000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d014900050000001402c00030
010e000000240305003001bc003401c0003001c4002c01c0003001bc00050000001402920019010e0000002403050019018e001d019200190196001501920019018e00050000001402ce0008010e000000240305000801ca000c01ce000801d2000401ce000801ca00050000001402d000fc000e00000024030500fc00cc00
0001d000fc00d400f800d000fc00cc00050000001402a400ce000e00000024030500ce00a000d200a400ce00a800ca00a400ce00a00005000000140266004f010e000000240305004f016200530166004f016a004b0166004f0162000500000014027b004f010e000000240305004f01770053017b004f017f004b017b004f
017700050000001402690030010e00000024030500300165003401690030016d002c016900300165000500000014024d004f010e000000240305004f01490053014d004f0151004b014d004f0149000500000014026600ff000e00000024030500ff00620003016600ff006a00fb006600ff0062000500000014029b00eb00
0e00000024030500eb009700ef009b00eb009f00e7009b00eb0097000500000014024d004d010e000000240305004d01490051014d004d01510049014d004d0149000500000014029000f1000e00000024030500f1008c00f5009000f1009400ed009000f1008c00050000001402a20005010e0000002403050005019e0009
01a2000501a6000101a20005019e000500000014027400f1000e00000024030500f1007000f5007400f1007800ed007400f1007000050000001402f30005010e000000240305000501ef000901f3000501f7000101f3000501ef00050000001402990027010e00000024030500270195002b01990027019d00230199002701
95000500000014024d0036010e00000024030500360149003a014d003601510032014d00360149000500000014028700e0000e00000024030500e0008300e4008700e0008b00dc008700e00083000500000014025b003e010e000000240305003e01570042015b003e015f003a015b003e0157000500000014026d0027010e
00000024030500270169002b016d002701710023016d00270169000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f0149000500000014029200d7000e00000024030500d7008e00db009200d7009600d3009200d7008e000500000014029900f4000e00000024030500f4009500f800
9900f4009d00f0009900f4009500050000001402cc00e0000e00000024030500e000c800e400cc00e000d000dc00cc00e000c80005000000140269000d010e000000240305000d016500110169000d016d00090169000d0165000500000014025f0002010e0000002403050002015b0006015f0002016300fe005f0002015b
00050000001402990010010e00000024030500100195001401990010019d000c019900100195000500000014027b00e0000e00000024030500e0007700e4007b00e0007f00dc007b00e0007700050000001402330150000e0000002403050050002f0154003301500037014c00330150002f010500000014024d003e010e00
0000240305003e01490042014d003e0151003a014d003e0149000500000014026d0027010e00000024030500270169002b016d002701710023016d0027016900050000001402620055010e0000002403050055015e0059016200550166005101620055015e000500000014024d0030010e000000240305003001490034014d
00300151002c014d00300149000500000014025b003e010e000000240305003e01570042015b003e015f003a015b003e01570005000000140262002a010e000000240305002a015e002e0162002a016600260162002a015e0005000000140266004f010e000000240305004f016200530166004f016a004b0166004f016200
05000000140290001c010e000000240305001c018c00200190001c019400180190001c018c00050000001402330150000e0000002403050050002f0154003301500037014c00330150002f010500000014024d004f010e000000240305004f01490053014d004f0151004b014d004f014900050000001402660036010e0000
0024030500360162003a01660036016a0032016600360162000500000014026d0047010e00000024030500470169004b016d004701710043016d004701690005000000140292004d010e000000240305004d018e00510192004d019600490192004d018e000500000014024d0030010e000000240305003001490034014d00
300151002c014d0030014900050000001402b000f4000e00000024030500f400ac00f800b000f400b400f000b000f400ac00050000001402ce0019010e000000240305001901ca001d01ce001901d2001501ce001901ca0005000000140266004f010e000000240305004f016200530166004f016a004b0166004f01620005
00000014028b006f010e000000240305006f01870073018b006f018f006b018b006f0187000500000014026b002a010e000000240305002a0167002e016b002a016f0026016b002a01670005000000140290003e010e000000240305003e018c00420190003e0194003a0190003e018c000500000014024d006f010e000000
240305006f01490073014d006f0151006b014d006f0149000500000014026d0047010e00000024030500470169004b016d004701710043016d004701690005000000140274003e010e000000240305003e017000420174003e0178003a0174003e017000050000001402cc001c010e000000240305001c01c8002001cc001c
01d0001801cc001c01c800050000001402800013010e0000002403050013017c0017018000130184000f01800013017c000500000014024d006f010e000000240305006f01490073014d006f0151006b014d006f014900050000001402c0001c010e000000240305001c01bc002001c0001c01c4001801c0001c01bc000500
000014026d0047010e00000024030500470169004b016d004701710043016d00470169000500000014024d00c3000e00000024030500c3004900c7004d00c3005100bf004d00c30049000500000014027b00e0000e00000024030500e0007700e4007b00e0007f00dc007b00e000770005000000140269006f010e00000024
0305006f016500730169006f016d006b0169006f0165000500000014024d00bd000e00000024030500bd004900c1004d00bd005100b9004d00bd004900050000001402b50047010e000000240305004701b1004b01b5004701b9004301b5004701b1000500000014024d006f010e000000240305006f01490073014d006f01
51006b014d006f014900050000001402740005010e0000002403050005017000090174000501780001017400050170000500000014024d00e0000e00000024030500e0004900e4004d00e0005100dc004d00e00049000500000014028700e0000e00000024030500e0008300e4008700e0008b00dc008700e0008300050000
001402740005010e0000002403050005017000090174000501780001017400050170000500000014024d00c3000e00000024030500c3004900c7004d00c3005100bf004d00c30049000500000014029900e0000e00000024030500e0009500e4009900e0009d00dc009900e000950005000000140274003e010e0000002403
05003e017000420174003e0178003a0174003e017000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f000500000001020000000005000000090200008000070000001604360173014d005000040000002d01020004
0000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f0005000000010200000000050000000902000080000700000016047701900101000000040000002d010b00040000002d010200040000002d010300040000002d010500040000002701ffff
030000001e00040000002d010b00040000002d010e00040000002d010f0005000000010200000000050000000902000080000700000016043000d7000e00c900040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010e00040000002d010f0005
000000010200000000050000000902000080000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010b00040000002d010e00040000002d010f000500000001020000000005000000090200008000070000001604770190010100
0000040000002d010a00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f000500000001020000000005000000090200008000070000001604770190010100000005000000090200003f00050000000102ffffff0004
00000004010d00040000000201010009000000320a2c013f0001000000300007000a000000320a15013800020000003130070007000a000000320afe003800020000003230070007000a000000320ae7003800020000003330070007000a000000320ad0003800020000003430070007000a000000320ab900380002000000
3530070007000a000000320aa2003800020000003630070007000a000000320a8b003800020000003730070007000a000000320a74003800020000003830070007000a000000320a5d003800020000003930070007000c000000320a460031000300000031303000070007000700040000002d010200040000002d01030004
0000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a000400
00002d010e00040000002d010f00050000000102ffffff0005000000090200003f0007000000160477019001010000000400000004010d00040000000201010009000000320a3f014d0001000000300007000a000000320a3f018200020000003230070007000a000000320a3f01bc00020000003430070007000a00000032
0a3f01f500020000003630070007000a000000320a3f012f01020000003830070007000c000000320a3f0165010300000031303000070007000700040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010a00040000002d010e00040000002d010f00050000000102
ffffff0005000000090200003f000700000016047701900101000000040000002d010d00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016046d01f7
005201c7000400000004010d00040000000201010010000000320a5801cc0006000000526563616c6c090007000700070004000400040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff000500
0000090200003f000700000016047701900101000000040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f00070000001604e3002f009e0014000400000004010d0004
0000000201010010000000fb02f3ff000084038403bc020000000000100000417269616c000000040000002d0108000c000000320ade00190009000000507265636973696f6e00040000002d010d0004000000f0010800040000002d010200040000002d010300040000002d010500040000002701ffff030000001e000400
00002d010d00040000002d010e00040000002d010f00050000000102ffffff0005000000090200003f000700000016047701900101000000040000002d010c0007000000fc020000ffffff000000040000002d01080004000000f0010e0008000000fa0200000000000000003f00040000002d010e0004000000f0010f0005
0000000902ffffff000400000004010d000400000002010200070000001b0494001a0191001701040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010800040000002d010e00050000000102ffffff00050000000902ffffff00070000001604
0000ffff0000ffff040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010800040000002d010e00050000000102ffffff00050000000902ffffff000700000016040000ffff0000ffff08000000fa0205000000000000003f00040000002d010f
0004000000f0010e000500000014029e001c010500000014029e0027010500000014029e00210107000000fc020000000080000000040000002d010e0004000000f001080008000000fa0200000100010000008000040000002d01080004000000f0010f000500000009020000800005000000010200000000040000000401
0d0004000000020102000e0000002403050021019a0025019e002101a2001d019e0021019a00050000000902ffffff00040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010e00040000002d01080005000000010200000000050000000902ff
ffff000700000016040000ffff0000ffff040000002d010200040000002d010300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010e00040000002d01080005000000010200000000050000000902ffffff000700000016047701900101000000040000002d010200040000002d01
0300040000002d010500040000002701ffff030000001e00040000002d010c00040000002d010e00040000002d01080005000000010200000000050000000902ffffff000700000016047701900101000000040000002d01090004000000f0010e00040000002d010700040000002d01020004000000f00108000400000027
01ffff050000000c0277019101030000001e0005000000010200000000050000000902ffffff00040000002701ffff050000000b0200000000030000001e0005000000010200000000050000000902ffffff00040000002701ffff030000001e0005000000010200000000050000000902ffffff0007000000160477019101
0100010008000000fa0200000000000000003f00040000002d010800040000002d01090005000000010200003f000400000004010d000400000002010200070000001b048001a10100000100040000002d010700040000002d01020004000000f0010800040000002701ffff03000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000}}}}}
\par \pard \ri100\sb80\sa80\nowidctlpar {\lang2057 Concerning the analysis time, on a Sparc Ultra 5, 128M RAM, we got the following results:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li283\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 Cpu time (inclusive of preprocessing time):   5.9 sec. per text (1,125 word/minute)
\par {\pntext\pard\plain\f1 \'b7\tab}User time (inclusive of preprocessing time): 11 sec per text (605 word/minute)
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 In the figure, the distribution of the results in terms of precision/recall are shown for the corpus (each dot is a text). On five texts the results were 100/100.
\par An example of analysis of an ANSA  text with generation of MUC-like templates is shown in the next figure.
\par }{\fs20 {\pict\wmetafile8\picw16448\pich10565\picwgoal9325\pichgoal5990 \picscalex66\picscaley77 
0100090000035e1d00000800310c000000000e00000026060f001200ffffffff000008000000a0f65ef83205ba010a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b025ef8a0f6050000000c025c09920e29020000f700000312010000000042b5e7005239630063738400840010008c001800947b8400a59c9c00c6002100cecece00dada
da00de7b7300dece0000f79c7300ffceb500ffef0000ffef6300ffffff0000000000fffffe019b9b9b02fffe0003807f0004ffff6605ff00fe0680008007ff66ff080000fe0900007e0a6666ff0ba0615f0cbf1f2f0d5f0f170ed979820f00fffe1000807f1166ffff1261616113ffff2a149d9d9d1580801516ffff7e1716
161618c7c7c7198787871a9494941bff05651c5a63631d21848c1e08638c1f00314a2000109c210010ff222131ff23bd4a18249c8c7b25ffffbf26ffff3f27ffbfff28ffbfbf29ffbf7f2affbf3f2bffbf002cff7fff2dff7fbf2eff7f3f2fff7f0030ff3fff31ff3fbf32ff3f7f33ff3f3f34ff3f0035ff00bf36ff007f37
ff003f38bfffff39bfffbf3abfff7f3bbfff3f3cbfff003dbfbfff3ebfbf7f3fbfbf3f40bf7fff41bf7fbf42bf7f7f43bf7f3f44bf7f0045bf3fff46bf3fbf47bf3f7f48bf3f3f49bf3f004abf00ff4bbf007f4cbf003f4d7fffff4e7fffbf4f7fff3f507fff00517fbfff527fbfbf537fbf7f547fbf3f557fbf00567f7fbf
577f7f3f587f3fff597f3fbf5a7f3f7f5b7f3f3f5c7f3f005d7f00ff5e7f00bf5f7f003f603fffff613fffbf623fff7f633fff3f643fff00653fbfff663fbfbf673fbf7f683fbf3f693fbf006a3f7fff6b3f7fbf6c3f7f7f6d3f7f3f6e3f7f006f3f3fff703f3fbf713f3f7f723f3f3f733f3f00743f00ff753f00bf763f00
7f773f003f783f00007900ffbf7a00ff7f7b00ff3f7c00bfff7d00bf7f7e00bf3f7f007fff80007fbf81007f3f82003fff83003fbf84003f7f85003f3f86003f008700003f8800dfdf8900cfcf8a00bfbf8b00afaf8c009f9f8d008f8f8e007f7f8fff00ff90df00df91cf00cf92bf00bf93af00af949f009f958f008f967f
007f97dfdf0098cfcf0099bfbf009aafaf009b9f9f009c8f8f009d7f7f009e00df009f00cf00a000bf00a100af00a2009f00a3008f00a4007f00a5df0000a6cf0000a7bf0000a8af0000a99f0000aa8f0000ab7f0000ac0000dfad0000cfae0000bfaf0000afb000009fb100008fb200007fb3dfdfdfb4cfcfcfb5afafafb6
9f9f9fb78f8f8fb8969696b9ff66ccba00373cbb00ffffbcff6633bd222222be429aa7bf9999ffc0008000c1333366c26666ccc3808080c4808000c5800000c6008080c7ffffccc8990066c9c0c0c0ca395f60cbafcfd0ccbebebecd696969ce2f4f4fcf40a0c0d0f4f4f4d1666666d2b7b7b7d3ccccccd4840010d58c0018
d6c60021d7947b84d8523963d9637384da42b5e7dbdece00dcffef00ddffef63deffceb5dff79c73e0de7b73e1a59c9ce200fa9ae34c4c4ce4bfbfbfe57f7f7fe6e9e9e9e7000080e87f7feae9d5d5d5ea0000d5eb999999ec990000edff7f7feeff0000ef26867df0a0f0e8f140e0d0f25f9ea0f3999900f4ffff7ff5ffff
00f6009900f77fff7ff800ff00f9000099fa7f7ffffb0000fffcd3d3d3fd000000feffffffff04000000340200000300000035000e00000026060f001200ffffffff000008000000a0f65ef83205b8010e00000026060f001200ffffffff000008000000a0f65ef8320598fd07000000fc020000cecece020000040000002d
01010008000000fa02050000000000ffffff00040000002d01020008000000fa0206000800080000000002040000002d010300070000001b0498fd32055ef8a0f6050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0f684f8180562fd07000000
fc020000dadada020000040000002d01040004000000f0010100040000002d01020008000000fa0206000800080000000002040000002d01010004000000f0010300070000001b0462fd180584f8d0f60500000014020000000016000000fb02b0ff0000000000009001000000000000001243656e74757279205363686f6f
6c626f6f6b0000040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010064000000320a27f914f73e0000004e4e4e4e202020204b42584320205a435a43303433362f535841202057454635303235392020522045434f20533041204e49452052363420514258432020
410041004200410016001600160017003e003a0038003a001600160031003a0031003a002c002d002c002c001700320038003a00160017004e003a0035002d002c002d002c002d00160016003a0016003a003a003e00160033002c003a001600410021003a0016003a002c002d0016003e003a0038003a0016001600040000
000201020016000000fb02b0ff0000000000009001000000000000001243656e74757279205363686f6f6c626f6f6b0000040000002d01050004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010067000000320a87f914f74000000046494e414e5a413a20504152
544520494c20313720505245535449544f204d4544494f42414e434120535520424f525345204555524f504545202020202020203500210041003a00410031003a0016001600360039003a0035003a0016002100350017002c002d00160035003a003a0032003500210035003f0016004b003a003e0021003e003a003a0041
003a003900170032004100170039003f0039003300390017003900420039003f0035003a003a001600160016001600170016001600040000000201020016000000fb02b0ff0000000000009001000000000000001243656e74757279205363686f6f6c626f6f6b0000040000002d01030004000000f0010500040000002e01
1800050000000a02000000000500000009020000000204000000020101002b000000320ae7f914f71800000028414e534129202d20524f4d412c203134204d4152202d201b003900420032003a001a0017001a00170039003f004b003a00160016002d002c0016004c003a003a0016001a0017000400000002010200160000
00fb02b0ff0000000000009001000000000000001243656e74757279205363686f6f6c626f6f6b0000040000002d01050004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010087000000320a47fa14f7550000005072656e646572612720617676696f206c756e65
646927203137206d61727a6f206c27206f66666572746120616c20707562626c69636f2064656c20707265737469746f206f62626c6967617a696f6e6172696f200035002400280031002e00280023002d00100016002d002b002b0019002800160019003100310028002e001900100017002c002d00160047002d00230027
002800160019001000160028001b001b00280023001f002d0016002d00190016002e0031002c002d00190019002400280016002e002800190016002e002400280025001f0019001f002800160028002d002c001a0019002b002c0027001900280031002c002400190028001600040000000201020016000000fb02b0ff0000
000000009001000000000000001243656e74757279205363686f6f6c626f6f6b0000040000002d01030004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101008a000000320aa7fa14f75700000027274d6564696f62616e636120696e204563752031393937202d20
3230303120496e646963697a7a61746f20616c6c6520426f727365206575726f7065652727206469206e6f6d696e616c69203735206d696c696f6e6900100011004b0028002e00190028002d002c00310024002c0016001a003000170039002400310016002d002c002d002c0016001b0016002d002c002d002c0016002100
31002e00190023001a00260027002c001f00280016002d0019001900280016003a002800240025002800160028003100230028002e00280028001100100016002e0019001700300028004800190031002c0019001a0016002c002d0016004700190019001a00280031001900040000000201020016000000fb02b0ff000000
0000009001000000000000001243656e74757279205363686f6f6c626f6f6b0000040000002d01050004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101008b000000320a07fb14f758000000206469204563752e204c276f66666572746120647572657261272033
2067696f726e69202866696e6f20616c203139206d61727a6f292c2073616c766f20636869757375726120616e74696369706174612073656e7a612016002e0019001700390024003100160016003600100028001b001a00280024001f002c0017002d0031002400280023002d00100016002d0016002b0019002800240031
00190016001b001a001a003000280017002c00190017002c002d00160047002c002400260028001b001600160025002d0019002b002800160024003100190031002500310023002d0016002c0031001f001a00230019002e002d001f002c00170025002800310026002c001700040000000201020016000000fb02b0ff0000
000000009001000000000000001243656e74757279205363686f6f6c626f6f6b0000040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010087000000320a67fb14f75500000070726561767669736f2e20496c20706167616d656e746f20646569
207469746f6c6920652720707265766973746f2070657220696c203234206d61727a6f2e204c65206f62626c6967617a696f6e6920736f6e6f20002e00230028002d002b002b00190025002800160017002000190017002d002d002b002c004800280030002000280016002e002800190016001f0019002000280019001900
16002800110016002e00230028002b00190025002000280016002e002800230016001a00190016002d002c00160047002d002300270028001600160036002800160028002c002d00190019002b002d0026001900280031001a00160025002800310028001600040000000201020016000000fb02b0ff000000000000900100
0000000000001243656e74757279205363686f6f6c626f6f6b0000040000002d01050004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010085000000320ac7fb14f754000000656d6573736520616c6c6120706172692c206e656c207461676c696f20756e69636f
20646120322e35303020456375206e6f6d696e616c692028706f636f206d656e6f2064692035206d696c696f6e692064692028004700280025002500280016002d00190019002d0016002e002c002400190016001700300028001a0016001f002d002a001a001900280016003100310019002400280016002e002c0016002d
0016002d002c002d0016003a00230031001600310028004700190031002d001900190016001b002e002800230028001700470028003100280016002e00190016002d001600470019001a00190028003100190016002e0019001600040000000201020016000000fb02b0ff0000000000009001000000000000001243656e74
757279205363686f6f6c626f6f6b0000040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010088000000320a27fc14f7560000006c697265292065642068616e6e6f20756e612064757261746120717561647269656e6e616c652e204920746974
6f6c692c206f66666572746920616c20707562626c69636f20646120756e20636f6e736f727a696f2019001900240028001b00160028002e00160031002c003100310028001600310031002c0017002e00310023002d001f002c0016002d0031002c002e00240019002800310031002c001900280017001600200017001f00
19001f002800190019001700160028001a001b00280024001f00190016002d00190016002e0031002c002d00190019002400280016002e002c0017003100300017002300280031002500280024002600190028001600040000000201020016000000fb02b0ff0000000000009001000000000000001243656e747572792053
63686f6f6c626f6f6b0000040000002d01050004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010088000000320a87fc14f756000000646920636f6c6c6f63616d656e746f2070726f6d6f73736f2065206469726574746f206461204d6564696f62616e63612061
6c207175616c65207061727465636970616e6f203433206973746974757a696f6e692c202e00190016002400280019001900280024002c004700280031001f00280017002e0023002800470028002500250028001600280017002e001900230028001f002000280016002e002c0017004b0028002e00190028002d002c0031
0024002c0016002d00190016002d0030002d001900280016002e002d0023001f002800240019002e002d003000280017002c002d001600190025001f001900200030002700190028003100190016001700040000000201020016000000fb02b0ff0000000000009001000000000000001243656e74757279205363686f6f6c
626f6f6b0000040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010096000000320ae7fc14f75f00000076657272616e6e6f2072696d626f727361746920696e20756e27756e69636120736f6c757a696f6e6520616c6c612073636164656e7a61
2c2073656e7a61206661636f6c7461272064692072696d626f72736f20616e746963697061746f2e002b002800230024002c0031003100280016002400190047002d002800230025002d001f00190016001a0030001700310030001100310030001a0023002d001600250028001900310026001a0028003000280017002c00
19001a002c001600250024002c002e002800310027002c001600170025002800300027002c0017001a002d00230028001a001f002c00100017002e00190016002400190047002c00280024002500280016002d0031001f00190023001a002d002d001f002800160004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000f0f738fda80258010e00000026060f001200ffffffff000008000000f3f738fda802580107000000fc020000ffffff020000040000002d01050004000000f0010400040000002d010200070000001b045901a90238fdf3f70a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff000008000000f0f741fda5f8edfd070000001b04eefda6f841fdf0f70a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000029f841fdf6fbedfd070000001b04eefdf7fb41fd29f80a00000026060f000a00ffffffff010000
0000000e00000026060f001200ffffffff00000800000009fbadfd010159fe070000001b045afe0201adfd09fb16000000fb02a8ff00000000000090010000000000000012426f6f6b6d616e204f6c64205374796c65000000040000002d01040004000000f0010300040000002e011800050000000a020000000005000000
09020000000204000000020101003a000000320a19fe43fb220000004b494e443a2020202020707265737469746f206f62626c6967617a696f6e6172696f3f001e00410047001c001c001c001c001c001d00360027002e002d0022001a00220031001c003100370037001a001a00300033002a001a0032003a00330027001a
00310004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000009fb1afef7fcc6fe07000000fc020000ffffff020000040000002d01030004000000f0010500070000001b04c7fef8fc1afe09fb16000000fb02a8ff00000000000090010000000000000012
426f6f6b6d616e204f6c64205374796c65000000040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a86fe43fb070000004953535545523a001e003a003a0045003f003f001d0004000000020102000a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff00000800000095fc86fe5c0032ff07000000fc020000ffffff020000040000002d01040004000000f0010300070000001b0433ff5d0086fe95fc16000000fb02a8ff00000000000090010000000000000012426f6f6b6d616e204f6c64205374796c650000000400
00002d01030004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320af2fecffc100000004e414d453a204d6564696f62616e636141003c0051003f001c001d0051002d0037001a003200360033003a002e00330004000000020102000a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000095fcf3fec8019fff07000000fc020000ffffff020000040000002d01050004000000f0010400070000001b04a0ffc901f3fe95fc16000000fb02a8ff00000000000090010000000000000012426f6f6b6d616e204f6c64205374796c6500
0000040000002d01040004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010028000000320a5fffcffc16000000454e545f545950453a204f5247414e495a4154494f4e3f00410037002c003700380037003f001c001c0047003f0046003c0041001e0039003b0037
001e004600410004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000009fb60ff53020c0007000000fc020000ffffff020000040000002d01030004000000f0010500070000001b040d00540260ff09fb16000000fb02a8ff000000000000900100000000
00000012426f6f6b6d616e204f6c64205374796c65000000040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010042000000320accff43fb27000000414d4f554e543a2020202020206e6f6d696e616c69203735206d696c696f6e692064692045
6375003c00510046004500410036001d001c001c001c001c001c001c003b00310053001a003a0033001a001b001c00370036001c0053001a001b001a0031003b001a001c0037001a001c0040002d003c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800
000009fbccff81fe780007000000fc020000ffffff020000040000002d01040004000000f0010300070000001b04790082feccff09fb16000000fb02a8ff00000000000090010000000000000012426f6f6b6d616e204f6c64205374796c65000000040000002d01030004000000f0010500040000002e011800050000000a
02000000000500000009020000000204000000020101001c000000320a380043fb0e00000043555252454e43593a2020456375410045003f003f0040004100410038001d001c001c003f002e003c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
09fb3900a201e50007000000fc020000ffffff020000040000002d01050004000000f0010400070000001b04e600a301390009fb16000000fb02a8ff00000000000090010000000000000012426f6f6b6d616e204f6c64205374796c65000000040000002d01040004000000f0010300040000002e011800050000000a0200
00000005000000090200000002040000000201010034000000320aa50043fb1e00000041564552414745204455524154494f4e3a202031393937202d20323030313c003d0040003f003c00460040001c00460045003f003c0037001e00460041001c001c001d0036003700360037001c0023001c0037003700360037000400
0000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000009fba5006702510107000000fc020000ffffff020000040000002d01030004000000f0010500070000001b0452016802a50009fb16000000fb02a8ff00000000000090010000000000000012426f6f6b6d
616e204f6c64205374796c65000000040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101003f000000320a110143fb25000000504c4143454d454e5420444154453a202020202020206c756e6564ec203137206d61727a6f00370034003c004100
400051003f00410037001c0046003c0037003f001c001c001c001d001c001c001c001c001b003b003b002d0037001a001c00370037001c005200330027002a00320004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffff
ff00000800000050f8cefea8f92201040000002d01020007000000fc020100000000000000040000002d01040004000000f001010004000000f001030010000000fb021400090000000000bc02000000000202022253797374656d0000040000002d01010004000000f0010500030000001e000700000016042201a8f9cefe
50f80b00000026060f000c00544e50500200020000000100030000001e00040000002e010000050000000a020000000005000000090200000000050000000102ffffff0007000000fc020000ffffff000000040000002d01030008000000fa0200000000000000000000040000002d0105000400000004010d00040000002e
011800040000000201010005000000090200000002050000000102ffffff02030000001e0004000000070103000400000007010300310c0000430f2000cc000000b50071000000000054025801cefe50f82800000071000000b500000001000800010000001e140000120b0000120b00000000000000000000ffffff00b5ce
ff00739cf7002100c600737bde009c9ca50018008c0010008400847b9400633952008473630063efff0000000000e7b5420000cede0000efff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ff
ffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00
ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff
00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffff
ff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ff
ffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00
ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff
00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffffff00ffff
ff003a00010b080e00030f0b00002b000000390001010b0e010b2b00000039000003050f0e00040e010f040e00030f0b00002900000039000101030e090f010e2a0000003a00020e0b0f2a0000003a00010b020e080f00030e0b0000290000003a0001010b0f010b2a0000003a000101020e090f010b2a0000003a00010502
0e090f010b2a0000002e0001010b0000040b0f0e0e080f01012a0000002e0000030d010000090000040e060f0e080f1c0001010e0000002c000003010001000a000003010e0f00020e070f010e190000060100010d010002010a000000390000030b0e0300090f010b160001010200010d020100040001000d020501010800
00002e00010104000101050000040e0f0e0e070f00030e0b000014000005010d0005010002000004010d0501030001010700000014000004010b0e01140000090d01000001040501040003000005010e030f0e00080f010b1300000401000801030000030a050000060001050700000012000003010b0f00030f1200000301
000100020000030105000003000101020000030e040e00020e080f010112000003010d05000300020508000101080000001000010b030f020e020f010115000003040100000700040e090f0f00000801000105000100010205070001080205010d0205060000000e00010b060f00050e040e0f01001200030108000101040e
020f010e060f0e000005010d010d010002000003050d0100050003050400000301080000050000000c00010b070f00060e0603030e0f12000003010500000800050e020f020e040f010e0e00010502010004000d0801020000060d0100010801050002050003000a01000500000009000003010b0f00070f00030e04030003
03020f110001040a00040e00030f0e03000303030f010b0c0002050300020500050001000001000205010d03000004010d01050200000401080d0104000000070001010c0f0503020f010b0f0001040a000101030e020f010e0403030f010b0a000205030000030a0500000400000a01080000010008050001020003050003
00010d0004000000050001010e0f010e0303010e030f01010e0001050b00010b020e00030f0e02000403010e020f010b0800000501050000010002050500000401050d010200020502000004010d050505000105040000000300010b120f020e040f01010c00030d0c00020e020f010e0403030f0800010803000003080d00
0004000003050d0100030000030a0100000200020509000101030000000300180f010e0a00000301000d00050d0b00010e020f00040e0f020e020f00030e0f01000500000301050000020000030800010003000005050800010000030503000205060000040100050502010300000002000003010f0e00160f010b0a00080d
0b000005010e0f0b0e00020b0101020b010104000007050d000001080d0004000003010a00000200000301080000030000030a0500000500020500060d0100000d0503000000020000030b0e0f00150f00030e01000008000b0d1600000a0501050001050d0100010200020503000003050d01000200020506000305060001
05030000000200030e0e0f00040e0f0e0f030e010b080001010c0d1500010503000003010501000200000401000a05030000030a050000020000030a010000050000030a05000008000105030000000200010b030e0b0f080e0201080001040e0d110000080105000001050d01030000030d05010002000205010102000205
050003050b0002050200000002000101040e070f030e0108020e03010b00000304000d000d0d0e00000301000500030000030a0100000400000608010000080502000201010805000003010a00000e000109020000000300010b030e060f030e010b02010600010107000004010500000e0d0c000003010d05000200000305
080000040002050300010803000205010d03000004010d05051000010a020000000400050e020f020e00030b010000090001010700000308010000100d0b0001080300010a0300000401000505030000060a010001000a05000003010a01000d0001010400010a020000000400010b070e01010d0001040500000305010000
0200100d0b0000030100050003000004010d05050200000705080000010d05000400010102050d0000030105000004000201010000000500070e0e0000030504000002000003040100000300110d0a00000305000800030000060a010000010a030000030a0d0100040000030a050000090001010200010508000105010d01
00000005000101050e100000050105010501000500120d0a000003050005000205030002050200020501010400020501010a000004010d010103000101060001010100000006000101020e00030b0100001900130d0a00000305080000020000030a0500000200010a03000004010005050c0000030105000004000003010d
010005000105010000002500140d090001050200000305080000020002050500020509000005010001010d000500000305010000060001010100000025000101140d0800000301050a0003000003010a0000040000030a010000080000030d000d000201040002050a000105010000002600150d06000003010d0500030002
05040002050b0000030105010004000003010500000b000101010000002600160d060000030100010002050500010a0a000003010005000300000401000501080001050500010d010000002700160d0600000305000a0004000205080000050100010d010003000003010d0500080000030501000005000101010000002600
180d060000040100080002050a0000030d01000003000003010500000700020509000105010000002600190d050000030500010002050a000003050100000300020507000003010500000b00010500002700190d0101040000030a050000080000030501000003000003010501000600010d02010d0001010100000027001a
0d05000101080001050400000305010d0006000003010501000900000301050100050000001f000101020500030d01000002001b0d0101030001050700010103000003050100000600000305010000050001010200000605010d01000d0400010500001c0000040100080503000004010a00001c0d04000101080002050600
000305080500080000030d000500050001010400010100001c0000030d050000060000030a000d001c0d0101020000030d0100000600010a04000301010a0b000101060001010400010500001b0000030a010000080000030a000d001c0d0300010506000003050a000002000105020000030d080000090001010700010504
00010500001a0001050b000003010a0d00190d020001050400010805000007080100050805080002051800010100001800020a01050c000105170d0500010505000105050000070a050a01050a01000300010a0600000305000500070001050400010d0000160000060508010108010c00010a120d09000105050001080500
0003050801000301010a02000003050100000200000305000100030001010600010104000101000016000105040101090d000f0d0c000105060000060a010000010905010109040a00030005010005000003010d00000500010504000105000015000205040101080c000c0d0003000d00000d0001050500000305010d0002
0000030d0401000401000509050a0a0500090001010c0000001500020900050a0501010a000d00090d1300010a06000108020000030108010003010205000300010000060000050d0100000500060001050500000013000105020a000709020808050901000c00050d17000105050000030501080002000006090501010508
0800030103000105030000030500050006000000130000030500090002090005010509050d000c00010d1c0000070501000100050000020500060a0508090a050700000305010d0006000305090000001400000309050a00020a000405010a01080002012000020500030d010500030a0b00000305000100040001050f0000
001500020a01080c000501240000030500050008000205050002050b0001010400000014000003010500000d00060122000205000301050000040000030500050004000003050100000a00000305000500050000002400080121000003010d010004000105050002050a000003010501000800000023000a0121000003010d
01000600000305010000080000040105000509000201000023000c011f00000301000500040002050800010102050b0002050200000022000e011e000003050005000b000003050005000b0000030501000004000000220010011d000003010d00000700010102050b000003010501000700000002000b0100040001000110
0012011d00010504000003050105000c00020101050a000000040001010202010409020104080206010003000201000b01010006011a00000305000500100002050d00000007000003010502000a020003040a08000f020901020003011b0003010d000003050100000f0000000900010a0204020201040402000609080204
090404020104040201040402080100030401000003011c00010d0a00000301050100120000000800010803000105020201050202010905020109060201040802060100030203040003011d00010108000003050100001400000007000003010500000400000505010208040004020204010809020104030207010005040306
04000002011d0001010400000301050100170000000700010a060000070108000a05020400040201090b020104020206010104030302011e0000050500010105001a00000007000108070000030a000a0002000006010402040209020201040a0207010104020304011d000003010500001c0000000700010a070000030a00
0a0004000201010502090108020408020a010102030105000101370000000700010a070000030a000a00070000040a010205020901040502100105000003080500003400000007000105060000050501000501000500000505010000010002020208000309040100110106000205340000000800010a0500010a0300010a05
00010a040005010004050908020e0108000003050100003200000008000006010a000005080500000508050d010a00040008010205020801050c0107000003010d0100320000000a000003050a01000800020105000c010003080a08000a0108000105330000001b0004010003020801000601000402010505020801050501
08000003010d0100320000001b0004010003050a01000601010a05010003080905000401070000030d010000320000001b000401000304090100050100030209010006010105020800030501000006000105340000001a0005010003080c0100050100030509010009010105020a06000105340000001a000501000308090b
0005010003080c01000b0101000605350000001900060100030809010005010003080901000b013c0000001900060100030509010005010003050902000b013c00000019000701010906010003020901000b013c00000018001001010a0c013c00000018001d013c00000017001e013c00000017001e013c00000017001e01
3c00000016001f013c00000016001f013c000000150020013c000000150020013c000000150020013c000000140021013c000000140022013b000000130022013c000000130022013c000000130022013c000000120024013b000000110024013c000000120024013b000000100025013c000000110025013b000000100025
013c000000100026013b0000000f0026013c0000000f0027013b0000000e0028013b0000000e002701000300010000390000000d0028010004020804080201360000000d00290106060101340000000d00290106060108340000000c002101000302050400020400030803080007060104340000000c001801000702050404
060903001006000303040000330000000b000f0102040005080308030900190602030104340000000b0003010004000100010500010520060403010534000000150001051f06070301043400000013000003050306001d060903010434000000120001041d060c0301013400000011001b0610030104340000001000010116
06000303060300110300030601000033000000110002060003070607000d06190301053400000012000203000306030600020600050306030306001e03010134000000120001012903010134000000130000030406030025030003060100003300000014000104270335000000140001012703010134000000150000030106
030024030101340000001600010425030101340000001700250335000000180024033500000018000104230335000000190001042203350000001a002203350000001a0001012103350000001b0001042003350000001c0001051e030104350000001c0001011f03350000001d0001011d030104350000001e0001041c0301
04350000001e000003010403001a0301043500000020001b03010435000000200001011a03010435000000210000030406030017030101350000002200010418030104350000002200010118030101350000002300010117030105350000002400010416030101350000002400000301040300130300030601000034000000
2500010115030101350000002600010514033600000027000104130301013500000028001303360000002800000301060300100336000000290001011103360000002a0001041003360000002b000f030106360000002b0001010e030104360000002c0001040e03360000002d000e03360000002e000b0300030604000035
0000002e0001040c03360000002f0001040a0301043600000030000b033600000030000101080300030604000035000000310001040803010436000000320001040703010436000000330007030104360000003400060301043600000034000003040603000303010436000000350001040403010436000000350001010403
010536000000360001010303010436000000370001040203010136000000380000030403040036000000380000030103010036000000390000030102000035000000710000000001040000002701ffff040000002701ffff0a00000026060f000a00544e5050030000000000040000002d010200040000002d010400040000
002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000016f854fde8fb00fe16000000fb02a8ff00000000000090010000000000000012426f6f6b6d616e204f6c64205374796c65000000040000002d010600040000002e011800050000000a020000000005000000
09020000000204000000020101001f000000320ac0fd50f8100000003c424f4e4449535355452d313e203a3d350041004600410047001e003a003a00440040002300370034001d001c00350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f0f730
fda802b80108000000fa0206000800080000000002040000002d010700070000001b04b801a80230fdf0f70a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff0100
00000000040000002d010200040000002d01040004000000f0010700040000002d01010004000000f00106000300000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff}}
\par {\lang2057 
\par }\pard\plain \s18\li560\ri100\sb1440\sa360\keepn\nowidctlpar \b\f8\fs72\lang1024 {\lang2057 \page PART 2               Reference Manual
\par }\pard\plain \ri-58\sb80\sa80 \f8\lang1024 {\lang2057 This part is devoted to the description of the syntax for PINOCCHIO resources. Large part of the section is devoted to the G-FST resources.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104275}1. G-FST Syntax{\*\bkmkend _Toc433104275}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This part is devoted to the description of the syntax for G-FST resources.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104276}1.1 Syntax for  G-FST Grammars{\*\bkmkend _Toc433104276}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Here follows the definition for a G-FST grammar}{\cs26\fs16\up6\lang2057 \chftn {\footnote \pard\plain \s22\ri100\sb80\sa80 \f8\lang1024 {\cs26\fs16\up6 \chftn } {\fs20 In the definition:
\par }\pard \s22\li720\ri100\sb80\sa80 {\f3\fs20\super *}{\fs20   is the Kleene star (0 to many occurrences); 
\par }{\f3\fs20\super +}{\fs20   means 1 to many occurrences
\par }{\f3\fs20\super ? }{\fs20 means optionality (0 or 1 occurrences). }}}{\lang2057 :
\par }\pard\plain \s62\li720\ri102\sb20\sa20\nowidctlpar \f3\fs20\lang1024 {\lang2057 (GRAMMAR-NAME }{\i\lang2057 <lisp-symbol>}{\lang2057 )
\par (DECLARE DEBUG-LABEL }{\i\lang2057 < lisp-symbol>}{\lang2057  
\par \tab  :eq-function }{\i\lang2057 <lisp-symbol>}{\lang2057 
\par \tab  :compilation-function }{\i\lang2057 <lisp-symbol>}{\lang2057 )}{\lang2057\super ?}{\lang2057 
\par (DECLARE STX-PREFERENCE }{\i\lang2057 label1 label2... labeln}{\lang2057 )}{\lang2057\super ?}{\lang2057 
\par (DECLARE TFS-OPAQUE-CONSTITUENTS  
\par \tab :UP }{\i\lang2057 label-list}{\lang2057   :DOWN }{\i\lang2057 label-list}{\lang2057   :BOTH }{\i\lang2057 label-list}{\lang2057 ))}{\lang2057\super  ?}{\lang2057 
\par (DEF-FST-RULE }{\i\lang2057 <lisp-symbol>}{\lang2057 
\par \tab :APPLY-WHEN (}{\i\lang2057 label}{\up13\lang2057 +}{\lang2057 )}{\i\lang2057  }{\lang2057 | ( ALWAYS )
\par \tab :REGEXP (}{\i\lang2057 condition}{\up13\lang2057 +}{\lang2057 )
\par \tab :ACTION \{}{\i\lang2057 action}{\up13\lang2057 +}{\lang2057 \}    )}{\up13\lang2057 +}{\lang2057 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 A grammar is always introduced by the declaration of the grammar name.
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (GRAMMAR-NAME }{\i\lang2057 <symbol>}{\lang2057 )
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
Then a declaration of the debug label used in the grammar must follow; the debug label is the label shown by the grapher used to draw  the FSTs for debugging reasons. An equivalence function that tells when two labels can be considered as eq
uivalent is associated to each debug label. Each debug label has also a compilation function that compiles the debug labels for optimisation matters.
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (DECLARE DEBUG-LABEL }{\i\lang2057 label}{\lang2057  
\par \tab  :eq-function }{\i\lang2057 function-name}{\lang2057 
\par \tab  :compilation-function }{\i\lang2057 function-name}{\lang2057 )
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 An example of such a declaration is the following
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (DECLARE DEBUG-LABEL head-sem 
\par \tab  :eq-function kb::tipo-compatibile
\par \tab  :compilation-function identity)
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 which is the declaration of the grammar for modifier attachment. The DEBUG-LABEL is }{\f3\fs20\lang2057 head-sem, }{\lang2057 the equivalence function is }{\f3\fs20\lang2057 kb::tipo-compatibile, }{
\lang2057 while there is no necessity of compiling the values declared as }{\f3\fs20\lang2057 head-sem}{\lang2057 .}{\f3\lang2057 
\par }{\lang2057 There is also the possibility of influencing the non-determinism when present in the automata (a  feature to  be avoided at any level), by declaring some of the debug labels as preferred with respect to the others.
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (DECLARE STX-PREFERENCE }{\i\lang2057 label1 label2... labeln}{\lang2057 )
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 For example in the grammar for A-structure recognition the following declaration is found:
\par }\pard \li720\ri100\sb80\sa80 {\f3\fs20\lang2057 (DECLARE STX-PREFERENCE pp-mark adjunct)}{\lang2057 
\par }\pard \ri100\sb80\sa80 {\lang2057 that means that in case an FST in a particular state has two exiting arcs marked with }{\f3\fs20\lang2057 pp-mark }{\lang2057 and }{\f3\fs20\lang2057 adjunct, }{\lang2057 then the }{\f3\fs20\lang2057 pp-mark}{\lang2057 
 arc is to be preferred.
\par The }{\f3\fs20\lang2057 STX-PREFERENCE }{\lang2057 
declares as a matter of fact a precedence list among the different debug labels (from the preferred to the non preferred). If a debug label is not present in the list, then it is supposed to be non preferred. The choice between two non declared labels is 
random.
\par Then there is the possibility of influencing the search space building of some module (currentl
y only for modifier attachment), by declaring some shadowing in the automatic construction of the search space. This part is just preliminary and must be left as it is (i.e., it must not be modified when adapting the resources to other domains and languag
es).
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057  (DECLARE TFS-OPAQUE-CONSTITUENTS  
\par \tab :UP }{\i\lang2057 label-list}{\lang2057   :DOWN }{\i\lang2057 label-list}{\lang2057 
\par  \tab :BOTH }{\i\lang2057 label-list}{\lang2057 ))
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 The rest of the grammar is composed by G-FST rules declaration. The rule declaration order  is the same that will be found in the cascade.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104277}1.2 Syntax for the  Generic G-FST Rule{\*\bkmkend _Toc433104277}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
A G-FST rule is composed by a condition and an action. The condition is a regular expression aimed at verifying the applicability of the rule in a  specific context; it also is used to identify the elements on which the action will work. The action is a l
ist of possible operations to be  performed on the elements identified by the condition; each element in the action can fail; when part of the action fails also the application of the rule fails.
\par When a rule is compiled:
\par {\pntext\pard\plain\f1 _\tab}}\pard \fi-360\li1080\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb _}}{\lang2057 the regular expression is transformed in a finite state automata
\par {\pntext\pard\plain\f1 _\tab}the action is transformed in a list of function calls.
\par }\pard \ri100\sb80\sa80 {\lang2057 
The action is performed only when the automata reaches a final state. This means that G-FSTs are equivalent to FSTs where the action associated to an arc is always the null action, except for the arcs whose target is a final state; for these latter arcs t
he action is composed by the whole  rule action.
\par A rule in G-FST has the syntax expressed by the following expression:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (DEF-FST-RULE }{\i\lang2057 rule-name}{\lang2057 
\par \tab :APPLY-WHEN (}{\i\lang2057 label}{\up13\lang2057 +}{\lang2057 )}{\i\lang2057  }{\lang2057 | ( ALWAYS )
\par \tab :REGEXP (}{\i\lang2057 condition}{\up13\lang2057 +}{\lang2057 )
\par \tab :ACTION \{}{\i\lang2057 action}{\up13\lang2057 +}{\lang2057 \})
\par }\pard\plain \fi-410\li410\ri100\sb80\sa80 \f8\lang1024 {\lang2057 where:}{\f3\fs20\lang2057 
\par }\pard \fi-410\li1130\ri100\sb80\sa80 {\i\f3\fs20\lang2057 rule-name:= }{\f3\fs20\lang2057 is a symbol}{\i\f3\fs20\lang2057 
\par condition:= ELem}{\b\f3\fs20\lang2057  }{\b\f3\fs28\lang2057 <}{\i\f3\fs20\lang2057 el-condition-list}{\b\i\f3\fs20\lang2057  }{\b\f3\fs28\lang2057 >}{\i\f3\fs20\lang2057 
\par ELem:=}{\b\f3\fs20\lang2057  EL1}{\f3\fs20\lang2057 |}{\b\f3\fs20\lang2057  EL2}{\f3\fs20\lang2057 |}{\b\f3\fs20\lang2057  EL3}{\f3\fs20\lang2057 |}{\b\f3\fs20\lang2057  EL4}{\f3\fs20\lang2057 |}{\b\f3\fs20\lang2057  EL5}{\f3\fs20\lang2057 |}{
\b\f3\fs20\lang2057  EL6}{\f3\fs20\lang2057 |}{\b\f3\fs20\lang2057  EL7}{\f3\fs20\lang2057 |...}{\i\f3\fs20\lang2057 
\par el-condition-list:= SIMPLE-CONDITION <comma>}{\f3\fs20\lang2057 
\par }\pard \li720\ri100\sb80\sa80 {\i\f3\fs20\lang2057 action:=}{\b\f3\fs20\lang2057  }{\i\f3\fs20\lang2057 (SIMPLE-Action}{\b\f3\fs20\lang2057  }{\f3\fs20\lang2057 )}{\lang2057 
\par }\pard \ri100\sb80\sa80 {\i\f3\fs20\lang2057 SIMPLE-CONDITION }{\lang2057  and }{\i\f3\fs20\lang2057 SIMPLE-ACTION}{\lang2057 
 depend on the actual meaning associated to the FST, i.e. they depend on the kind of processing that is meant to perform. In the following sections we will present - for each module in the architecture - the kind of conditions and actions allowed.
\par }{\f3\fs20\lang2057 APPLY-WHEN }{\lang2057 is used to constrain the application of a rule to some external condition: for example in the template filler, some rules are applied iff the  current text belongs to a specific class. Use }{\f3\fs20\lang2057 
(ALWAYS)}{\lang2057  if the rule is not conditioned by any external condition (or simply omit the }{\f3\fs20\lang2057 :}{\b\f3\fs20\lang2057 APPLY-WHEN }{\lang2057 keyword}{\f3\fs20\lang2057 ).
\par 
\par 
\par }{\lang2057 
\par }\pard\plain \s1\ri84\sb720\sa240\keepn \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104278}1.3 Syntax for Conditions in G-FST{\*\bkmkend _Toc433104278}
\par }\pard\plain \ri84\sb80\sa80\tx8789 \f8\lang1024 {\lang2057 The formal description of }{\i\lang2057 SIMPLE-CONDITION}{\lang2057   is the following:
\par }\pard \ri84\sb20\sa20 {\i\f3\fs28\lang2057 SIMPLE-CONDITION ::= 
\par }{\f4\fs22\lang2057    iteration 
\par }\pard \li720\ri102\sb20\sa20 {\f3\fs22\lang2057 SPEC \tab \tab = }{\i\f3\fs22\lang2057 spec-syn-condition}{\f3\fs22\lang2057 
\par }\pard \ri84\sb20\sa20 {\f4\fs22\lang2057    operating at lexical level
\par }\pard \li720\ri84\sb20\sa20 {\f3\fs22\lang2057 TOKEN \tab = }{\i\f3\fs22\lang2057 string}{\f3\fs22\lang2057 
\par NORM\tab  \tab = }{\i\f3\fs22\lang2057 string}{\f3\fs22\lang2057 
\par }\pard \ri84\sb20\sa20 {\f4\fs22\lang2057    operating at syntactic level
\par }\pard \li720\ri84\sb20\sa20 {\f3\fs22\lang2057 SYN \tab \tab = }{\i\f3\fs22\lang2057 syn-type-disjunction}{\f3\fs22\lang2057 
\par NOT-SYN \tab = }{\i\f3\fs22\lang2057 syn-type-disjunction}{\f3\fs22\lang2057 
\par }\pard \li720\ri102\sb20\sa20 {\f3\fs22\lang2057 TFS-LABEL \tab = }{\i\f3\fs22\lang2057 Constituent}{\f3\fs22\lang2057 
\par TFS-TEST  = }{\b\f3\fs22\lang2057 (}{\i\f3\fs22\lang2057 <TFS-path>}{\f3\fs22\lang2057  }{\b\f3\fs22\lang2057 (}{\f3\fs22\lang2057 <}{\i\f3\fs22\lang2057 type-name>}{\b\f3\fs22\lang2057 ))
\par }\pard \ri84\sb20\sa20 {\f4\fs22\lang2057    operating at semantic level
\par }\pard \li720\ri102\sb20\sa20 {\f3\fs22\lang2057 HEAD-SEM \tab = }{\i\f3\fs22\lang2057 <concept-name>}{\f3\fs22\lang2057  
\par }\pard \li2160\ri102\sb20\sa20 {\f3\fs22\lang2057    | }{\b\f3\fs22\lang2057 \{}{\i\f3\fs22\lang2057 <concept-name><concept-name>}{\f3\fs20\up13\lang2057 +}{\i\f3\fs22\lang2057  }{\b\f3\fs22\lang2057 \}}{\f3\fs22\lang2057 
\par }\pard \li720\ri102\sb20\sa20 {\f3\fs22\lang2057 NOT-HEAD-SEM  = }{\i\f3\fs22\lang2057 <concept-name>}{\f3\fs22\lang2057  
\par }\pard \li2160\ri102\sb20\sa20 {\f3\fs22\lang2057     | }{\b\f3\fs22\lang2057 \{}{\i\f3\fs22\lang2057 <concept-name><concept-name>}{\f3\fs20\up13\lang2057 +}{\i\f3\fs22\lang2057  }{\b\f3\fs22\lang2057 \}}{\f3\fs22\lang2057 
\par }\pard \li720\ri102\sb20\sa20 {\f3\fs22\lang2057 PREP-SEM \tab = }{\i\f3\fs22\lang2057 <reifrel-name>
\par }\pard \li2160\ri102\sb20\sa20 {\f3\fs22\lang2057  |}{\b\f3\fs22\lang2057 \{}{\i\f3\fs22\lang2057 <reifrel-name><reifrel-name>}{\f3\fs20\up13\lang2057 +}{\i\f3\fs22\lang2057  }{\b\f3\fs22\lang2057 \}}{\f3\fs22\lang2057 
\par }\pard \li720\ri102\sb20\sa20 {\f3\fs22\lang2057 NOT-PREP-SEM = }{\i\f3\fs22\lang2057 <reifrel-name>
\par }\pard \li2160\ri102\sb20\sa20 {\f3\fs22\lang2057  |}{\b\f3\fs22\lang2057 \{}{\i\f3\fs22\lang2057 <reifrel-name><reifrel-name>}{\f3\fs20\up13\lang2057 +}{\i\f3\fs22\lang2057  }{\b\f3\fs22\lang2057 \}}{\f3\fs22\lang2057 
\par }\pard \li720\ri102\sb20\sa20 {\f3\fs22\lang2057 BEING\tab \tab = }{\b\f3\fs22\lang2057 (}{\i\f3\fs22\lang2057 Elem <slot-name>}{\b\f3\fs22\lang2057 )}{\f3\fs22\lang2057 
\par NEW\tab \tab = }{\i\f3\fs22\lang2057 <concept-name>
\par }{\f3\fs22\lang2057 NOT-FILLED = }{\i\f3\fs22\lang2057 <slot-name>
\par }{\f3\fs22\lang2057 FILLED = }{\i\f3\fs22\lang2057 <slot-name>}{\lang2057 
\par }\pard \ri100\sb80\sa80 {\lang2057 Here follows the meaning associated to each label.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104279}1.3.1 ITERATION{\*\bkmkend _Toc433104279}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 SPEC}{\lang2057  is a general label common to all the rules. }{\f3\lang2057 SPEC }{\lang2057 
introduces the notion of optionality or head. The head of a rule is obligatory and unique (exactly one for each rule), and all the other elements can be associated with a specification of optionality. 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: spec-syn-condition::= \tab head  | |?| | |*| | |+|
\par where |?| means optionality (zero or one occurrences), |*| is the Kleene star (zero to many occurrences), and |+| at least one occurrence of the element.
\par USE WHEN: always
\par LIMITATIONS: }{\b\lang2057 Elements marked with |*| or |+| can never appear in the action part of a rule!!!}{\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 
\par {\*\bkmkstart _Toc433104280}1.3.2 TEST AT LEXICAL LEVEL{\*\bkmkend _Toc433104280}
\par }\pard\plain \ri84\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 TOKEN}{\lang2057  is used to check a string against the string used by the user in the text; for example in a sentence like \ldblquote The company achieves a profit\rdblquote  tokens are 
\ldblquote the\rdblquote  \ldblquote company\rdblquote  \ldblquote achieves\rdblquote  \ldblquote a\rdblquote  \ldblquote profit\rdblquote .
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:\tab TOKEN = }{\i\lang2057 string}{\lang2057 
\par EXAMPLE:   TOKEN=\ldblquote companies\rdblquote 
\par USE WHEN: this condition can be used only during lexical normalisation or pre-chunking.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\fs20\lang2057 
\par }\pard \ri84\sb20\sa20 {\b\f3\fs32\lang2057 NORM}{\lang2057  is used to check a string against the lemma produced  by the morphological analyser when  the string used by the user in the text is analysed; for example in a sentence like \ldblquote 
The company achieves a profit\rdblquote  tokens are \ldblquote the\rdblquote  \ldblquote company\rdblquote  \ldblquote achieve\rdblquote  \ldblquote a\rdblquote  \ldblquote profit\rdblquote .
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:  \tab NORM = }{\i\lang2057 string}{\lang2057 
\par EXAMPLE:  NORM=\ldblquote company\rdblquote 
\par USE WHEN: this condition can be used only during lexical normalisation or pre-chunking.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104281}1.3.3 TEST AT SYNTACTIC LEVEL{\*\bkmkend _Toc433104281}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 SYN}{\lang2057  (or NOT-SYN) is a specification of the syntactic category of the elements allowed (or not allowed) to trigger the transition. 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: SYN = syn-type-disjunction
\par EXAMPLE: SYN=\{np pp\}
\par USE WHEN: always.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\i\f3\fs20\lang2057 
\par }\pard \ri84\sb80\sa80\nowidctlpar {\b\f3\fs32\lang2057 SOME-SYN}{\lang2057 
  (or NOT-SOME-SYN) is the same as the SYN condition, but it just checks if there is at least one element in the set of the edges exiting the current edge that meets the equivalent SYN condition. THIS CONDITION JUST SELECTS ONE OF THE POSSIBLE EDGES AND D
OES NOT ALLOW BACKTRACK. It is typically used for elements for which it is just necessary the presence check (e.g. element with SPEC=|*|, i.e. elements not used in the actions}{\i\lang2057 ).}{\lang2057 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: SOME-SYN \tab = syn-type-disjunction
\par EXAMPLE: SOME-SYN=\{np pp\}
\par USE WHEN: always.
\par LIMITATIONS: 
\par {\pntext\pard\plain\f3\fs20 1.\tab}}\pard \s62\fi-283\li1003\ri102\sb40\sa40\nowidctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\lang2057 
This condition is incompatible with any other conditions in the element, i.e. it cannot be used in combination with other conditions, e.g. establishing that an element is restricted to be SOME-SYN=pp and NORM=\ldblquote prezzo\rdblquote 
.  The only other condition compatible with SOME-SYN is NOT-SOME-SYN.
\par {\pntext\pard\plain\f3\fs20 2.\tab}This condition can be used only for elements that do not play any role in the ACTION part of the rule. Any use of elements retrieved by SOME-SYN in the ACTION part of the rule has impredictable results!
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\i\f3\fs22\lang2057 
\par }\pard \ri84\sb80\sa80\nowidctlpar {\b\f3\fs32\lang2057 TFS-LABEL}{\lang2057  is used to declare a TFS-LABLEL (i.e. one of }{\f3\lang2057 C1}{\lang2057 , }{\f3\lang2057 C2}{\lang2057 , }{\f3\lang2057 C3}{\lang2057 , ...}{\f3\lang2057  Cn)}{\lang2057 
,  that can be used in a TFS }{\f3\lang2057 ACTION}{\lang2057  to refer to elements recognised during the transducer processing; the exact value of }{\f3\lang2057 n}{\lang2057 
 depends on how the hierarchy is defined (more precisely, on how the part of the hierarchy that deals with phrase structure rules is defined). 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: \tab TFS-LABEL = }{\i\lang2057 Constituent}{\lang2057 
\par EXAMPLE:    TFS-LABEL=C1
\par USE WHEN:  Useful only when in the ACTION of the rule a TFS action is present.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\fs20\lang2057 
\par }\pard \ri84\sb80\sa80\nowidctlpar {\b\f3\fs32\lang2057 TFS-TEST}{\lang2057 
 tests if the value of TFS-path can be unified with type-name; it is composed by a path in the DAG associated with the element and a possible value for such path (i.e. a type in the inheritance hierarchy); it is used if you want to check that some conditi
ons are true while executing a transition. The second parameter is a constant. In case the TFS-path of the current element is to be confronted with a path in another element, then use the }{\i\lang2057 ACTION}{\lang2057   TFS-DOUBLE-TEST.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:    TFS-TEST  = (<TFS-path> (<type-name>))
\par EXAMPLE:   TFS-TEST=((< SYN LOCAL HEAD MOOD >) (|participle|))
\par USE WHEN: always
\par LIMITATIONS: The complete path must exist in the DAG, or TFS-TEST returns NIL.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104282}1.3.4 TEST AT SEMANTIC LEVEL{\*\bkmkend _Toc433104282}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 HEAD-SEM}{\lang2057  (or NOT-HEAD-SEM) tests for the semantic types associated to the current instance. The condition is true (or false) is either }{\i\lang2057 Elem}{\lang2057  is of type }{
\i\f3\fs22\lang2057 <concept-name>}{\lang2057  or vice-versa. The test can be performed also against a disjunction of }{\i\f3\fs22\lang2057 <concept-name>.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: HEAD-SEM = }{\i\lang2057 <concept-name>}{\lang2057  
\par \tab \tab \tab \tab | }{\b\lang2057 \{}{\i\lang2057 <concept-name><concept-name>}{\up13\lang2057 +}{\i\lang2057  }{\b\lang2057 \}}{\lang2057 
\par EXAMPLE: HEAD-SEM=\{SL::ORGANIZATION sl::BODY\}
\par USE WHEN: in any module.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\i\f3\fs22\lang2057 
\par }{\b\f3\fs32\lang2057 PREP-SEM}{\lang2057  (or NOT-PREP-SEM) tests for the type associated to a preposition for a PP. The test is true (or false) iff the preposition has an associated semantic head of type }{\i\f3\fs22\lang2057 <reifrel-name>}{\lang2057 
 or vice-versa the reified-relation . The test can also be performed against a disjunction of }{\i\f3\fs22\lang2057 <reifrel-name>.}{\lang2057  A reifrel-name  is the name of a reified relation.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:  PREP-SEM = }{\i\lang2057 <reifrel-name>
\par }{\lang2057  \tab |}{\b\lang2057 \{}{\i\lang2057 <reifrel-name><reifrel-name>}{\up13\lang2057 +}{\i\lang2057  }{\b\lang2057 \}}{\lang2057 
\par EXAMPLE: PREP-SEM=sl::OF-PREPO
\par USE WHEN: in modifier attachment, normalisation, discourse processing  and template creation, filling and merge.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\fs22\lang2057 
\par }{\b\f3\fs32\lang2057 BEING}{\lang2057  tests for the value of a slot of an object and assigns this value to }{\i\lang2057 Elem}{\lang2057 
 for further use in the condition or action part. This is typically used to understand the value of a slot of an object, and maybe - in case this value is also an object, also the value of one of its slots. So a condition like 
\par }\pard \li720\ri102 {\f3\fs20\lang2057 EL1 <SPEC=head,HEAD-SEM=ACTION>  
\par EL2 <BEING=(EL1 ACTEE)>
\par }\pard \ri100\sb80\sa80 {\lang2057 means:  be EL1 an action, be EL2 the value of the slot ACTEE in EL1. 
\par Note: BEING is inefficient and must be used only when the value of the slot is used in the rest of the rule as a relevant element. In case just the presence of the value is to be tested, the condition FILLED is to be used.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:     BEING = }{\b\lang2057 (}{\i\lang2057 Elem <slot-name>}{\b\lang2057 )}{\lang2057 
\par EXAMPLE:    BEING=(EL1 ACTEE)
\par USE WHEN: in modifier attachment, normalisation, discourse processing  and template creation, filling and merge.
\par LIMITATIONS: elements retrieved by using BEING can be optional IFF declared as last elements in the condition part. Any other use has unpredictable results.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 
\par FILLED}{\lang2057 : (or NOT-FILLED) the test is true iff  }{\i\f3\fs22\lang2057 <slot-name>}{\i\lang2057  }{\lang2057 is bound (unbound). So a condition like:
\par }\pard \li720\ri102 {\f3\fs20\lang2057 EL1 <SPEC=head,HEAD-SEM=ACTION>  
\par EL2 <BEING=(EL1 ACTEE), FILLED=PART-OF>
\par }\pard \ri100\sb80\sa80 {\lang2057 means: be EL1 an action, be EL2 the value of the slot ACTEE in EL
1 where in EL2 the slot PART-OF is bound. Note: BEING can be used instead of FILLED, but it is more inefficient and it must be used only when the value of the slot is used in the rest of the rule as a relevant element. In case just the presence of the val
ue is to be tested, the condition FILLED is to be used.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:   FILLED = }{\i\lang2057 <slot-name>
\par }{\lang2057 EXAMPLE: FILLED=SL::PART-OF
\par USE WHEN: in modifier attachment, normalisation, discourse processing  and template creation, filling and merge.
\par }\pard\plain \ri84\sb20\sa20 \f8\lang1024 {\b\f3\fs32\lang2057 
\par NEW}{\lang2057  introduces a new object in the search space (in the postion right after the previous one) of the type }{\i\f3\fs22\lang2057 <concept-name>. }{\lang2057 
Note! If the FST fails due to a condition (or action) following a new condition, the new object is deleted before exiting, so that the correctness of the computation is guaranteed.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:    NEW = }{\i\lang2057 <concept-name>}{\lang2057 
\par EXAMPLE:   NEW=SL::ORGANIZATION
\par USE WHEN: in modifier attachment, normalisation, discourse processing  and template creation, filling and merge.
\par }\pard\plain \s1\ri84\sb720\sa240\keepn \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104283}1.4 Syntax for Actions  in G-FST{\*\bkmkend _Toc433104283}
\par }\pard\plain \ri84\sb80\sa80\tx8789 \f8\lang1024 {\lang2057 The formal description of }{\i\lang2057 SIMPLE-ACTION}{\lang2057   is the following:
\par }\pard \ri84\sb20\sa20 {\i\f3\fs28\lang2057 SIMPLE-ACTION ::= 
\par }{\f4\fs22\lang2057 operating at lexical level
\par }\pard \li720\ri84\sb20\sa20 {\b\f3\fs22\lang2057 (}{\f3\fs22\lang2057 INSERT-EDGE }{\i\f3\fs22\lang2057 string}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 INSERT-PROPER lex-entry }{\i\f3\fs22\lang2057 string-or-sexpr type}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 INSERT-NUMBER }{\i\f3\fs22\lang2057 string string-or-sexpr}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 INSERT-DATE }{\i\f3\fs22\lang2057 string string-or-sexpr}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 INSERT-PERCENTAGE }{\i\f3\fs22\lang2057 string string-or-sexpr}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 COPY-EDGE}{\i\f3\fs22\lang2057  Element Lisp-sexpr}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 INHERIT-LEX-FEATURES }{\i\f3\fs22\lang2057 Element}{\b\f3\fs22\lang2057 )
\par 
\par }\pard \ri84\sb20\sa20 {\f4\fs22\lang2057 operating at lexical and syntactic level
\par }\pard \li720\ri84\sb20\sa20 {\b\f3\fs22\lang2057 (}{\f3\fs22\lang2057 REMOVE-ALL-CHILDREN}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 INVOLVE-EDGES }{\i\f3\fs22\lang2057 Element Element}{\f3\fs20\up13\lang2057 +}{\b\f3\fs22\lang2057 )
\par }\pard \li720\ri102\sb20\sa20 {\b\f3\fs22\lang2057 
\par }\pard \ri84\sb20\sa20 {\f4\fs22\lang2057 operating at syntactic level
\par }\pard \li720\ri102\sb20\sa20 {\b\f3\fs22\lang2057 (}{\f3\fs22\lang2057 TFS \tab = }{\i\f3\fs22\lang2057 <TFS-description>}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 PARSER-ACTION \tab = MERGE-EDGES}{\b\f3\fs22\lang2057 )
\par (}{\f3\fs22\lang2057 DOUBLE-TEST  }{\i\f3\fs22\lang2057 Element <TFS-path>}{\f3\fs22\lang2057  = }{\i\f3\fs22\lang2057 Element <TFS-path>}{\f3\fs22\lang2057  }{\b\f3\fs22\lang2057 )
\par 
\par }\pard \ri84\sb20\sa20 {\f4\fs22\lang2057 operating at semantic level
\par }\pard \li720\ri102\sb20\sa20 {\b\f3\fs22\lang2057 (}{\f3\fs22\lang2057 SEM \tab \tab \tab = }{\b\f3\fs22\lang2057 (}{\i\f3\fs22\lang2057 ElemX }{\b\f3\fs22\lang2057 (}{\i\f3\fs22\lang2057 <slot-name>}{\f3\fs22\lang2057  }{\b\f3\fs22\lang2057 =}{
\f3\fs22\lang2057  }{\i\f3\fs22\lang2057 ElemY }{\b\f3\fs22\lang2057 )))
\par (}{\f3\fs22\lang2057 REVERSE-SEM \tab = }{\b\f3\fs22\lang2057 (}{\i\f3\fs22\lang2057 ElemX }{\b\f3\fs22\lang2057 (}{\i\f3\fs22\lang2057 <slot-name>}{\f3\fs22\lang2057  }{\b\f3\fs22\lang2057 =}{\f3\fs22\lang2057  }{\i\f3\fs22\lang2057 ElemY }{
\b\f3\fs22\lang2057 )))
\par (}{\f3\fs22\lang2057 RESET-SLOT}{\b\f3\fs22\lang2057      (}{\i\f3\fs22\lang2057 Elem <slot-name>}{\b\f3\fs22\lang2057 ))
\par (}{\f3\fs20\lang2057 SYN-COREF }{\i\f3\fs22\lang2057 ElemX ElemY }{\b\f3\fs22\lang2057 )
\par (}{\f3\fs20\lang2057 MERGE-INST }{\i\f3\fs22\lang2057 ElemX ElemY }{\b\f3\fs22\lang2057 )
\par }\pard \li720\ri84\sb20\sa20 {\b\f3\fs22\lang2057 
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 In the following paragraphs we will describe each of the operations mentioned above.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104284}1.4.1 ACTIONS AT LEXICAL LEVEL{\*\bkmkend _Toc433104284}
\par }\pard\plain \ri84\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 INSERT-EDGE}{\lang2057  is used to normalise a group of words by using another word that is for sure in the Geppetto lexicon. Example: in case the tokens \ldblquote on\rdblquote  \ldblquote 
behalf\rdblquote  \ldblquote of\rdblquote  are found in the texts, they are normalised as \ldblquote on-behalf-of\rdblquote . In this case, the action will look like }{\f3\fs22\lang2057 (INSERT-EDGE \ldblquote on-behalf-of\rdblquote );}{\lang2057 
 action like insert-proper/number/date/percentage are subcases of insert-edge. In case an EL is provided, the normalized form of the word covered by EL is searched for in the lexicon.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 SYNTAX:     }{\b\lang2057 (}{\lang2057 INSERT-EDGE }{\i\lang2057 string-or-lable}{\b\lang2057 )
\par }\pard \s62\ri102\sb40\sa40\nowidctlpar {\lang2057 EXAMPLE: \tab }{\b\lang2057 (}{\lang2057 INSERT-EDGE \ldblquote company\rdblquote ) or }{\b\lang2057 (}{\lang2057 INSERT-EDGE EL3)
\par USE WHEN: during lexical normalisation.
\par }\pard\plain \ri84\sb80\sa80 \f8\lang1024 {\lang2057 
\par }{\b\f3\fs32\lang2057 INSERT-\{NUMBER DATE PERCENTAGE PROPER\}}{\lang2057 
 are the same as insert-edge, but instead of looking for a lemma in the Geppetto lexicon, the string is used in order to form a number, date, percentage or proper with the value (or name in case of proper) derived by the string passed as input. For proper
 names also the semantic type of the resulting edge must be passed.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057 (}{\lang2057 INSERT-PROPER }{\i\lang2057 lexical-entry value-as-string-or-lisp-sexpr        \tab \tab \tab \tab concept-name}{\b\lang2057 )
\par \tab   (}{\lang2057 INSERT-NUMBER }{\i\lang2057 lexical-entry value-as-string-or-lisp-sexpr}{\b\lang2057 )
\par   \tab   (}{\lang2057 INSERT-DATE }{\i\lang2057 lexical-entry value-as-string-or-lisp-sexpr}{\b\lang2057 )
\par   \tab   (}{\lang2057 INSERT-PERCENTAGE }{\i\lang2057 lexical-entry \tab \tab \tab \tab \tab \tab \tab \tab \tab    value-as-string-or-lisp-sexpr}{\b\lang2057 )
\par }{\lang2057 EXAMPLE: (INSERT-PROPER "!proper!" 
\par }\pard \s62\li720\ri102\sb40\sa40\nowidctlpar {\lang2057 \tab \tab \tab (concatenate 'string EL1 " " \tab \tab \tab \tab \tab \tab \tab \tab   EL2 " " EL3 " " EL4 " " EL5) 
\par }\pard \s62\ri102\sb40\sa40\nowidctlpar {\lang2057 \tab \tab \tab     \tab SL::HAS-NAME)
\par \tab    (INSERT-NUMBER "!number!"
\par \tab \tab \tab \tab (concatenate 'string EL1 " " EL2 " " EL3))
\par USE WHEN: during lexical normalisation.
\par }\pard\plain \ri84\sb80\sa80 \f8\lang1024 {\lang2057 
\par }\pard \ri84\sb80\sa80\nowidctlpar {\b\f3\fs32\lang2057 COPY-EDGE}{\lang2057  is used to create an exact copy of the edge associated to }{\i\f3\fs20\lang2057 Element}{\lang2057 , but with a value assigned (i.e.  a token string) provided by the Lisp
 evaluation of }{\i\f4\fs22\lang2057 Lisp-sexpr}{\f4\lang2057 . In the }{\i\f4\fs22\lang2057 Lisp-sexpr}{\f4\lang2057  elements of the CONDITION can be used to indicate the string associated to them. For example }{\f3\lang2057 
(concatenate 'string EL1 " " EL2}{\lang2057  )  means concatenate the strings associated to the elements EL1 and EL2.}{\f4\lang2057 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:}{\b\lang2057  (}{\lang2057 COPY-EDGE}{\i\lang2057  Element Lisp-sexpr}{\b\lang2057 )
\par }{\lang2057 EXAMPLE: (COPY-EDGE EL3 (concatenate 'string EL1 " " EL2 " " EL3 ))
\par USE WHEN: during lexical normalisation.
\par 
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\b\f3\fs32\lang2057 SET-LEX-FEATURES}{\lang2057  is used in order to make the lexical features  be set for  the new edge. For example in Italian \ldblquote dare corso
\rdblquote  is equivalent to \ldblquote iniziare\rdblquote  (English: \ldblquote start\rdblquote ). A preparser rule is used to transform \ldblquote dare corso\rdblquote  into \ldblquote iniziare\rdblquote 
 and the lexical features can be directly set. The syntax is what it is returned by Xerox.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057  (}{\lang2057 SET-LEX-FEATURES}{\i\lang2057 lex-features-list}{\b\lang2057 )
\par }{\lang2057 EXAMPLE: (SET-LEX-FEATURES ("prestito" "Noun" ("Masc" "Sg" "NSG") "NSG"))
\par USE WHEN: during lexical normalization.
\par LIMITATIONS: The SET-LEX_FEATURES action must ALWAYS follow any COPY/INSERT-EDGE action; otherwise it will return NIL!!!
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 (SET-LEX-FEATURES ("prestito" "Noun" ("Masc" "Sg" "NSG") "NSG"))
\par }\pard \ri84\sb80\sa80\nowidctlpar {\b\f3\fs32\lang2057 INHERIT-LEX-FEATURES}{\lang2057  is used in order to make the lexical features  be inherited from a child edge to the new edge. For example in Italian \ldblquote dare corso\rdblquote 
 is equivalent to \ldblquote iniziare\rdblquote  (English: \ldblquote start\rdblquote ). A preparser rule is used to transform \ldblquote dare corso\rdblquote  into \ldblquote iniziare\rdblquote  and the lexical features of \ldblquote dare\rdblquote 
 are inherited by \ldblquote iniziare\rdblquote  from those assigned to \ldblquote dare\rdblquote . So if the original text was \ldblquote da\rquote  corso\rdblquote  (lit. it gives start\rdblquote ), the generated edge will have assigned as le
xical features \ldblquote third person\rdblquote  \ldblquote present\rdblquote  \ldblquote indicative\rdblquote . 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057  (}{\lang2057 INHERIT-LEX-FEATURES }{\i\lang2057 Element}{\b\lang2057 )
\par }{\lang2057 EXAMPLE: (INHERIT-LEX-FEATURES EL1)
\par USE WHEN: during lexical normalization.
\par }\pard \s62\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057 LIMITATIONS: The INHERIT-LEX_FEATURES action must ALWAYS follow any INSERT-EDGE action; otherwise it will return NIL!!!
\par When used in conjunction with a COPY-EDGE the user must be careful because if the copied edge has some lexical features, they may clash with the inherited lex features making the action fail. For example by copying a verb
 with infinitive mood and inheriting features from a finite verb produces a clash. The right way to operate in these cases is to use a (INSERT-EDGE EL1) (INHERIT-LEX-FEATURES EL3), because the dag produced by insert-edge is cleaned from the previous lex f
eatures.
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\b\f3\fs32\lang2057 SEGM-BEFORE }{\lang2057 (or }{\b\f3\fs32\lang2057 SEGM-AFTER}{\lang2057 
) is the action of putting a clause boundary at the vertex that the matched edge(s) is(are) exiting (segm-before) or entering  (segm-after). Considering that all the edges exiting/entering a vertex have the same span by co
nstruction, it is not important which are the actually matched edges in the set of the edges. .  The second parameter is left for future use and must always be }{\i\lang2057 3.}{\lang2057 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057  (}{\lang2057 SEGM-BEFORE }{\i\lang2057 Element }{\lang2057 3}{\b\lang2057 )
\par }{\lang2057 EXAMPLE: (SEGM-BEFORE EL1 3)
\par USE WHEN: pre-chunking.
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\b\f3\fs32\lang2057 SENTENCE-BOUNDARY-AFTER }{\lang2057 
same as segm-before, but instead of chunking at the clause level, it chunks at the sentence level.  The second parameter is left for future use and must always be }{\i\lang2057 3.}{\lang2057 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057  (}{\lang2057 SENTENCE-BOUNDARY-AFTER }{\i\lang2057 Element }{\lang2057 3}{\b\lang2057 )
\par }{\lang2057 EXAMPLE: (SENTENCE-BOUNDARY-AFTER EL1 3)
\par USE WHEN: pre-chunking.
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104285}1.4.2 ACTIONS AT LEXICAL AND SYNTACTIC  LEVEL{\*\bkmkend _Toc433104285}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 REMOVE-ALL-CHILDREN}{\lang2057 
 is used in order to make the edges used to build the current constituent not available for furter processing. Generally child edges are left in the chart but are no longer available because they \tab 
 shorter than the new one. But when the new edge has just one child, the child is not automatically shadowed because it has the same length as the new one; this action is used to shadow the child. The users requi
red not to shadow automatically the child edges spanning the same input as subsuming edges in order to be able to eventually split entries by using the lexical normalizer  (i.e. insert-edge adds edges instead of substituting edges).}{\fs20\lang2057  

\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057 (}{\lang2057 REMOVE-ALL-CHILDREN}{\b\lang2057 )
\par }\pard \s62\ri102\sb40\sa40\nowidctlpar\brdrr\brdrs\brdrw45\brsp20 {\b\lang2057 LIMITATIONS: it is incompatible with the directive 
\par \tab (PARSER-ACTION = MERGE-EDGES)
\par If both (}{\lang2057 REMOVE-ALL-CHILDREN}{\b\lang2057 ) and (PARSER-ACTION = MERGE-EDGES) are in the same action, the result is that both the child and the new edge are lost!!!
\par }\pard \s62\ri102\sb40\sa40\nowidctlpar {\lang2057 USE WHEN: during parsing or lexical normalization.
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
\par }{\b\f3\fs32\lang2057 INVOLVE-EDGES}{\lang2057 
 a rule can involve a number of elements, only some of them are to be spanned by the produced new edge by the lexical normalizer or by the parser. As default all the elements matched in the condition of the rule are spanned by the new element. This action
s allows to directly declare which are the spanned edges. Note: the element argument of the action MUST match contiguous edges; the result of the application to non contiguous edges is unknown. In case just
 one edge is to be involved, the element must be repeated twice (e.g}{\f3\lang2057 . (INVOLVE-EDGES EL1 EL1))}{\lang2057 
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057 (}{\lang2057 INVOLVE-EDGES }{\i\lang2057 Element Element}{\up13\lang2057 +}{\b\lang2057 )
\par }{\lang2057 EXAMPLE: (INVOLVE-EDGES EL1 EL2 EL3)
\par USE WHEN: during parsing or lexical normalization.
\par 
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\b\f3\fs32\lang2057 INSERT-EDGE-WITH-LOGFORM}{\lang2057 
    this action allows to insert an edge by deriving from the lexicon the lexical-prototype and assigning to the edge a set of DAGs with arbitrary logical forms. For example
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 (INSERT-EDGE-WITH-LOGFORM ?!proper!?
\par  VAR-X
\par  (((SL::NAME VAR-X))
\par   ((SL::ORGANIZATION VAR-X)(SL::NAME VAR-Y)
\par    (SL::HAS-NAME VAR-Z)
\par    (GUM::DOMAIN VAR-Z VAR-X)(GUM::RANGE VAR-Z VAR-Y)))
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 inserts an edge by copying the lexical entry \ldblquote !proper!\rdblquote 
 and assigns to the created edge two dags with respectively the following logical forms:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard\plain \s62\fi-284\li851\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}\f3\fs20\lang1024 {\lang2057 
(((SL::NAME VAR-X))   i.e. the variable represents a proper name
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}((SL::ORGANIZATION VAR-X)(SL::NAME VAR-Y)(SL::HAS-NAME VAR-Z) (GUM::DOMAIN VAR-Z VAR-X)(GUM::RANGE VAR-Z VAR-Y)))  i.e. this is an organization with name
\par }\pard \s62\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057 USE WHEN: during parsing or lexical normalization
\par LIMITATIONS: from the Geppetto point of view, the only relevant part of the logical form for unification are the mainvar and the associated predicate in the logform. The rest is ignored by the unifier and it is just stored in the logical form. This means 
that Geppetto creates a DAG in which just the mainvar is available for further unification. The consequence of this is that it is not possible to insert logical forms for elements with subcategorization (e.g. a verb), because the other  variables in the l
ogform (i.e. those  for the arguments) are not seen by the unifier. It is like Geppetto sees the logform as of type \lquote ((}{\i\lang2057 predicate}{\lang2057  }{\i\lang2057 var}{\lang2057 
)). Other elements in the logical form are passed to the logical form instance task, but will never be seen by the unifier.
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
\par 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104286}1.4.3 ACTIONS AT SYNTACTIC LEVEL{\*\bkmkend _Toc433104286}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 TFS}{\lang2057 
 is used to compute the DAG associated with the output produced by the successful recognition of a rule: its value is a TFS description of the same kind as those used in grammar rules (see the }{\scaps\lang2057 Geppetto}{\lang2057  manual for details
 [GPT 97]); as a matter of fact the TFS-expression in the action part must have the form of a context-free rule. The result of the application of a TFS action is always the production of a new constituent as declared in the TFS expression (except in case 
the specification }{\f3\lang2057 \line PARSER-ACTION = MERGE-EDGES}{\lang2057 
 is used; see below). Note that in addition to the TFS labels declared in the Regular Expression (by means of the TFS-LABEL operator), the TFS description can also make reference to }{\f3\lang2057 CX-LAST}{\lang2057 , a label defined by d
efault by G-FST  that makes reference to the last element recognized by the application of the rule (even if such element does not have a TFS-LABEL associated). }{\f3\lang2057 CX-LAST}{\lang2057   is generally used to test for punctuation.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057 (}{\lang2057 TFS = <TFS-description>}{\b\lang2057 )
\par }{\lang2057 EXAMPLE: }{\i\lang2057 see the Geppetto manual for an example of }{\lang2057 TFS-descriptions
\par USE WHEN: during parsing or during SYN-COREF.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
\par }{\b\f3\fs32\lang2057 PARSER-ACTION:}{\lang2057  currently, its only possible value is }{\f3\lang2057 MERGE-EDGES}{\lang2057 ; its effect is that of producing the final tree merging together all the trees of the
 elements successfully recognized by the rule. This means that even if the TFS action requires that a new constituent is to be produced in the parse tree, the result is a destructive modification of the DAG associated to the element declared as }{
\f3\lang2057 SPEC=head }{\lang2057  (i.e., a 1-level flattening of the parse tree). This will be clarified by the example below.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057 (}{\lang2057 PARSER-ACTION = MERGE-EDGES}{\b\lang2057 )
\par }{\lang2057 EXAMPLE:}{\b\lang2057  (}{\lang2057 PARSER-ACTION = MERGE-EDGES}{\b\lang2057 )}{\lang2057 
\par USE WHEN: during parsing.
\par }\pard \s62\ri102\sb40\sa40\nowidctlpar\brdrr\brdrs\brdrw45\brsp20 {\b\lang2057 LIMITATIONS(1): When the specification (PARSER-ACTION = MERG
E-EDGES) is used, the TFS action must always create a DAG whose root node is of the same type of the constituent declared as HEAD in the rule! If the DAG is of a different type (as in the example above), the result can be  a constituent without any meanin
g (i.e. the type of the resulting edge can be different from the dag type)!
\par LIMITATIONS(2): it is incompatible with the directive 
\par \tab \tab (}{\lang2057 REMOVE-ALL-CHILDREN}{\b\lang2057 )
\par If both (}{\lang2057 REMOVE-ALL-CHILDREN}{\b\lang2057 ) and (PARSER-ACTION = MERGE-EDGES) are in the same action, the result is that both the child and the new edge are lost!!!
\par }\pard \s62\ri102\sb40\sa40\nowidctlpar {\lang2057 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
\par }{\b\f3\fs32\lang2057 TFS-DOUBLE-TEST:}{\lang2057 
 this action is actually an equality  test involving the paths of two elements. It returns T when the two paths can be unified. It is to be used before the TFS action for reason of efficiency in case it is known in advance that the two paths are very like
ly to fail. }{\i\lang2057 NOTE! The two complete paths must exist in the DAGs, or the test is FALSE!}{\lang2057   
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057 (}{\lang2057 DOUBLE-TEST Element <TFS-path> = Element <TFS-path> }{\b\lang2057 )
\par }{\lang2057 EXAMPLE: (TFS-DOUBLE-TEST \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab EL1 (< SYN LOCAL HEAD AGREEMENT NUMBER >) 
\par \tab \tab \tab =\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab EL2 (< SYN LOCAL HEAD AGREEMENT NUMBER >) )
\par USE WHEN: always
\par LIMITATIONS: The complete paths must exist in the DAG, or TFS-DOUBLE-TEST fails.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104287}1.4.4 ACTIONS AT SEMANTIC LEVEL{\*\bkmkend _Toc433104287}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 SEM}{\lang2057  (or REVERSE-SEM) is used to set a slot in an object: the slot }{\i\f3\fs22\lang2057 <slot-name>}{\f3\fs22\lang2057  }{\lang2057 in the instance associated to  }{
\i\f3\fs22\lang2057 ElemX }{\lang2057 is set to the instance associated to  }{\i\f3\fs22\lang2057 ElemY. }{\lang2057 . If the }{\i\f3\fs22\lang2057 ElemY}{\lang2057   is also an instance, then the changes also affects the slots in }{\i\f3\fs22\lang2057 
ElemY }{\lang2057  that represent inverse relations for the }{\i\f3\fs22\lang2057 <slot-name>}{\f3\fs22\lang2057  }{\lang2057  (i.e. the inverse-slot in }{\i\f3\fs22\lang2057 ElemY  }{\lang2057 is assigned to }{\i\f3\fs22\lang2057 ElemX}{\lang2057 ).

\par }\trowd \trgaph108\trleft567\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8080 \pard \sb80\sa80\keep\intbl {
\b\fs20\lang2057 WARNING!!!}{\fs20\lang2057  
\par }\pard \ri100\sb80\sa80\intbl {\fs20\lang2057 In modifier attachment some caution is needed in the choice between SEM and REVERSE-SEM.}{\i\lang2057  the proper use of sem and reverse-sem operations is necessary.}{\lang2057 
 The parse tree is modified by using the operator SEM (or REVERSE-SEM). Suppose that two object are present in the sentence:
\par }\pard \li720\ri100\sb80\sa80\intbl {\lang2057 1. object1, of type type1, produced by the logical form of edge#1; for example LOAN#1 of type LOAN.
\par 2. object2, of type type2, produced by the logical form of edge#2; for example MON-QTY#2 of type MONETARY-QUANTITY.
\par }\pard \ri100\sb80\sa80\intbl {\lang2057 When using }{\f3\fs20\lang2057 (SEM = (LOAN#1 (Global-Value = MON-QTY#2))) }{\lang2057 the result in the parse tree is that of having:
\par \tab edge#1
\par }{\f4\fs20 {\*\do\dobxcolumn\dobypara\dodhgt12288\dpline\dpptx0\dppty0\dpptx0\dppty432\dpx1080\dpy71\dpxsize1\dpysize433\dplinesolid\dplinecor0\dplinecog0\dplinecob0\dplinew20\dpastarthol\dpastartl1\dpastartw1}}{\lang2057 
\par \tab edge#2
\par While the effect of using }{\f3\fs20\lang2057 (REVERSE-SEM = (LOAN#1 (Global-Value = MON-QTY#2))) }{\lang2057 is that of having:
\par \tab edge#2
\par }{\f4\fs20 {\*\do\dobxcolumn\dobypara\dodhgt12289\dpline\dpptx0\dppty0\dpptx0\dppty432\dpx1080\dpy42\dpxsize1\dpysize433\dplinesolid\dplinecor0\dplinecog0\dplinecob0\dplinew20\dpastarthol\dpastartl1\dpastartw1}}{\lang2057 
\par }\pard \sb80\sa80\keep\intbl {\lang2057 \tab edge#1}{\b\fs20\lang2057 \cell }\pard \intbl {\b\lang2057 \row }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\lang2057 (}{\lang2057 SEM = }{\b\lang2057 (}{\i\lang2057 
ElemX }{\b\lang2057 (}{\i\lang2057 <slot-name>}{\lang2057  }{\b\lang2057 =}{\lang2057  }{\i\lang2057 ElemY }{\b\lang2057 )))
\par }{\lang2057 EXAMPLE: (SEM = (EL1}{\i\lang2057  }{\lang2057 (GUM::ACTOR = EL3}{\i\lang2057  }{\lang2057 )))    (i.e. the slot ACTOR of EL1 is filled with EL3)
\par USE WHEN: in modifier attachment, normalization, discourse processing  and template creation, filling and merge.
\par }\pard\plain \ri84\sb20\sa20 \f8\lang1024 {\b\f3\fs32\lang2057 
\par RESET-SLOT:}{\lang2057 
 is used to reset the slot of an object. If the current value of the slot is also an instance, then the changes also affects the slots of the value that represent inverse relations for the current slot. It is generally used by the normalizer or the templa
te filler in order to substitute an information with another: instead of just reassigning the value of the slot it is necessary to reset it in order to reset also the inverse relations.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX:  }{\b\lang2057 (}{\lang2057 RESET-SLOT}{\b\lang2057  (}{\i\lang2057 Elem <slot-name>}{\b\lang2057 ))
\par }{\lang2057 EXAMPLE: (RESET-SLOT (EL1}{\i\lang2057  }{\lang2057 GUM::ACTOR))
\par USE WHEN: in modifier attachment, normalization, discourse processing  and template creation, filling and merge.
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\b\f3\fs32\lang2057 SYN-COREF}{\f3\fs20\lang2057  }{\lang2057 is used to activate the syntactic compatibility tests of two elements: the reference (}{\i\f3\fs22\lang2057 ElemX}{\lang2057 
) and the referenced object (}{\i\f3\fs22\lang2057 ElemY}{\lang2057 ).
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\fs22\lang2057 (}{\lang2057 SYN-COREF }{\i\fs22\lang2057 ElemX ElemY }{\b\fs22\lang2057 )
\par }{\lang2057 EXAMPLE: }{\b\fs22\lang2057 (}{\lang2057 SYN-COREF }{\fs22\lang2057 EL1 EL2}{\b\fs22\lang2057 )}{\lang2057 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\fs20\lang2057 USE WHEN: in discourse processing  only
\par }{\b\f3\fs32\lang2057 MERGE-INST}{\f3\fs20\lang2057  }{\lang2057 is used to activate the merge of the two instances associated to }{\i\f3\fs22\lang2057 ElemX}{\lang2057  and }{\i\f3\fs22\lang2057 ElemY.
\par }\pard\plain \s62\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 SYNTAX: }{\b\fs22\lang2057 (}{\lang2057 MERGE-INST }{\i\fs22\lang2057 ElemX ElemY }{\b\fs22\lang2057 )
\par }{\lang2057 EXAMPLE:}{\b\fs22\lang2057  (}{\lang2057 MERGE-INST }{\fs22\lang2057 EL1 EL2}{\b\fs22\lang2057 )}{\lang2057 
\par USE WHEN: in discourse processing  only
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104288}1.5 TRACING G-FST GRAMMARS{\*\bkmkend _Toc433104288}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 In order to trace the applications of the FSTs, use the \ldblquote debug\rdblquote 
 menu in the Pinocchio window. This action makes the standard FST tracer to be activated. Nevertheless in case of failure of a TFS action, the standard tracer is not informative enough. In case, call the following function }{\b\lang2057 before }{
\lang2057 activating the TFS analysis:
\par }\pard \qc\ri84\sb80\sa80\nowidctlpar {\f3\fs20\lang2057 TFS::TFS-ACTION-TRACE &optional }{\i\f3\fs20\lang2057 FST-name-list
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 (in case the }{\i\f3\lang2057 FST-name-list}{\lang2057  is not provided, all the FST are untraced). 
\par (do not forget to indicate the package in which the rules are (by default a rule is currently declared in the CHART package)
\par NOTE! The function does not allow incrementality: so if one rule has been already traced and another tfs-action-trace is required, the previous one is forgotten.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104289}1.6 Examples of G-FST Rules{\*\bkmkend _Toc433104289}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 In this section we present for each of the mentioned G-FST grammars a commented example of a rule.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104290}1.6.0 Lexical normalization{\*\bkmkend _Toc433104290}
\par }\pard\plain \ri84\sb80\sa80 \f8\lang1024 {\lang2057 The following is an example of an FST rule used during lexical normalization (preparsing):
\par }\pard \fi-410\li410\ri84\sb40\sa40 {\f3\fs22\lang2057 (DEF-FST-RULE rendere-noto
\par     :REGEXP (EL1 <SPEC=head, NORM="rendere"> 
\par              EL2 <TOKEN="noto">)
\par     :ACTION \{(INSERT-EDGE "informare")
\par              (INHERIT-LEX-FEATURES EL1)\})
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 This rules normalizes the form \ldblquote rendere noto\rdblquote  (English: \ldblquote to make clear\rdblquote ) as the verb \ldblquote informare\rdblquote  (English: \ldblquote to inform\rdblquote 
). Lexical features are inherited from \ldblquote rendere\rdblquote  to \ldblquote informare\rdblquote .
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104291}1.6.1 PRECHUNKING{\*\bkmkend _Toc433104291}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The following is an example of an FST rule used during prechunking:
\par }\pard \fi-410\li410\ri84\sb40\sa40\nowidctlpar {\f3\fs22\lang2057 (DEF-FST-RULE left-paren
\par     :REGEXP (EL1 <SPEC=head, SOME-SYN=left-paren-symbol>)
\par     :ACTION \{(SEGM-BEFORE EL1 3)\})
\par }\pard \ri84\sb80\sa80\nowidctlpar {\lang2057 This rule segments before a left parenthesis in order to allow to recognize the words between parentheses apart from the rest of the sentence (there is also a rule for right parentheses segmenting after them).

\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104292}1.6.2 PARSING{\*\bkmkend _Toc433104292}
\par }\pard\plain \ri-483\sb80\sa80 \f8\lang1024 {\lang2057 The following is an example of an FST rule used during A-Structure recognition:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (DEF-FST-RULE}{\fs28\lang2057    }{\i\lang2057 NP_VG_NP }{\lang2057 
\par     :APPLY-WHEN (ALWAYS)
\par     :REGEXP}{\fs28\lang2057  
\par }{\lang2057 \tab \tab (EL1 <SPEC=|?|,SYN=complex-dp,TFS-LABEL=C1> 
\par \tab \tab  }{\fs18\lang2057 EL2 <SPEC=|*|,SYN=adjunct>}{\fs16\lang2057 
\par }{\lang2057 \tab \tab  EL3 <SPEC=head,SYN=vg,\line \tab \tab  TFS-TEST=(< SYN LOCAL HEAD MOOD > |finite|),\line \tab \tab  TFS-TEST=(< SYN LOCAL HEAD VERB-TYPE > 
\par \tab \tab \tab \tab |transitive|),\line \tab \tab  TFS-LABEL=C2>
\par }{\fs16\lang2057 \tab }{\lang2057 \tab  }{\fs18\lang2057 EL4 <SPEC=|*|,SYN=adjunct>}{\fs16\lang2057 
\par }{\lang2057 \tab \tab  (EL5 <SYN=complex-dp,TFS-LABEL=C3>
\par }{\fs16\lang2057 \tab \tab }{\lang2057   }{\fs18\lang2057 EL6 <SPEC=|*|,SYN=adjunct>)<SPEC=|?|>}{\fs16\lang2057  }{\lang2057 )
\par     :ACTION}{\fs28\lang2057  }{\lang2057 
\par           \{(TFS=((@CF-BACKBONE-3-FST |$?c0| |ip|\line                                    |$?c1| |complex-dp| \line                                    |$?c2| |vg| \line                                    |$?c3| |complex-dp| )
\par \tab \tab \tab \tab   &  (@HEAD $?H C2) 
\par \tab \tab \tab \tab   &  (@AGREE $?C1 C1 $?C2 C2) 
\par \tab \tab \tab \tab   &  (@PERCOLATE-SEM $?H C2) 
\par \tab \tab \tab   &  (@PERCOLATE-SUBCAT $?H C2))) \} )
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 This rule recognizes the A-structure of a simple transitive verb with finite mood. The rule name is }{\i\f3\fs22\lang2057 NP_VG_NP}{\i\f3\lang2057  }{\lang2057 
(this string is mainly used for debugging purposes). The value of the }{\f3\fs20\lang2057 :APPLY-WHEN}{\lang2057  slot is }{\f3\fs20\lang2057 ALWAYS}{\lang2057 
; such value means that the rule is applied during all the levels of A-Structure recognition mentioned above. As for the value of the }{\f3\fs20\lang2057 :REGEXP}{\lang2057 
 slot, note that, in order to make the example clearer, non-argumental elements (i.e. }{\f3\fs20\lang2057 EL2}{\lang2057 ,}{\f3\lang2057  }{\f3\fs20\lang2057 EL4}{\lang2057 , and }{\f3\fs20\lang2057 EL6}{\lang2057 
) are printed using a smaller font size. The two verb arguments  (i.e. }{\f3\fs20\lang2057 EL1}{\lang2057  and }{\f3\fs20\lang2057 EL5}{\lang2057 ) are both declared as optional (}{\f3\fs22\lang2057 SPEC=|?|}{\lang2057 ) and of type }{\f3\fs20\lang2057 
complex-dp}{\lang2057  (}{\f3\fs22\lang2057 SYN=complex-dp}{\lang2057 ).  The TFS-labels  }{\f3\fs20\lang2057 C1}{\lang2057  and }{\f3\fs20\lang2057 C3}{\lang2057  are associated to them to be mentioned in the TFS action (}{\f3\fs22\lang2057 TFS-LABEL=C1 
}{\lang2057 and}{\f3\fs22\lang2057  TFS-LABEL=C3}{\lang2057 ). The verb (}{\f3\fs20\lang2057 EL3}{\lang2057 ) is the head of the rule (}{\f3\fs22\lang2057 SPEC=head}{\lang2057 ); its mood is declared as }{\f3\fs20\lang2057 finite}{\lang2057 
 and its type is }{\f3\fs20\lang2057 transitive}{\lang2057  (see the path required via the }{\f3\fs22\lang2057 TFS-TEST}{\lang2057  condition). Both the verb arguments may  be separated by a number of modifiers of type }{\f3\fs20\lang2057 adjunct}{
\lang2057  (}{\f3\fs18\lang2057 SPEC=|*|,SYN=adjunct}{\lang2057 ). The TFS action states that, as result of the application of this rule, a new constituent of type }{\f3\fs20\lang2057 ip}{\lang2057 
 is to be built. The parse tree (or better the A-Structure) will then appear as:
\par }{\f3\fs20\lang2057 \tab \tab \tab ip 
\par }{\f4\fs20 {\*\do\dobxcolumn\dobypara\dodhgt12288\dpline\dpptx576\dppty0\dpptx0\dppty432\dpx1512\dpy-4\dpxsize577\dpysize433\dplinesolid\dplinecor0\dplinecog0\dplinecob0\dplinew20\dpastarthol\dpastartl1\dpastartw1}{\*\do\dobxcolumn\dobypara\dodhgt12289
\dpline\dpptx0\dppty0\dpptx0\dppty432\dpx2232\dpy-4\dpxsize1\dpysize433\dplinesolid\dplinecor0\dplinecog0\dplinecob0\dplinew20\dpastarthol\dpastartl1\dpastartw1}{\*\do\dobxcolumn\dobypara\dodhgt12290\dpline\dpptx0\dppty0\dpptx720\dppty432
\dpx2376\dpy-4\dpxsize721\dpysize433\dplinesolid\dplinecor0\dplinecog0\dplinecob0\dplinew20\dpastarthol\dpastartl1\dpastartw1}}{\f3\fs20\lang2057 
\par \tab complex-dp  vg    complex-dp
\par }{\lang2057 The DAG produced by the TFS action will be the associated to the }{\f3\lang2057 ip}{\lang2057  constituent (as already said above, the TFS action is written using the standard TFS formalism described in the }{\scaps\lang2057 Geppetto}{
\lang2057  manual).
\par In case the action part contains  (}{\f3\lang2057 PARSER-ACTION = MERGE-EDGES) }{\lang2057 the result is different: the DAG resulting from the application is associated to the head (i.e., to the verb) and the resulting parse tree is:
\par }{\f3\fs20\lang2057 \tab \tab \tab vg 
\par }{\f4\fs20 {\*\do\dobxcolumn\dobypara\dodhgt12288\dpline\dpptx576\dppty0\dpptx0\dppty432\dpx1512\dpy-4\dpxsize577\dpysize433\dplinesolid\dplinecor0\dplinecog0\dplinecob0\dplinew20\dpastarthol\dpastartl1\dpastartw1}{\*\do\dobxcolumn\dobypara\dodhgt12290
\dpline\dpptx0\dppty0\dpptx720\dppty432\dpx2376\dpy-4\dpxsize721\dpysize433\dplinesolid\dplinecor0\dplinecog0\dplinecob0\dplinew20\dpastarthol\dpastartl1\dpastartw1}}{\f3\fs20\lang2057 
\par \tab complex-dp        complex-dp
\par 
\par }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8414 \pard \sb80\sa80\intbl {
\b\lang2057 IMPORTANT NOTE!}{\lang2057  
\par When the specification (}{\f3\lang2057 PARSER-ACTION = MERGE-EDGES)}{\lang2057  is used, the TFS action must always return a DAG whose root node is of the same type of the HEAD! If the DAG is of a different type (as in the example above), the }{
\b\lang2057 result can be  a constituent without any meaning!}{\lang2057  As a matter of fact in the above example a situation is created such that the edge in the chart is of type }{\f3\fs20\lang2057 vg}{\lang2057 
 and so only the FST requiring such type will be used by the parser; but all the TFS actions associated to the }{\f3\fs20\lang2057 vg}{\lang2057  types will not apply to a DAG of type }{\f3\fs20\lang2057 ip}{\lang2057 . \cell }\pard \intbl {\lang2057 
\row }\pard \ri100\sb80\sa80 {\lang2057 
\par Note also that the specification (}{\f3\lang2057 PARSER-ACTION = MERGE-EDGES)}{\lang2057  is exclusively used in the rules activated during the second and third step (i.e. }{\f3\fs20\lang2057 SENTENCE-LEVEL}{\lang2057  and }{\f3\fs20\lang2057 
RECOVERY-LEVEL}{\lang2057 ).
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104293}1.6.3 MODIFIER ATTACHMENT{\*\bkmkend _Toc433104293}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Consider:
\par }\pard \ri102 {\f3\fs22\lang2057 (DEF-FST-RULE DEPARTMENT-OF-ORGANIZATION
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=DEPARTMENT> 
\par \tab         EL2 <SPEC=|*|,SYN=pp>  
\par }\pard \ri84 {\f3\fs22\lang2057 \tab         EL3 <PREP-SEM=OF,
\par }\pard \li1440\ri102 {\f3\fs22\lang2057         HEAD SEM=ORGANIZATION,SYN=pp>)
\par }\pard \ri102 {\f3\fs22\lang2057     :ACTION \{(SEM=(EL1(DEPARTMENT-OF = EL3)))\})}{\lang2057 
\par }\pard \ri100\sb80\sa80 {\lang2057 This rule checks for a relation between a department and an organization. If that organization is introduced by the preposition }{\i\lang2057 of}{\lang2057   and is a }{\i\lang2057 PP}{\lang2057 
 and in its search space there is a department description (maybe divided from it by other }{\i\lang2057 Pps}{\lang2057 ), then the semantic to be associated to that relation is that of }{\i\lang2057 DEPARTMENT-OF}{\lang2057 . 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104294}1.6.4 NORMALIZATION{\*\bkmkend _Toc433104294}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Consider:
\par }\pard \ri102\sb20\sa20 {\f3\fs20\lang2057 (DEF-FST-RULE decide-to-issue-agent
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=\{DECIDE FORESEE\}> 
\par \tab      EL2 <BEING=(EL1 GUM::ACTEE),HEAD-SEM=SL::ISSUE,
\par }\pard \li2160\ri102\sb20\sa20 {\f3\fs20\lang2057 NOT-FILLED=GUM::ACTOR>  
\par }\pard \ri102\sb20\sa20 {\f3\fs20\lang2057 \tab      EL3 <BEING=(EL1 GUM::ACTOR),HEAD-SEM=SL::BANK>)
\par     :ACTION \{(SEM = (EL2(GUM::ACTOR = EL3)))\})
\par }\pard \ri100\sb80\sa80 {\lang2057 This rule specifies that as  if  a company decides/foresee that some  bonds are issued, then the bond issuer is the bank itself if not stated  otherwise (i.e. if the actor of issue is unbound).
\par 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104295}1.6.5 COREFERENCE RESOLUTION{\*\bkmkend _Toc433104295}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 As example of a rule for SEM-COREF, consider:
\par }\pard \li720\ri102\sb40\sa40 {\f3\fs20\lang2057 (DEF-FST-RULE organization-COREF
\par     :APPLY-WHEN (ALWAYS)
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=SL::organization>
\par              EL2 <spec=|*|,NOT-HEAD-SEM=SL::organization>
\par              EL3 <HEAD-SEM=SL::organization>)
\par     :ACTION \{(SYN-COREF EL1 EL3)
\par              (MERGE-INST EL1 EL3) \})
\par }\pard \ri100\sb80\sa80 {\lang2057 In this rule the head is the potential referring object
; the search space is reversed (the first object in the search space is the nearest, the last the farthest). In the example just the first organization is looked for (see the }{\f3\fs20\lang2057 NOT-HEAD-SEM=SL::organization }{\lang2057 
condition associated to EL2). Note that the fact that a failure in one action is also a failure in the rule application allows to insert a test (syn-coref) in the action part.
\par The syntax for SYN-COREF is identical to those used for A-Structure recognition (see the section about syntactic analysis). The following example will clarify the role of such tests: 
\par }\pard\plain \s62\ri102\sb40\sa40 \f3\fs20\lang1024 {\lang2057 (DEF-FST-RULE def-undef
\par }\pard \s62\li720\ri102\sb40\sa40 {\lang2057 :REGEXP 
\par   (EL1 <SPEC=head,SYN=dp,TFS-LABEL=C1,
\par }\pard \s62\li720\ri-908\sb40\sa40 {\lang2057         TFS-TEST}{\fs18\lang2057 =((< SYN LOCAL HEAD DEFINITENESS >) (|definite+|))>
\par }\pard \s62\li720\ri102\sb40\sa40 {\lang2057    EL2 <SYN=dp,TFS-LABEL=C2, 
\par }\pard \s62\li720\ri-341\sb40\sa40 {\lang2057         TFS-TEST}{\fs18\lang2057 =((< SYN LOCAL HEAD DEFINITENESS >) (|definite-|))>}{\lang2057 )
\par }\pard \s62\li720\ri102\sb40\sa40 {\lang2057 :ACTION 
\par   \{(TFS=((@CF-BACKBONE-2-FST |$?c0||dp||$?c1||dp| |$?c2||dp|)
\par             & (@HEAD $?H C1) 
\par \tab \tab & (}{\fs18\lang2057 <C1 SYN LOCAL HEAD AGREEMENT NUMBER> 
\par \tab \tab \tab = <C2 SYN LOCAL HEAD AGREEMENT NUMBER}{\lang2057 > )))
\par     \})
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 This rule states that a
n element can be accepted as reference when it is a dp and it is introduced by a determiner (in the DAG definiteness = |definite+|); the referenced element on the other hand is acceptable if it is also a dp introduced by an indeterminative article (in the
 DAG definiteness = |definite-|).
\par }\trowd \trgaph108\trleft567\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7371 \pard \sb80\sa80\intbl {
\lang2057 The }{\b\lang2057 first}{\lang2057  rule that fires makes the module return T to the action of the calling SEM- COREF rule.\cell }\pard \intbl {\lang2057 \row }\pard \ri100\sb80\sa80 {\lang2057 
\par The actions in the SYN-COREF rules are not meant to create  new edges (as in an equivalent syntactic rule), but just that o
f making compatibility checks; in the example the agreement in number between coreference and referenced is checked (as a matter of fact a new DAG is created by the TFS-expression, but it is not considered by the module).
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104296}1.6.6 IMPLICIT RELATION RESOULTION{\*\bkmkend _Toc433104296} 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Consider:
\par }\pard\plain \s62\ri-766\sb40\sa40 \f3\fs20\lang1024 {\lang2057 (DEF-FST-RULE rate-loan
\par     :APPLY-WHEN (ALWAYS)
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=SL::RATE,NOT-FILLED=sl::RATE-OF>
\par              EL2 <spec=|*|,NOT-HEAD-SEM=SL::LOAN>
\par              EL3 <HEAD-SEM=SL::LOAN, NOT-FILLED=sl::WITH-RATE>)
\par     :ACTION \{(SEM = (EL3(sl::RATE-OF = EL1))) \})
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
It states that if the current element is a rate not associated to any loan and there is a loan in the focus space that has no rate associated (WITH-RATE is the inverse relation of RATE-OF), then this is an implicit relation that can be solved by filling t
he slot RATE-OF in EL1 (remember that filling a slot also means filling its inverse slot in the target object, i.e. if we fill the slot RATE-OF in EL3, we automatically fill the slot WITH-RATE in EL1).
\par 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104297}1.6.7 TEMPLATE CREATION{\*\bkmkend _Toc433104297} 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 An example of a rule is the following:
\par }\pard \ri102\sb20\sa20 {\f3\fs20\lang2057 (DEF-FST-RULE prestito-activation
\par     :APPLY-WHEN (TEMPL::BOND-NEWS)
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=BOND-ISSUE,
\par }\pard \li2160\ri102\sb20\sa20 {\f3\fs20\lang2057  NOT-FILLED=GUM::+TEMPLATE+>
\par }\pard \ri102\sb20\sa20 {\f3\fs20\lang2057 \tab        EL2 <NEW=BOND-TEMPLATE>)
\par     :ACTION \{(SEM = (EL2(KIND-OF-BOND = EL1)))
\par              (SEM = (EL1(GUM::+TEMPLATE+ = EL2)))\})
\par }\pard \ri100\sb80\sa80 {\lang2057 This rule activates a template of type BOND-TEMPLATE whenever a }{\f3\fs20\lang2057 BOND-ISSUE }{\lang2057 event is found; that bond issue must not have an already assigned template.
\par }\trowd \trgaph108\trleft1134\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx6804 \pard \sb80\sa80\intbl {
\lang2057 NOTE!!! The slot GUM::+TEMPLATE+ is automatically declared by the Knowledge Representation Tool and must not be defined by the user in any way.\cell }\pard \intbl {\lang2057 \row }\pard \ri100\sb80\sa80 {\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104298}1.6.8 TEMPLATE FILLING{\*\bkmkend _Toc433104298}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 An example of a rule is the following:
\par }\pard \ri102\sb20\sa20 {\f3\fs22\lang2057 \tab (DEF-FST-RULE loan-issued-by-bank
\par }\pard \li720\ri102\sb20\sa20 {\f3\fs22\lang2057     :APPLY-WHEN (TEMPL::BOND-NEWS)
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=LOAN >
\par \tab \tab  EL2 <BEING=(EL1 ISSUED-BY)>
\par \tab \tab  EL3 <BEING=(EL1 GUM::+TEMPLATE+)>)
\par     :ACTION \{(SEM = (EL3(TEMPL::ISSUER = EL2)))
\par              (RESET-SLOT (EL1 ISSUED-BY)) \})
\par }\pard \ri100\sb80\sa80 {\lang2057 The test is performed on EL1 that must be of type  }{\f3\lang2057 LOAN}{\lang2057 . The test concerns the value of its slot ISSUED-BY. If it is filled, the value of }{\f3\lang2057 ISSUED-BY }{\lang2057 is shared with  }{
\f3\lang2057 TEMPL::ISSUER}{\lang2057  in the template associated to EL1. Then for reason of presentation in the final result table, the slot }{\f3\lang2057 ISSUED-BY}{\lang2057  is reset.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\brdrr\brdrth\brdrw30\brsp20 \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104299}1.6.9 TEMPLATE MERGING{\*\bkmkend _Toc433104299}
\par }\pard\plain \ri100\sb80\sa80\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 Template merging allows to recover from some missing coreference. It allows to write discourse-like rules in order to make the template content corefer. 
\par The general search space is composed by the templates followed by their role fillers. For exampl
e if template BOND-A has COMPANY-X as filler of the slot COMPANY and LOAN-Y as filler of the slot TYPE, the general search space for merging will be composed by:
\par }\trowd \trgaph108\trleft993\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx3402\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx5912
\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7797 \pard \qc\sb80\sa80\intbl\brdrr\brdrth\brdrw30\brsp20 {\lang2057 BOND-A\cell COMPANY-X\cell LOAN-Y\cell }\pard \intbl {\lang2057 \row }\pard \ri100\sb80\sa80\brdrr
\brdrth\brdrw30\brsp20 {\lang2057 
Rules are applied on the search space by starting from the leftmost element; the search space for an element is the reverse of the general search space section to the left of the current object. So the search space for LOAN-Y will be composed by \lquote 
(COMPANY-X    BOND-A)
\par An example of two rules is the following:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 (DEF-FST-RULE BONDtempl-merge-1
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=TEMPL::BOND-TEMPLATE >
\par \tab      EL2 <spec=|*|>
\par \tab      EL2 <HEAD-SEM=TEMPL::BOND-TEMPLATE >)
\par     :ACTION \{(MERGE-INST EL1 EL2)\})
\par 
\par (DEF-FST-RULE organizzazione-COREF-1
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=SL::ORGANIZATION>
\par \tab      EL2 <spec=|*|,NOT-HEAD-SEM=SL::ORGANIZATION>
\par \tab      EL3 <HEAD-SEM=SL::ORGANIZATION>)
\par     :ACTION \{(MERGE-INST EL1 EL3)\})
\par }\pard\plain \ri100\sb80\sa80\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 These two rules allow to merge two BOND templates iff they have compatible slot fills. The same happens with organ
izations for the second rule. MERGE-INST works as in  discourse processing. 
\par Concerning the difference between discourse processing and this step consider:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \li1003\ri100\sb80\sa80\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 there is no syntactic check between instances at this level;
\par {\pntext\pard\plain\f1 \'b7\tab}
the search space is different: at discourse level, other elements that do not fill a template slot can prevent the system from finding the coreference; here only elements in the templates are considered for building the search space.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\brdrr\brdrth\brdrw30\brsp20 \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104300}1.6.10 TEMPLATE INFORMATION RECOVERY{\*\bkmkend _Toc433104300}
\par }\pard\plain \ri100\sb80\sa80\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 Template information rec
overy  allows to recover from some missed implicit relations. Suppose for example that some necessary information is present in just one template and it is likely that the same information  can be shared by others (e.g. the name of the company achieving t
he result is missing in one  template about company results, but is present in other templates derived from the same text).  The search space is composed by the list of the filled templates. 
\par A rule at this level allows to recover the information. An example of a rule is the folllowing:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 (DEF-FST-RULE inherit-issuer-1-to-2
\par     :REGEXP (EL1 <SPEC=head,HEAD-SEM=TEMPL::BOND-TEMPLATE>
\par \tab \tab  EL2 <HEAD-SEM=TEMPL::BOND-TEMPLATE, 
\par \tab \tab \tab NOT-FILLED=TEMPL::ISSUER>
\par \tab \tab  EL3 <BEING=(EL1 TEMPL::ISSUER)>)
\par     :ACTION \{(SEM = (EL2(TEMPL::ISSUER = EL3)))\})
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 This rule allows to inherit the slot ISSUER from an adjacent template.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104301}1.7 DECLARING TEXT CLASSES AND RELATED RESOURCES{\*\bkmkend _Toc433104301}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 In order to declare different text classes it is necessary to provide some information in the file 
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\b\lang2057 application-dependent.lisp}{\lang2057  
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 in the main Pinocchio directory. This file contains the following declaration:
\par }\pard\plain \s62\li567\sa40\sl-180\slmult1\nowidctlpar \f3\fs20\lang1024 {\b\lang2057 (defun declare-all-current-text-types ()
\par   (init-text-classes)
\par   (declare-applINDEPENDENT-grammars
\par      :preparser }{\i\lang2057 grammar-decl}{\b\lang2057 
\par      :prechunker }{\i\lang2057 grammar-decl}{\b\lang2057 
\par }{\lang2057      }{\b\lang2057 :chunker }{\i\lang2057 grammar-decl}{\b\lang2057 
\par      :a-struct }{\i\lang2057 grammar-decl}{\b\lang2057 )
\par   ;; this part is to be repeated for each text class
\par }\pard \s62\fi-284\li851\sl-180\slmult1\nowidctlpar {\b\lang2057   (declare-application-grammars}{\lang2057  }{\i\lang2057 class-name}{\b\lang2057 
\par }\pard \s62\fi-284\li851\sl-180\slmult1\nowidctlpar\brdrr\brdrs\brdrw45\brsp20 {\b\lang2057     :corpus-sample }{\i\lang2057 pathname}{\b\lang2057 
\par }\pard \s62\fi-284\li851\sl-180\slmult1\nowidctlpar {\b\lang2057     :modif }{\i\lang2057 grammar-decl}{\b\lang2057 
\par     :normalizer }{\i\lang2057 grammar-decl}{\b\lang2057 
\par     :crea-templ}{\i\lang2057  grammar-decl}{\b\lang2057 
\par     :fill-templ }{\i\lang2057 grammar-decl}{\b\lang2057 
\par     :templ-recovery }{\i\lang2057 grammar-decl}{\b\lang2057 
\par     :muc-templ-rec }{\i\lang2057 grammar-decl}{\b\lang2057 
\par     :discourse }{\i\lang2057 grammar-decl}{\b\lang2057 
\par     :impl-rel }{\i\lang2057 grammar-decl}{\b\lang2057 
\par     :syn-coref }{\i\lang2057 grammar-decl}{\b\lang2057 ) )
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 where
\par }\pard\plain \s62\fi-284\li851\sl-180\slmult1\nowidctlpar \f3\fs20\lang1024 {\i\lang2057 grammar-decl }{\lang2057 ::== (create-grammar-info NIL }{\i\lang2057 grammar-file-name \tab \tab \tab \tab \tab \tab \tab \tab code-file-name)}{\lang2057 
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The function declare-all-current-text-types (the name is misleading) allows to declare the paths for all the FST-grammars by declaring 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the application independent FST grammars (by using }{\b\f3\fs22\lang2057 
declare-applINDEPENDENT-grammars}{\lang2057 )
\par {\pntext\pard\plain\f1 \'b7\tab}a text class together with all its specific grammars.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The function }{\f3\fs22\lang2057 create-grammar-info}{\lang2057  takes as input:
\par {\pntext\pard\plain\f8 1.\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\lang2057 NIL (the first parameter is left for future use);
\par {\pntext\pard\plain\f8 2.\tab}the name of the FST grammar to be compiled by the FST compiler;
\par {\pntext\pard\plain\f8 3.\tab}the name of the code file where the compiler stores the code generated for the FST grammar
\par }\pard \ri100\sb80\sa80\nowidctlpar\brdrr\brdrs\brdrw45\brsp20 {\lang2057 
Special attention must be paid to the corpus-sample keyword in the declare-application-grammar function. It is used by the interface in order to present the user with the list of texts when selecting the voice \ldblquote test -> load text from corpus
\rdblquote . The corpus list is sensible to the current text class shown in the pinocchio window.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104302}PATHNAMES FOR G-FST RESOURCE{\*\bkmkend _Toc433104302}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Can be now retrieved by inspecting the file application-dependent.lisp
\par }\pard \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057 
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104303}1.7 Template Result Presentation{\*\bkmkend _Toc433104303}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 When templates are filled by Pinocchio
, they must be presented to the user. Different users can require different presentations for the same information. This module allows to change the user view of results.
\par Some code is required for implementing different presentations. In PINOCCHIO two possible presentations are available as default:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \li1003\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 via Geppetto grapher for debugging the resources;
\par {\pntext\pard\plain\f1 \'b7\tab}a MUC-compatible format for evaluation.
\par }\pard \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057 The first one is included in the PINOCCHIO package; it is general and portable across domains.
\par The MUC-compatible format is adaptable to different domains, but some code implementation is required.  The MUC presentation is taylorable by using the following three methods:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\b\lang2057 CHART::PRINT-SLOT-NAME }{\b\i\lang2057 template slot}{\b\lang2057 
\par CHART::PRINT-OBJ-POINTER-OR-STRING }{\b\i\lang2057 object textid}{\b\lang2057 
\par CHART::PRINT-POINTED-OBJ }{\b\i\lang2057 object}{\b\lang2057 
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\b\f3\fs32\lang2057 PRINT-SLOT-NAME}{\f3\fs32\lang2057  }{\lang2057 is a method (discriminating on the }{\i\lang2057 template}{\lang2057 
 type) that allows to change the name of the slots provided for a template. It is generally composed by a case discriminating on the }{\i\lang2057 slot}{\lang2057  parameter. Example:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 (defmethod PRINT-SLOT-NAME 
\par               ((object templ::bond-template) slot)
\par   (case slot
\par     (templ::issuer  'issuer)
\par     (templ::AMOUNT  'AMOUNT)
\par     (templ::CURRENCY  'CURRENCY)
\par     (templ::MATURITY  'MATURITY)
\par     (templ::AVERAGE-DURATION  'AVERDURATION)
\par     (templ::GLOBAL-RATE  'GLOBRATE)
\par     (otherwise 
\par      (unless (member slot KB::*special-role-list*)
\par        (intern (format NIL "~A" slot) 
\par \tab \tab    (find-package :chart ))))))
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 The condition }{\f3\fs20\lang2057 (member slot KB::*special-role-list*)}{\lang2057 
 is necessary when a slot name is not directly filtered, as the KB defines some special slots that are used by the KB for computing some internal information; the user is not interested in the content of those slots and they can be filtered by that condit
ion.
\par }{\b\f3\fs32\lang2057 PRINT-OBJ-POINTER-OR-STRING}{\f3\fs32\lang2057  }{\lang2057 is the main method 
for MUC presentation. It is used for presenting the content of a template slot value. Template slots are always filled with other instances. The main presentation function invokes this method for printing the value. There are two types of presentations th
at in the MUC format are possible:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \li1003\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
strings (e.g. labels or strings for the MUC scorer). Labels and strings can be generated by using the object class, or the strings that triggered the current object in the text. Labels are user generated, so the user must 
p[rovide a value that is returned by the method }{\i\lang2057 as Lisp string}{\lang2057 . Concerning text strings, there are two possible strings associated to an object. 
\par {\pntext\pard\plain\f8 1.\tab}}\pard \li1723\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\lang2057 
the string associated to the simple phrase (i.e. a DP recognized at chunk level), i.e. the basic edge
\par {\pntext\pard\plain\f8 2.\tab}the phrase with associated modifiers and/or arguments (i.e. the extended edge), e.g. a verb and its arguments; this is the default.
\par {\pntext\tab}}\pard \li1003\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlcont\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
Those strings can be retrieved by funcalling the function contained in the variable CHART::*get-text-spanned* and passing the arguments }{\i\lang2057 object}{\lang2057  and }{\i\lang2057 type}{\lang2057  where }{\i\lang2057 object }{\lang2057 
 is an instance (e.g. a template slot value) and }{\i\lang2057 type }{\lang2057  is a keyword that can be either }{\i\lang2057 :basic }{\lang2057  or }{\i\lang2057 :extended.}{\lang2057  Example of use: 
\par {\pntext\tab}}\pard \li1723\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlcont\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 (funcall CHART::*get-text-spanned*  obj1    :type :basic)
\par {\pntext\tab}}\pard \li720\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlcont\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 Example of a method definition of this type:
\par }\pard\plain \s62\li993\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 (defmethod PRINT-obj-POINTER-or-string 
\par }\pard \s62\li720\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057 \tab \tab \tab ((object templ::economic-results) textid)
\par }\pard \s62\li1134\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057   (declare (ignore textid))
\par   (funcall CHART::*get-text-spanned* object
\par \tab \tab \tab \tab \tab      \tab      :type :basic))
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard\plain \li1003\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}\f8\lang1024 {\lang2057 
pointers; a pointer is a filler that can have additional slots. The pointer is defined in the MUC formalism as a name enclosed in brackets. For example }{\f3\fs20\lang2057 <COMPRES-text12-1) }{\lang2057 
is the name of a pointer. The pointer is composed by the class identifier (}{\f3\fs20\lang2057 COMPRES}{\lang2057  in the example)  followed by hyphen and the text identifier (}{\f3\fs20\lang2057 text12}{\lang2057  in the example) and a pointer index  (}{
\f3\fs20\lang2057 1}{\lang2057  in the text).  Pointers are inserted as filler of the current slot and the object represented by the pointer is queued for printing. The pointer definition method is PRINT-obj-POINTER-or-string.
\par }\pard \li993\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057 Example of the pointer definition method is:
\par }\pard\plain \s62\li993\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 (defmethod PRINT-obj-POINTER-or-string 
\par }\pard \s62\li720\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057 \tab \tab \tab ((object templ::economic-results) textid)
\par }\pard \s62\li993\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\lang2057   (format NIL "<COMPRES-~A-~D>" textid 
\par \tab \tab \tab \tab \tab     (incf *compres-count*)))
\par }\pard\plain \li993\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 
Pointers cause the function PRINT-OBJ-CONTENT to be invoked for printing the object represented by the pointer at the end of the computation. Pointers must be returned by the method }{\i\lang2057 as Lisp strings.}{\lang2057 
\par }\pard \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\b\f3\fs32\lang2057 PRINT-POINTED-OBJ}{\f3\fs32\lang2057  }{\lang2057 is a method invoked for printing an object introduced by a pointer. 
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f3\fs20\lang1024 {\lang2057 (defmethod print-pointed-obj ((obj SL::LOAN))
\par   (format NIL "~A"  'PRESTITO-OBBLIGAZIONARIO))
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 
is an example of label generation starting from an object. It is possible to loop on the object slots and print the slot values by using the both the methods introduced above. }{\b\lang2057 In case some pointers are generated, it is}{\lang2057  }{
\b\lang2057 necessary to queue the generated object into the list CHART:: *to-be-printed*.
\par }{\lang2057 
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104304}1.7.1 IMPLEMENTING  NEW PRESENTATIONS{\*\bkmkend _Toc433104304}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 \f8\lang1024 {\lang2057 This step is to be performed }{\b\lang2057 only when a new presentation format is required. }{\lang2057 The templates results are contained in the
 variable CHART:: *muc-templ-filled*. This is a list of template instances that are implemented as CLOS classes, according to the definition contained in the KB. The standard CLOS operations can be performed on the instances for retrieving slot values. Wh
en an instance of a non-template type is retrieved from a slot, it is possible to:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \li1003\ri100\sb80\sa80\nowidctlpar\brdrr\brdrth\brdrw30\brsp20 {\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 print a label (maby selected by using the object class);
\par {\pntext\pard\plain\f1 \'b7\tab}print the spanned text by using the functions mentioned in the previous section.
\par }\pard\plain \s1\ri84\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104305}2. Knowledge Representation{\*\bkmkend _Toc433104305} }{\pard\plain \s1\ri84\sb720\sa240\keepn\nowidctlpar \scaps\v\f8\fs48\lang2057 {\tc {
\lang2057 THE KNOWLEDGE BASE \tcl1}}}{\lang2057 
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 We re-implemented a (very limited) subset of Classic into CLOS.  A knowledge base can be loaded into classic for tests and development and in CLOS for running.
\par An example of knowledge base is contained in:
\par }\pard \ri84\sb40\sa40\nowidctlpar {\f3\fs22\lang2057 \tab (merge-pathnames USER::*KB-PATHNAME* \ldblquote }{\f3\fs20\lang2057 Tbox.lisp\rdblquote )
\par }{\f3\fs22\lang2057 \tab (merge-pathnames USER::*KB-PATHNAME* \ldblquote }{\f3\fs20\lang2057 Abox.lisp\rdblquote )
\par }\pard \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 {\lang2057 A knowledge base starts always with a header like:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (in-package <kb-package>)
\par (use-package "KB" <kb-package>)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 \f8\lang1024 {\lang2057 where \ldblquote KB\rdblquote  is the name of a reserved package where PINOCCHIO stores its acces
s functions to the KB. <kb-package> can be any package name. Currently the knowledge base package is \ldblquote SL\rdblquote ).
\par The root of the knowledge base}{\pard\plain \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 \v\f8\lang2057 {\xe {\lang2057 root of the knowledge base}}}{\v\lang2057  }{\lang2057 (e.g. XXX) must always be defined as:
\par }\pard \li567\ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 {\f3\fs20\lang2057  (KB::DEFINE-KB-ROOT XXX)
\par }\pard \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 {\lang2057 The end of the Tbox of the knowledge base is marked as:
\par }\pard \li567\ri84\sb80\sa240\nowidctlpar\tx1152\tx2736\tx3024 {\f3\fs20\lang2057  (KB::end-of-kb)
\par }\pard \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 {\b\lang2057 Any declaration following the end-of-kb has impredictable results!}{\lang2057 
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104306}Reloading the Knowledge Base{\*\bkmkend _Toc433104306}
\par }\pard\plain \ri84\sb80\sa240\nowidctlpar\tx288\tx432\tx1152\tx2304\tx2736\tx3456\tx4608 \f8\lang1024 {\pard\plain \ri84\sb80\sa240\nowidctlpar\tx288\tx432\tx1152\tx2304\tx2736\tx3456\tx4608 \v\f8\lang2057 {\tc {\lang2057 .i.Reloading The Knowledge Base 
\tcl1}}}{\lang2057 The knowledge base can be (re)loaded by (re)loading  the file(s) containing it. See also in the menu "System" of the Pinocchio window the item "Load Knowledge Base".
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104307}Drawing the TBOX{\*\bkmkend _Toc433104307}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\tx288\tx432\tx1152\tx2304\tx2736\tx3456\tx4608 \f8\lang1024 {\pard\plain \ri84\sb80\sa80\nowidctlpar\tx288\tx432\tx1152\tx2304\tx2736\tx3456\tx4608 \scaps\v\f8\fs28\lang2057 {\tc {\scaps\fs28\lang2057 
.i.Drawing The Knowledge Base\tcl1}}}{\scaps\fs28\lang2057 I}{\lang2057 t is possible to draw the Tbox of the knowledge base (or parts of it) by calling the function:
\par }{\f3\fs20\lang2057 \tab \tab \tab KB::GRAPH-KB}{\pard\plain \ri84\sb80\sa80\nowidctlpar\tx288\tx432\tx1152\tx2304\tx2736\tx3456\tx4608 \v\f3\fs20\lang2057 {\xe {\f3\fs20\lang2057 GRAPH-KB}}}{\f3\fs20\lang2057  list-of-concepts &key (this-only NIL)
\par }\pard \ri84\sb80\sa240\nowidctlpar\tx288\tx432\tx1152\tx2304\tx2736\tx3456\tx4608 {\lang2057 
the list-of-concepts is a list of the concepts you want to see. It is just necessary to indicate the root of a (sub)hierarchy, as the function is recursive on the hierarchy. It also foll
ows the role restrictions. If the rest of the subhierarchy is not needed, set this-only to T.
\par }\pard\plain \s2\ri84\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104308}Objects in the KB{\*\bkmkend _Toc433104308}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 \f8\lang1024 {\lang2057 A knowledge base is composed by three types of objects:
\par }\pard \fi-360\li927\ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 {\lang2057 \bullet \tab relations (or roles)
\par \bullet \tab concepts
\par \bullet \tab reified-relations
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 All the objects can be associated to three types of information:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 english: a string stating a mnemonic English name for an object;
\par {\pntext\pard\plain\f1 \'b7\tab}italian: a string stating a mnemonic Italian name for an object;
\par {\pntext\pard\plain\f1 \'b7\tab}a documentation string.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 Those three features can be declared by using the keys english/italian/doc in the functions for creating the objects in the KB and can be retrieved in the following way:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 get-english (object-or-objectname)
\par get-italian (object-or-objectname)
\par get-doc     (object-or-objectname)
\par }\pard\plain \s2\ri84\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104309}Roles{\*\bkmkend _Toc433104309}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 \f8\lang1024 {\lang2057 Role (also called relations) are defined as in Classic; to declare them the following function can be used:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 KB::cl-define-role (role-name &key (parent NIL)
\par \tab \tab          \tab \tab (attribute NIL)(Inverse NIL) 
\par \tab \tab \tab \tab \tab english italian doc
\par KB::cl-primitive-define-role (role-name &key (parent NIL)
\par \tab \tab \tab \tab      (attribute NIL)(Inverse NIL)
\par \tab \tab \tab \tab \tab english italian doc
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 \f8\lang1024 {\lang2057 
The meaning of the function is the same as in the Classic definition. In the current implementation they are equivalent, but please, use them properly. The role-name must be quoted so as the value of parent.
\par A role is an  attribute if it has just one filler. The inverse has the same meaning as in classic.
\par See above for the definition of }{\f3\fs20\lang2057 english italian}{\lang2057  and }{\f3\fs20\lang2057 doc.}{\lang2057 
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104310}Retrieving Roles by Names{\*\bkmkend _Toc433104310} 
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 When an object is to be accessed by using its name with the functions:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::find-relation (rolename)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 They return the actual object (e.g. a CLOS class or instance, but the user must never access objects by using standard CLOS operations)
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104311}Retrieving Names by Roles{\*\bkmkend _Toc433104311}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Having a role(e.g. as returned by  }{\f3\fs20\lang2057 find-relation}{\lang2057 , in order to access its name, use the following function:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::object-name (role)
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104312}Testing for an Object Identity{\*\bkmkend _Toc433104312}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 role-p (obj)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Return T when obj is a role.
\par }\pard\plain \s2\ri84\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104313}CONCEPTS{\*\bkmkend _Toc433104313}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 \f8\lang1024 {\lang2057 To declare concepts, the following functions can be used:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 KB::define-primitive-concept (concept-name definition 
\par \tab \tab \tab \tab \tab &key english italian doc) 
\par KB::define-disjoint-primitive-concept 
\par \tab \tab (concept-name definition disjunction-id
\par \tab \tab \tab \tab \tab &key english italian doc)
\par }\pard\plain \ri84\sb80\sa240\nowidctlpar\tx1152\tx2736\tx3024 \f8\lang1024 {\lang2057 
The meaning of the function is the same as in the Classic definition. In the current implementation they are equivalent, but please, use them properly. The concept-name must be quoted, so as definition and disjunction-id.
\par }\pard \ri84\sb80\sa80\nowidctlpar\tx1152\tx2736\tx3024 {\f3\fs20\lang2057 definition}{\fs20\lang2057 :   currently only  a   subset of  the available classic definition is supported:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 <definition>::  <concept-name> | <compl-def>
\par <compl-def>::\tab "(" "AND" <concept-name>  <slot-def>+ ")" 
\par <slot-def>::\tab "(" "ALL" <role-name> <restriction> ")" |
\par \tab \tab \tab "(" SAME-AS <path> <path> ")" 
\par <role-name>::\tab a symbol
\par <concept-name>:: a symbol
\par <path>::\tab \tab as in the classic definition of same-as
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 See above for the definition of }{\f3\fs20\lang2057 english italian}{\lang2057  and }{\f3\fs20\lang2057 doc.}{\lang2057 
\par 
\par }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw15 \trbrdrl\brdrs\brdrw15 \trbrdrb\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7938 \pard 
\fi-284\li284\sb80\sa240\nowidctlpar\intbl\tx0\tx432\tx1152\tx2304\tx2736\tx3456\tx4608 {\b\f4\cf1\lang2057 IMPORTANT NOTE
\par }\pard \ri100\sb80\sa80\nowidctlpar\intbl {\lang2057 
The  implementation transforms concepts into CLOS classes; currently there is not any way to undefine classes; so when a knowledge base is reloaded, the classes declaration can  be changed but not deleted; 
the only way to forget completely a class is that of exiting lisp.\cell }\pard \intbl {\lang2057 \row }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104314}Retrieving Concepts  by Names
{\*\bkmkend _Toc433104314} 
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 When a concept is to be accessed by using its name with the functions:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::find-concept (conceptname)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 They return the actual object (e.g. a CLOS class, but the user must never access objects by using standard CLOS operations)
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104315}Retrieving  Names by Concepts{\*\bkmkend _Toc433104315}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Having an object (e.g. as returned by }{\f3\fs20\lang2057 find-concept}{\lang2057  or }{\f3\fs20\lang2057 find-relation}{\lang2057 , in order to access its name, use the following function:

\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::object-name (role-or-concept)
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104316}Testing for a Concept Identity{\*\bkmkend _Toc433104316}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 concept-p (obj)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Return T when obj is a concept, role or  instance respectively.
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104317}Accessing  role restriction s within concepts{\*\bkmkend _Toc433104317}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::get-role-restriction (role-name concept-name)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 this function returns a restriction, i.e. an object name.
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104318}Accessing  all the roles and their  restriction s for a  concept{\*\bkmkend _Toc433104318}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::get-roles-and-restrictions(concept-name)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 this function returns a list of element; each element is a list composed by a role-name and a restriction. A restriction is an object name.
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104319}Testing the Type Compatibility between Concepts{\*\bkmkend _Toc433104319}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 compatible-object-p (concept1 concept2)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 two concepts are compatible if there is path in the knowledge base that connects the two concepts via ISA link only.
\par }\pard\plain \s2\ri84\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104320}REIFIED RELATIONS{\*\bkmkend _Toc433104320}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
Reified relation declarations cause the creation of both  a concept and a role with the given name and definition. Relations are reified for many reasons, first of all in order to allow multiple ancestors for roles (the concept is always used by 
PINOCCHIO for subsumption relations, not the ROLE). 
\par }\pard\plain \s62\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 define-disjoint-primitive-reifrel 
\par \tab \tab \tab (relation definition disjunction-id
\par \tab \tab \tab &key english italian doc)
\par define-primitive-reifrel (relation definition 
\par \tab \tab \tab &key english italian doc)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The syntax is the same as that used for concept declarations.
\par Functions for accessing role or concept properties are the same for roles or concepts (see above).
\par }\pard\plain \s2\ri84\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104321}INSTANCES{\*\bkmkend _Toc433104321}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Instances are created in the Abox by using
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 KB::cl-create-ind (instance-name definition)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 where the definition is given by:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 <definition>::  <concept-name> | <compl-def>
\par <compl-def>::\tab "(" "AND" <concept-name>  <slot-def>+ ")" 
\par <slot-def>::\tab "(" "FILL" <role-name> instance-name ")"
\par \tab \tab \tab "(" SAME-AS <path> <path> ")" 
\par <role-name>::\tab a symbol
\par <concept-name>:: a symbol
\par <instance-name>:: a symbol
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104322}Accessing Objects  by Names{\*\bkmkend _Toc433104322} 
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 When an instance is to be accessed by using its name with the functions:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::find-instance (instname)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 It returns the actual object (e.g. a CLOS instance, but the user must never access objects by using standard CLOS operations)
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104323}Retrieving Names by Instances{\*\bkmkend _Toc433104323}
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Having an instance (e.g. as returned by }{\f3\fs20\lang2057 find-instance}{\lang2057 , in order to access its name, use the following function:
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::get-inst-name (instance) 
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104324}Testing for an Instance Identity{\*\bkmkend _Toc433104324}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 instance-p (obj)
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Return T when obj is an instance.
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104325}Setting a slot in an instance{\*\bkmkend _Toc433104325}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::set-slot-value (instance slot-name value)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This function automatically sets the value for inverse relations and also follows SAME-AS paths.
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104326}Resetting a slot in an instance{\*\bkmkend _Toc433104326}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::reset-slot-value (instance slot-name)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This function automatically sets the value of the slot to unbound. It also follows SAME-AS paths. It also follows inverse relations that are also reset.
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104327}Deleting  an  instance from the knowledge base{\*\bkmkend _Toc433104327}
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 kb::delete-an-instance (instance)
\par }\pard\plain \ri84\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
Considering that it is impossible to delete an instance in CLOS, with this operation the instance is detached from the class it belonged to and it is attached to the class SL::DELETE-ELEMENTS (this is a class defined by default by the system).
\par }\pard\plain \s3\ri84\sb180\keepn\nowidctlpar \b\scaps\f8\fs20\lang1024 {\lang2057 {\*\bkmkstart _Toc433104328}Copying an  instance{\*\bkmkend _Toc433104328} 
\par }\pard\plain \s62\li720\ri84\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 copy-inst-into (source-inst dest-inst)
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 I
t copies all the role content of the source instance into the destination instance. Both the instances must be already existent and of the same type. If they are not of the same type, the roles that are present in the source and not in the destination are
 not copied. Roles that are present in the destination, but not in the source, are left unbound.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn\nowidctlpar \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104329}The KB Parameters{\*\bkmkend _Toc433104329}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Some role or concept names in the KB are used in the code in order to make PINOCCHIO more efficient. Their name is contained in the PARAMETER file i
n the KB directory. They must be changed only if their name is changed in the KB. In V3.0 they are}{\cs26\fs16\up6\lang2057 \chftn {\footnote \pard\plain \s22\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\cs26\fs16\up6 \chftn } {\fs20 
Up to V2.1 concepts in the KB had Italian names; for V3.0 those names were  translated in English by Bill Black.}}}{\lang2057 :
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 parameters  referring to generic classes
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\fs18\lang2057 (DEFPARAMETER GUM::+GENERIC-RELATION+ 'SL::KB-REL)
\par (DEFPARAMETER GUM::+UNKNOWN-OBJECT+ 'GUM::UNKNOWN-OBJECT)
\par (DEFPARAMETER GUM::+REVERSIBLE-RELATION+ 'GUM::REVERSIBLE-RELATION)
\par (DEFPARAMETER GUM::+IMPLICIT-RELATION+ 'SL::IMPLICIT-REL)
\par (DEFPARAMETER GUM::+INVERSE-IMPLICIT-RELATION+ 'SL::RELAZIONE-IMPLICITA-INVERSA)
\par (DEFPARAMETER GUM::+GENERIC-TEMPORAL-RELATION+ 'SL::TEMPORAL-RELATION)
\par (DEFPARAMETER GUM::+COORD+ 'SL::CONJ)
\par (DEFPARAMETER GUM::+DO-NOT-CONSIDER-WITHOUT-SEM+ 'DO-NOT-CONSIDER-WITHOUT-SEM)
\par }{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard\plain \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}\f8\lang1024 {\lang2057 parameters referring to generic slots of verbs and reified relations
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\fs18\lang2057 (DEFPARAMETER GUM::+UM-DOMAIN+ 'GUM::UM-DOMAIN)
\par (DEFPARAMETER GUM::+UM-RANGE+ 'GUM::UM-RANGE)
\par (DEFPARAMETER GUM::+ACTOR+ 'GUM::ACTOR)
\par (DEFPARAMETER GUM::+ACTEE+ 'GUM::ACTEE)
\par }{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard\plain \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}\f8\lang1024 {\lang2057 parameters interesting for discourse processing (used for efficiency)
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\fs18\lang2057 (DEFPARAMETER CHART::*INTERESTING-CLASS* 
\par     '(SEMLEX::QUANTITY SL::SENTIENT-ENTITY SL::KB-ACTION 
\par       SL::BOND-RELATED SL::LOAN SL::NUMBER-OR-CURRENCY SL::PERIOD
\par       SL::ECONOMIC-RESULT ))
\par }{\lang2057 
\par }{\fs18\lang2057 ;; SLOTS IN WHICH NUMBERS AND PROPER NAMES ARE PUT
\par (DEFPARAMETER GUM::+SLOTS-FOR-VALUES+
\par     '(SL::VALUE-FOR-AMOUNT SL::NUMERIC-VALUE SL::NUMERIC-PERCENTAGE SL::TIME-VALUE SL::NAME-RELATION))
\par }{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard\plain \fi-283\li1003\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}\f8\lang1024 {\lang2057 parameters used in the QLF of proper names, numbers, etc.
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\fs18\lang2057 (DEFPARAMETER CHART::+HAS-NAME-REL+ 'SL::NAME-RELation)
\par (DEFPARAMETER GUM::+NAME+ 'SL::NAME)
\par (DEFPARAMETER CHART::+NAME+ 'SL::NAME)
\par (defparameter CHART::+NUMBER-OR-CURRENCY+ 'SL::NUMBER-OR-CURRENCY)
\par (DEFPARAMETER CHART::VALUE-FOR-AMOUNT 'SL::VALUE-FOR-AMOUNT)
\par (DEFPARAMETER CHART::+value+ 'SL::value)
\par (defparameter CHART::+MONETARY-AMOUNT+ 'sl::MONETARY-AMOUNT)
\par (defparameter CHART::+VALUE-FOR-AMOUNT+ 'sl::VALUE-FOR-AMOUNT)
\par (defparameter CHART::+MONETARY-VALUE+ 'sl::MONETARY-VALUE)
\par (defparameter CHART::+PERCENTAGE+ 'sl::PERCENTAGE)
\par (defparameter CHART::+NUMERIC-PERCENTAGE+ 'sl::NUMERIC-PERCENTAGE)
\par (defparameter CHART::+VALUE-PERCENTAGE+ 'sl::VALUE-PERCENTAGE)
\par (defparameter CHART::+time-value+ 'sl::time-value)
\par (defparameter chart::+organization+ 'sl::organization)
\par (defparameter chart::+geographic-area+ 'sl::geographic-area)
\par (defparameter chart::+person+ 'sl::person)
\par (defparameter chart::+named+ 'sl::has-name)
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
\par }\pard\plain \s18\li560\ri100\sb1440\sa360\keepn\nowidctlpar \b\f8\fs72\lang1024 {\lang2057 \page Part 3                      Pinocchio: a tutorial
\par }\pard\plain \s15\li560\ri100\sb80\sa80\nowidctlpar \b\f8\fs28\lang1024 {\lang2057 
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 In this section a tutorial for defining a new PINOCCHIO application is contained.
\par As mentioned PINOCCHIO is composed by 15 different G-FST modules. Each of them must or can be used for setting up a 
new application. For the sake of explanation we are forced to use a very simple example, so not all the module will be used. For the other modules we will just introduce some notes.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104330}Getting Started{\*\bkmkend _Toc433104330}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Let\rquote s consider the following example:
\par }\pard \qc\ri100\sb80\sa80\nowidctlpar {\b\lang2057 Mazda and Ford formed a joint venture to produce car in the US
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057 The first step is defining the output to be produced by Pinocchio.
\par Let\rquote s suppose:
\par }\trowd \trgaph70\trleft1800 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx3420\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7470 \pard \sb80\sa80\nowidctlpar\intbl {\lang2057 Company:\cell 
\ldblquote Mazda and Ford\rdblquote  / \ldblquote Mazda\rdblquote  \ldblquote Ford\rdblquote \cell }\pard \intbl {\lang2057 \row }\trowd \trgaph70\trleft1800 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx3420\clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cellx7470 \pard \sb80\sa80\nowidctlpar\intbl {\lang2057 Object:\cell \ldblquote joint venture\rdblquote \cell }\pard \intbl {\lang2057 \row }\trowd \trgaph70\trleft1800 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cellx3420\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7470 \pard \sb80\sa80\nowidctlpar\intbl {\lang2057 Activity:\cell \ldblquote to produce car in the US\rdblquote \cell }\pard \intbl {\lang2057 \row }\pard 
\ri100\sb80\sa80\nowidctlpar {\lang2057 It is important to stress that information extraction from text (IE) is a task driven process, then it is always necessary to start from the results to be obtained.
\par It is also worth noting that there is no sense in starting an application by considering just one sentence; this is necessary here for the sake of presentation, but many references will be done in the following to the \ldblquote corpus\rdblquote 
, as some considerations can only be done by inspecting a corpus.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104331}Defining the Lexicon{\*\bkmkend _Toc433104331}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The portion of the lexicon to be defined for the example above is reduced. We won\rquote 
t consider the definition of closed class words such as prepositions and articles, as they are already defined in the Geppetto default lexicon. We will also ignore the definition of the proper names in the lexicon, as their recognition i
s application independent and provided by Pinocchio.
\par We can initially suppose to define each term by using a simple lexical class such as noun verb, adjective, transitive-verb, etc.
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 form
\par \tab cat: transitive-verb
\par \tab tfs-expression: ((@VERB2 SL::FORM $ARG1 GUM::UM-ACTOR 
\par }\pard \s62\li3600\ri102\sb40\sa40\nowidctlpar {\lang2057 $ARG2 GUM::ACTEE) & (@LOGICAL FORM))
\par }\pard \s62\li720\ri102\sb40\sa40\nowidctlpar {\lang2057 joint
\par \tab cat: adjective
\par \tab tfs-expression: ((@ADJECTIVE) & (@LOGICAL FORM))
\par venture
\par \tab cat: noun
\par \tab tfs-expression: ((@NOUN SL::VENTURE) & (@LOGICAL FORM))
\par produce
\par \tab cat: verb-transitive
\par \tab tfs-expression: ((@VERB2 SL::PRODUCE $ARG1 GUM::UM-ACTOR 
\par \tab \tab \tab \tab $ARG2 GUM::ACTEE) & (@LOGICAL FORM))
\par car
\par \tab cat: noun
\par \tab tfs-expression: ((@NOUN SL::CAR) & (@LOGICAL FORM))
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This is the basic lexicon. As it can be noted, each term (except joint) has been associated to a concept in the knowledge base 
with the same word as name. This is a simplification for the sake of readability. In the knowledge base definition the exact definition of these concept will be given. It is not necessary in this example to define a concept for }{\i\lang2057 joint}{
\lang2057   as this word is part of a compound (}{\i\lang2057 joint+}{\lang2057 venture) and joint won\rquote 
t be considered as single word. On the contrary we suppose that venture can be used as alone in other parts of the corpus, so it is fully defined.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104332}Recognising Compounds{\*\bkmkend _Toc433104332}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 In the template above (and also in a generic corpus about joint ventures) one construction emerges as a fixed phrase: }{\i\lang2057 joint venture}{\lang2057 
.  It is worth considering it as a compound instead two words. The discussion of what a compound is, is not the object of this report, but in general it is good practise to consider a group of words as a compound when:
\par {\pntext\pard\plain\f1 _\tab}}\pard \fi-360\li1080\ri100\sb80\sa80\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb _}}{\lang2057 their are always adjacent (e.g. it never happens something such as }{\i\lang2057 a joint forced venture}{
\lang2057 , or in case it happens the terms in between can be ignored)
\par {\pntext\pard\plain\f1 _\tab}it is not worth considering their semantics in a compositional manner.
\par }\pard \ri100\sb80\sa80\nowidctlpar {\lang2057  For example the Italian term \ldblquote societ\'87 in conto capitale\rdblquote 
 is a company description that in many applications is not necessary to define in a compositional way by defining the relations among words; moreover it is never interleaved by other words.
\par A  compound can be recognised as a fixed form (such as }{\i\lang2057 as a matter of }{\lang2057  }{\i\lang2057 facts }{\lang2057 that has no morphological variations) or it can have morphological variations (such as }{\i\lang2057 take note}{\lang2057 
  where the verb can be conjugated). 
\par The right place to recognise compounds  is in the }{\b\lang2057 preparser}{\lang2057  by using a rule such as:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule joint-venture
\par \tab :REGEXP (EL1 <TOKEN=\ldblquote joint\rdblquote >
\par \tab \tab \tab EL2 <FORM=\ldblquote venture\rdblquote >)
\par \tab :ACTION \{(INSERT-EDGE \ldblquote joint-venture\rdblquote )\}
\par \tab \tab \tab (INHERIT-LEX-FEATURES EL2))
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 In the condition }{\i\lang2057 joint}{\lang2057  is a fixed form, while }{\i\lang2057 venture }{\lang2057 can have morphological variations (such as }{\i\lang2057 ventures}{\lang2057 
).This rule creates an edge in the chart subsuming both  joint and venture; the new edge has an associated form (i.e. a word) that is }{\i\lang2057 joint-venture}{\lang2057 . The lex features of the new term will be the same of the term }{\i\lang2057 
venture}{\lang2057 , i.e. }{\i\lang2057 joint + ventures}{\lang2057  will produce a plural term. In  order to fire that rule it is necessary to provide PINOCCHIO 
with the information related to the new term created. It is then necessary to add a word in the lexicon that has lemma }{\i\lang2057 joint-venture}{\lang2057 .
\par In the lexicon }{\i\lang2057 joint venture}{\lang2057  will have a form such as:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 joint-venture
\par \tab cat: noun
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 \tab tfs-expression: ((@COMMON-SEM SL::JOINT-VENTURE))
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104333}Defining Concepts{\*\bkmkend _Toc433104333}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The second step is the definition of the concepts mentioned in the lexical items in the knowledge base (KB). Given the current form of the KB in PINOCCHIO V2.1, }{\i\lang2057 sl::FORM }{
\lang2057  and }{\i\lang2057 SL::PRODUCE}{\lang2057  will be defined in the file }{\i\lang2057 lexical-actions.lisp}{\lang2057  as intentional actions with an actor whose restriction is a }{\i\lang2057 SL::company}{\lang2057  and actee a }{\i\lang2057 
SL::COMPANY}{\lang2057   for the first and }{\i\lang2057 SL::OBJECT}{\lang2057   for the second.
\par }{\i\lang2057 SL::PRODUCE}{\lang2057  will have a slot location with restriction SL::PLANTS or SL::AREA-GEOGRAFICA (disjunction is not allowed in the KB, yet, so a concept subsuling both must be defined as direct son of the KB root).
\par }{\i\lang2057 SL::COMPANY}{\lang2057  is equivalent to the current }{\i\lang2057 SL::ORGANIZZAZIONE}{\lang2057  in the default KB. }{\i\lang2057 SL::VENTURE}{\lang2057  and }{\i\lang2057 SL::JOINT-VENTURE}{\lang2057 
 are nested types of companies (in the file }{\i\lang2057 named-entities.lisp}{\lang2057 ).
\par }{\i\lang2057 SL}{\lang2057 ::}{\i\lang2057 OBJECT}{\lang2057  is equivalent to the current }{\i\lang2057 ???}{\lang2057 .
\par }{\i\lang2057 SL::CAR}{\lang2057   is a child of }{\i\lang2057 SL::OBJECT }{\lang2057 Note: it is possible to consider that it s not useful to declare car as a concept, but leave it as undefined (i.e. with the concept }{\i\lang2057 SL::UNKNOWN-OBJECT}{
\lang2057  automatically associated by PINOCCHIO to objects without an associated type in the lexicon. The restriction of PRODUCE GUM::ACTEE can then be In t
his case every type of object and unknown objects (these are distinct types as far as I can remember). 
\par A slot finalised activity should be defined for }{\i\caps\lang2057 companY}{\lang2057  and }{\i\caps\lang2057 form}{\lang2057 .
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104334}Defining Syntax{\*\bkmkend _Toc433104334}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Defining syntax is a complex process and cannot be described here in short. See Geppetto\rquote s Documentation and D10.???.
\par The result of the analysis at the end of the a-struct level will be the following:
\par }{\f4\fs20 {\pict\wmetafile8\picw24589\pich14429\picwgoal13940\pichgoal8180 \picscalex59\picscaley59 
010009000003af0300000300250000000000050000000b0200000000050000000c029901b9020400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0000000000
000a00000026060f000a00ffffffff00000000000013000000fb02f0ff00000000000090010000000000000030436f7572696572204e6577000000040000002d0100002500000021053e004d617a646120616e6420466f726420666f726d65642061206a6f696e742076656e7475726520746f2070726f6475636520636172
20696e207468652055538c0130000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000900000021050500636f6f726400e3005a0007000000210502006e70f60068000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007
000000210502007670ec00d2000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000210502006e70ec0038010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000002105020076704401bc010a0000002606
0f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000210502006e7044010a020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000800000021050300707020004401460213000000fb02ecff000000000000bc0200000000000000
30436f7572696572204e6577000000040000002d01010004000000f001000007000000210501002a00440163020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000013000000fb02f0ff00000000000090010000000000000030436f7572696572204e657700000004000000
2d01000004000000f001010007000000210502006e70500136000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000210502006e70500196000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000210502
006970360044010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000210502006370ec00fe010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000007000000fc020100000000000000040000002d01010008000000
fa0206000100010000000000040000002d0102000c000000240304004200510136007b014e007b01420051010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c000000240304004401fd0008017501810175014401fd000a00000026060f000a00ffffffff0100000000
000a00000026060f000a00ffffffff0000000000000c00000024030400db00fd00ba007501fc007501db00fd000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c000000240304009c00510190007b01a8007b019c0051010a00000026060f000a00ffffffff01000000
00000a00000026060f000a00ffffffff0000000000000c00000024030400780051016c007b0184007b01780051010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000900000021050500636f6f726400440160000a00000026060f000a00ffffffff0100000000000a0000
0026060f000a00ffffffff0000000000000c000000240304007500fd0048002d01a2002d017500fd000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c000000240304000502f700c3013301470233010502f7000a00000026060f000a00ffffffff0100000000000a00
000026060f000a00ffffffff0000000000000c00000024030400bd0151019f018101db018101bd0151010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c0000002403040053024b012f027b0177027b0153024b010a00000026060f000a00ffffffff0100000000000a
00000026060f000a00ffffffff0000000000000c0000002403040011025101050281011d028101110251010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000c000000240304004a014e007800c7001d02c7004a014e000a00000026060f000a00ffffffff010000000000
0a00000026060f000a00ffffffff000000000000070000001b049901b902000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff010000000000040000002701ffff030000000000000000e31be31be31be31be31be31be31be31b
e31be31be31be31be31be31be31be300e31be31be31be31be31be31be31be31be31be31be31be31be31be31be31be300e31be31be31be31be31be31be31be31be31be31be31be31be31be31be31be300e31be31be31be31be31be31be31be31be34eff0000ffff37ff00031be3b70000b779b70003e31bff004dff0000ffff
37ff0003e31b7d00ff7d787d0003b71b00004eff0000ffff37ff00041be37db7ffe576e500047db7e31b4eff0000ffff002020203500210041003a00410031003a0016001600360039003a0035003a00}}{\b\lang2057 
\par }{\lang2057 At the end of this phase the following instances are produced:
\par }{\f4\fs20 {\pict\wmetafile8\picw21202\pich13794\picwgoal12020\pichgoal7820 \picscalex65\picscaley65 
010009000003890400000300130000000000050000000b0200000000050000000c02870159020400000004010d00040000002e011800040000000201010005000000090200000000050000000102ffffff00030000001e000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0000000000
0007000000fc020100000000000000040000002d01000008000000fa0206000100010000000000040000002d010100070000001b047501790056011e0013000000fb02f0ff00000000000090010000000000000030436f7572696572204e6577000000040000002d01020009000000210505004d617a6461006a0133000a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000008000000210504006e616d653e0136000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffff
ff000000000000070000001b040f017900f0001e000a00000021050700436f6d70616e7900040129000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b04
7501f70056019c000800000021050400466f72646a01b6000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000008000000210504006e616d653e01b4000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f
000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b040f01f700f0009c000a00000021050700436f6d70616e79000401a7000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000a00000026060f000a00ffffffff010000000000
0a00000026060f000a00ffffffff000000000000070000001b04d300cd00ae004e000d00000021050d00436f6f726420436f6d70616e7900c5004f000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ef005f00d20048000500000014020c
013100050000001302b5007600040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604ef00c500d200b400050000001402b500a3000500000013020c01d600040000002701ffff0a00000026060f000a00ffffffff01000000
00000a00000026060f000a00ffffffff0000000000000800000021050400636f6f31e4003c000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0000000000000800000021050400636f6f32e400a8000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffff
ff000000000000070000001b04cd00bd01ae0038010d00000021050d006a6f696e742d76656e7475726500c2003c010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b044f0051013000f6000800000021050400666f726d440010010a00000026060f000a00
ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604a700130154008a00050000001402fa00010005000000130201009c01040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000090000002105050061
63746f72008400b4000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e00070000001604a7007901540038010500000014020100f700050000001302fa00ba01040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00
ffffffff00000000000009000000210505006163746565008a0038010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b043d0023021e00c8010a0000002105070070726f64756365003200d3010a00000026060f000a00ffffffff0100000000000a00000026
060f000a00ffffffff000000000000070000001b048b0023026c00c8010800000021050300636172008000e7010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016046c00f3013c00f1010500000014020c00f2010500000013029c00f2010400
00002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000009000000210505006163746565005a00da010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b0415011702f600bc01090000002105050050
6c616365000a01d1010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b0475011d025601c201070000002105020055536a01e5010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff00000000000008000000210504006e61
6d653e01da010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000030000001e000700000016045601ed013e01eb010500000014026e01ec010500000013022601ec01040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffff
ff000000000000030000001e000700000016042c01ed011401eb010500000014024401ec01050000001302fc00ec01040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff000000000000070000001b0487015902000000000a00000026060f000a00ffffffff01000000
00000a00000026060f000a00ffffffff010000000000040000002701ffff03000000000000000000000000000000000000000000ffe547e500037dc3b70008e500037dc3b70012e500047db7e31b4eff000000ff37ff0007e31b7db7e57db70009e500037dc3b700ffe547e500037dc3b70000e500037db7e50011e500047d
b71be34eff0000ffff37ff00081be37db7e57d00b708e500037dc3b700ffe547e500037dc3b70008e50003b7c3b70012e5000400b7e31b4eff0000ffff37ff0006e31b7db7e57d03c301b706e500037dc3b70000e547e500037dc3b70006e501b703c301b712e500047db71be34eff0000ffff0020617676696f206c756e65
646927203137206d61727a6f206c27206f666665}}{\b\lang2057 
\par }{\lang2057 
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104335}Defining Modifier Attachment Rules{\*\bkmkend _Toc433104335}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 As it can be seen from the figure above, there is just one modifier in the sentence example: }{\i\lang2057 in the US}{\cs26\i\fs16\up6\lang2057 \chftn {\footnote \pard\plain 
\s22\ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\cs26\fs16\up6 \chftn } {\fs20 A modifier to be attached is marked in the parse tree by an asterisk. Also the final cp, as we will see, can be considered a modifier to be attached}.}}{\i\lang2057 . }{
\lang2057 In order to attach it to the right phrase (}{\i\lang2057 produce}{\lang2057 ), it is necessary the following rule:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule attach-location-to-verb
\par \tab :REGEXP (EL1 <SPEC=HEAD,HEAD-SEM=SL::INTENTIONAL-ACTION>
\par \tab \tab \tab EL2 <SPEC=/*/,SYN=\{adjunct np\}>
\par \tab \tab \tab EL3 <HEAD-SEM=SL::AREA-GEOGRAFICA>)
\par \tab :ACTION
\par \tab \tab \{(SEM=(EL1 SL::LOCATION) = EL3)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This rule will be fired every time a verb will find a location not already assigned. It is worth noticing that such a rule i v
ery general and probably it will be necessary to specialise it or leaving it at the end of the g-FST chain representing the modif grammar. As a matter of fact such a could produce spurious results.}{\b\lang2057 
\par }{\lang2057 Depending on the rules in the A-Structure recognition, also the final }{\i\lang2057 cp}{\lang2057 
 can be attached as a modifier. In this case the needed rule is to be put in the SYNTACTIC-SEMANTIC RULES at the beginning of the G-FST chain for modifiers. The rule is the following:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule final-cp
\par \tab :REGEXP (EL1 <SPEC=HEAD,SYN=ip,HEAD-SEM=SL::FORM>
\par \tab \tab \tab EL2 <SPEC=/*/,SYN=\{adjunct np\}>
\par \tab \tab \tab EL3 <SYN=cp, TFS-TEST=(<SYN LOCAL HEAD FORM> /to/)>)
\par \tab :ACTION
\par \tab \tab \{(SEM=(EL1 SL::FINALIZED-ACTIVITY) = EL3)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
Note that the slot finalised activity is a very general role where every final clause will be put; this means that the correlation between the finalised activity of the joint-venture and the finalised activity expressed here are just loosely related (even
 if this correlation will be used in the following).
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104336}NORMALIZING INSTANCES{\*\bkmkend _Toc433104336}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 There is not much to normalize in the sentence, but in case the rule }{\i\lang2057 final-cp}{\lang2057  has been applied, there is something lacking in the }{\i\lang2057 PRODUCE}{\lang2057 
 instance: the actor that must be the same as the actee of form. 
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule jointvent-produces
\par \tab :REGEXP (EL1 <SPEC=HEAD,HEAD-SEM=SL::FORM>
\par \tab \tab    EL2 <BEING=(EL1 GUM::ACTEE), HEAD-SEM=SL::JOINT-VENTURE>
\par \tab \tab    EL3 <BEING=(EL1 SL::FINALIZED-ACTIVITY), 
\par \tab \tab \tab \tab HEAD-SEM=SL::PRODUCE, NOT-FILLED=GUM::ACTOR>)
\par \tab :ACTION
\par \tab \tab \{(SEM=(EL3 GUM::ACTOR) = EL2)
\par          \tab   SEM=(EL2 SL::FINALIZED-ACTIVITY) EL3)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This rule takes the actee of the verb }{\i\lang2057 form}{\lang2057  (a }{\i\lang2057 joint-venture}{\lang2057 ) and sets it as the actor in the verb }{\i\lang2057 produce}{\lang2057 
. This rule is also to be applied when the final cp has been attached by the syntax; in this case, probably the actor of }{\i\lang2057 produce}{\lang2057  will be }{\i\lang2057 Mazda and Ford}{\lang2057 
. This rule Is also used  to assign the production to the }{\i\lang2057 joint}{\lang2057 -}{\i\lang2057 venture}{\lang2057  (even if I would probably put the second action in another word in order to enlarge the number of cases in which it can apply).

\par A possible additional rule could be the following:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule formed_jointvent-new_company
\par \tab :REGEXP (EL1 <SPEC=HEAD,HEAD-SEM=SL::FORM>
\par \tab \tab    EL2 <BEING=(EL1 GUM::ACTEE), HEAD-SEM=SL::JOINT-VENTURE
\par \tab \tab \tab \tab NOT-FILLED=SL::HAS-PROPERTY>
\par \tab \tab    EL3 <NEW=SL::NEW>)
\par \tab :ACTION
\par \tab \tab \{(SEM=(EL2 SL::HAS-PROPERTY) = EL3)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
This rule established that a formed joint venture is a new company. This information will be useful at the discourse level (a concept called SL::NEW is used here as son of SL::PROPERTY. The same concept could be associated to the adjective }{\i\lang2057 
new}{\lang2057  in the lexicon).
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104337}Discourse Level{\*\bkmkend _Toc433104337}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 There is just one sentence in the example, so no rules can be applied. Anyway suppose the following example: }{\b\lang2057 
Mazda and Ford will form a joint venture. The new company will produce car in the US.}{\lang2057  Discourse rules must then be applied for identifying the coreference between the }{\i\lang2057 joint-venture}{\lang2057  and the }{\i\lang2057 company}{
\lang2057  in the second sentence.
\par The first thing to be considered is the focus space for the recognition. The parse tree of the first sentence is visited in a root-left-right order. Then it is not useful to write a rule such as:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule company-coref
\par \tab :REGEXP (EL1 <SPEC=HEAD,HEAD-SEM=SL::COMPANY>
\par \tab \tab    EL2 <SPEC=/*/, NOT-HEAD-SEM=SL::COMPANY>
\par \tab \tab    EL3 <HEAD-SEM=SL::COMPANY >)
\par \tab :ACTION
\par \tab \tab \{ (STX-COREF EL1 EL3)
\par \tab \tab   (MERGE-INSTANCES EL1 EL3)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 because such a rule would establish a coreference between }{\i\lang2057 new company}{\lang2057 
 and (probably) Mazda (not the coordination because the syntactic checks would fail as the coordination has plural number while the new company is singular. The right rule will be:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule company-coref
\par \tab :REGEXP (EL1 <HEAD-SEM=SL::COMPANY >
\par \tab \tab    EL4 <BEING=(EL1 SL::HAS-PROPERTY), HEAD-SEM=SL::NEW>
\par \tab \tab    EL2 <SPEC=/*/>
\par \tab \tab    EL3 <SPEC=HEAD,HEAD-SEM=SL::FORM>
\par \tab \tab    EL4 <BEING=(EL1 ACTEE), HEAD-SEM=JOINT-VENTURE>)
\par \tab :ACTION
\par \tab \tab \{ (STX-COREF EL1 EL4)
\par \tab \tab   (MERGE-INSTANCES EL1 EL4)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
This rule would, in front of a new company, look for a joint venture that has been formed. Of course this rule should be tuned by taking into consideration the whole corpus. It is possible for example that it is too general, or -
 on the contrary - too specific to be useful in other contexts.
\par A more powerful strategy is that of using the information inserted by the rule }{\i\lang2057 formed_jointvent-new_company}{\lang2057 
 introduced at the end of the previous section. The information about the fact that the mentioned joint venture is a new company can be used here with a rule such as:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule newcompany-coref
\par \tab :REGEXP (EL1 <HEAD-SEM=SL::COMPANY >
\par \tab \tab    EL2 <BEING=(EL1 SL::HAS-PROPERTY), HEAD-SEM=SL::NEW>
\par \tab \tab    EL3 <SPEC=/*/>
\par \tab \tab    EL4 < HEAD-SEM=SL::COMPANY >
\par \tab \tab    EL5 <BEING=(EL1 SL::HAS-PROPERTY), HEAD-SEM=SL::NEW>)
\par \tab :ACTION
\par \tab \tab \{(STX-COREF EL1 EL4)
\par \tab \tab   (MERGE-INSTANCES EL1 EL4)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This establishes a coreference between two new companies in the text.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104338}Template Filling{\*\bkmkend _Toc433104338}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Once the logical form for the sentence (text) has been built, it is the time of filling the template mentioned above.
\par }\trowd \trgaph70\trleft1800 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx3420\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7470 \pard \sb80\sa80\nowidctlpar\intbl {\lang2057 Company:\cell 
\ldblquote Mazda and Ford\rdblquote  / \ldblquote Mazda\rdblquote  \ldblquote Ford\rdblquote \cell }\pard \intbl {\lang2057 \row }\trowd \trgaph70\trleft1800 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx3420\clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cellx7470 \pard \sb80\sa80\nowidctlpar\intbl {\lang2057 Object:\cell \ldblquote joint venture\rdblquote \cell }\pard \intbl {\lang2057 \row }\trowd \trgaph70\trleft1800 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cellx3420\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7470 \pard \sb80\sa80\nowidctlpar\intbl {\lang2057 Activity:\cell \ldblquote to produce car in the US\rdblquote \cell }\pard \intbl {\lang2057 \row }\pard 
\ri100\sb80\sa80\nowidctlpar {\lang2057 The definition of the template in the knowledge base  (}{\i\lang2057 TEMPL::JOINTVENT-TEMPLATE }{\lang2057 
 in the following) is a simple task that is left to the reader by examining how the already defined templates are defined and by doing the same for the simple template above. First of all the template must be created. I would put a rule in the creatempl g
rammar such as:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule new_jointventure-tempalte1
\par \tab :REGEXP (EL1 <SPEC=HEAD,HEAD-SEM=SL::FORM, 
\par \tab \tab \tab NOT-FILLED=GUM::+TEMPLATE+>
\par \tab \tab    EL2 <BEING=(EL1 ACTEE), HEAD-SEM=JOINT-VENTURE,
\par \tab \tab \tab NOT-FILLED=GUM::+TEMPLATE+>)
\par \tab \tab    EL3 <NEW=TEMPL::JOINTVENT-TEMPLATE >)
\par \tab :ACTION
\par \tab \tab \{ (SEM=(EL2 GUM::+TEMPLATE+) EL3)
\par \tab \tab   (SEM=(EL1 GUM::+TEMPLATE+ EL3)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 Remember that the slot GUM::+TEMPLATE+ is defined as default in every object and that it is not necessary to explicitly define it in the objects in the KB.
\par  We prefer to assign the template to both form and joint-venture in order to be able to access the template by using both of them. Never forget the two NOT-FILLED conditions as this would introduce misbehaving.
\par A possible alternative approach would be defining a rule saying that if there is a new company mentioned in the text then a new template must be created. This would probably be too general and introduce spurious results.
\par The first two slots will be filled by using the following rule (in the filltempl grammar):
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule jointvent-established
\par \tab :REGEXP (EL1 <SPEC=HEAD,HEAD-SEM=SL::FORM>
\par \tab \tab    EL2 <BEING=(EL1 GUM::ACTOR), HEAD-SEM=SL::COORDINATION,
\par \tab \tab \tab \tab HEAD-SEM=SL::COMPANY>
\par \tab \tab    EL3 <BEING=(EL1 GUM::ACTEE), 
\par \tab \tab \tab \tab HEAD-SEM=SL::JOINT-VENTURE)
\par \tab \tab    EL4 <BEING=(EL1 GUM::+TEMPLATE+)>)
\par \tab :ACTION
\par \tab \tab \{(SEM=(EL4 TEMPL::COMPANY) = EL2)
\par \tab \tab  (SEM=(EL4 TEMPL::JOINT-VENTURE) EL3)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 The fact that a coordination is assigned the minimum common type of the coordinated object is hard-wired in the PINOCCHIO code.
\par The last slot to be filled is the activity slot.
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule jointvent_template-activity
\par \tab :REGEXP (EL1 <SPEC=HEAD, HEAD-SEM=SL::JOINT-VENTURE>
\par \tab \tab    EL2 <BEING=(EL1 SL::HAS-PROPERTY), 
\par \tab \tab \tab \tab HEAD-SEM=SL::NEW>)
\par \tab \tab    EL3 <BEING=(EL1 SL::FINALIZED-ACTIVITY) >
\par \tab \tab    EL4 <BEING=(EL1 GUM::+TEMPLATE+)>)
\par 
\par \tab :ACTION
\par \tab \tab \{(SEM=(EL4 TEMPL::ACTIVITY) = EL3)\})
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 In order to catch at least partial results when the establisher is lost, I would also put the following rule:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (def-fst-rule jointvent-established
\par \tab :REGEXP (EL1 <SPEC=HEAD,HEAD-SEM=SL::FORM>
\par \tab \tab    EL2 <BEING=(EL1 GUM::ACTEE), 
\par \tab \tab \tab \tab HEAD-SEM=SL::JOINT-VENTURE)
\par \tab \tab    EL3 <BEING=(EL1 GUM::+TEMPLATE+)>)
\par \tab :ACTION
\par \tab \tab \{(SEM=(EL4 TEMPL::JOINT-VENTURE) EL3)\}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 This would fill at least the joint-venture slot even if the system was not able to find the joint venture establishers.
\par }\pard\plain \s18\li560\ri100\sb1440\sa360\keepn\nowidctlpar \b\f8\fs72\lang1024 {\lang2057 \page Part 4: V3 Release Notes
\par }\pard\plain \ri-58\sb80\sa80 \f8\lang1024 {\lang2057 
V3.0 reimplements most of the developments foreseen in V2.X manual; in particular it reimplements the basic machinery for the FST and adds some functionalities to the FST, the KB and the user interface.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104339}Starting up PINOCCHIO V3.0{\*\bkmkend _Toc433104339}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 The FACILE integrated environment automatically opens the Geppetto and Pinocchio windows (see  [D7.2]). In case you are not using the FACILE environment or in case 
during the computation one of the two windows are closed (e.g. for a mistake), you can use:
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057  (USER::OPEN-GEPPETTO)  
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 for recoverying the Geppetto  window;
\par }\pard\plain \s62\li720\ri102\sb40\sa40\nowidctlpar \f3\fs20\lang1024 {\lang2057 (USER::OPEN-PINOCCHIO) 
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 for recovering the Pinocchio  window.
\par The initialization of  PINOCCHIO requires some actions that are necessary due to the current situation of the interface (the reorganization of the interface is under study) and that can seem cumbersome, }{\i\lang2057 
but that are necessary in order to avoid errors in this moment.}{\lang2057  The operations are }{\i\lang2057 to be performed exactly in the order mentioned here.}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li283\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 changing the layout of the Geppetto Window (choose Layout -> Test System). 
\par {\pntext\pard\plain\f1 \'b7\tab}loading and compiling the Geppetto Linguistic system (via the menu System -> Load and Compile...) .
\par {\pntext\pard\plain\f1 \'b7\tab}loading and compiling all the FST grammars from the Pinocchio window (menu System -> Load all FST Grammars).
\par }\pard \ri102\sb20\sa20 {\lang2057 There is no need to load the knowledge base, as it is automatically loaded into the system.
\par 
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104340}PRECHUNKER{\*\bkmkend _Toc433104340}
\par }\pard\plain \ri100\sb80\sa80\nowidctlpar \f8\lang1024 {\lang2057 
Until V2.X the prechunker was a module whith specific operations  not usable in other FST grammars; it operated on chart verteces instead of chart edges as all the other modules. Since V3.0 the prechunker operates on chart edges and can
 use the operations at lexical, semantic  and syntactic level  operation as any other module.
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn\nowidctlpar \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104341}COMPILING G-FST RESOURCES{\*\bkmkend _Toc433104341}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 Since in V3.0 the G-FST grammars are compiled into code there are different types of compilation. First of all there are the following source of information:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the grammar written by the user in G-FST format (}{\i\lang2057 grammar file}{\lang2057 );
\par {\pntext\pard\plain\f1 \'b7\tab}the lisp code written by PINOCCHIO on a file during the production of the delivery version of the grammar (}{\i\lang2057 grammar}{\lang2057  }{\i\lang2057 code file}{\lang2057 )
\par }\pard \ri100\sb80\sa80 {\lang2057 The Pinocchio standard interface provides a way for compiling G-FST-resources from the menu \ldblquote System\rdblquote . In particular:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 loading grammars: intended for the use of G-FST grammar development: in this case the }{\i\lang2057 
grammar file}{\lang2057  is interpreted and the corresponding code is generated and loaded without compilation; }{\i\lang2057 The grammar code file for the resource is NOT modified.}{\lang2057  The load takes a short time;
\par {\pntext\pard\plain\f1 \'b7\tab}loading and compiling: same as loading, but the generated code is also compiled. This is to be used during development for all the G-FST grammars that are not going to be mod
ified in the short period, as the compilation takes a while. }{\i\lang2057 The grammar code file for the resource is NOT modified;}{\lang2057 
\par {\pntext\pard\plain\f1 \'b7\tab}loading code: intended for loading the grammar code file, i.e. the grammars as produced for delivery: it causes the load of the grammar code file;
\par {\pntext\pard\plain\f1 \'b7\tab}saving grammars for delivery: produces the grammar code file }{\i\lang2057 for all the G-FST resources for all the declared template application}{\lang2057 
. For implementation reasons it is not possible to produce just one grammar code. }{\i\lang2057 For the same reason it is not possible to use at the in the same application two grammar code files produced in different saving action.}{\lang2057 
\par }\pard\plain \s1\ri-2\sb720\sa240\keepn \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104342}Changes to the User Interface{\*\bkmkend _Toc433104342}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 
Most of the interface has been left unchanged since V1.2. This is currently a limitation, as especially the window derived from Geppetto shows features that are not useful or even without any meaning in V3.0.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104343}The Geppeto Window{\*\bkmkend _Toc433104343}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 The geppetto window is the same described in [GPT97].
\par As mentioned it shows features that are not very useful in V3.0 and sometimes can be confusing for 
the developer. In particular, being Geppetto initially designed for chart parsing, part of  its development capabilities are devoted to context-free grammars and most of its debugging tools are devoted to chart  parsing. But in V2.1 both the context-free 
grammar and the chart parser have been disabled and most of the work is done via G-FST for which the debugging capabilities are provided by tracers and the development tool is currently the emacs editor.
\par }\pard \ri100\sb80\sa80\brdrr\brdrth\brdrw30\brsp20 {\lang2057 It is worth reminding here a relevant addition to the
 Geppetto Interface that was introduced by the last interface version:  the possibility of recoverying the input lost by the Geppetto interface; as a matter of fact   sometimes the input contained in the input pane of that window is lost in case of Lisp e
rror. Under the menu \ldblquote Emergency\rdblquote , select the voice \ldblquote Lost Input Recovery\rdblquote .
\par }\pard \ri100\sb80\sa80 {\lang2057 Some modifications have been done to the Geppetto standard interface in order to meet Pinocchio\rquote s requirements.
\par Concerning the }{\b\lang2057 main}{\lang2057  }{\b\lang2057 Geppetto window}{\lang2057 , the buttons \ldblquote see result(s)\rdblquote  currently activates the Pinocchio Browser (see below). The buttons \ldblquote show parse tree(s)\rdblquote 
 is of little use and should be disabled in the current version.
\par The }{\b\lang2057 Geppetto Grammar Editor}{\lang2057  is unuseful.
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104344}The Pinocchio Window{\*\bkmkend _Toc433104344}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 The pinocchio window   provides functionalities for the new G-FST features, in particular for activating/deactivating tracers and inspecting the results.
\par The }{\b\lang2057 system}{\lang2057  menu provides the way for:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 loading the knowledge base
\par {\pntext\pard\plain\f1 \'b7\tab}compiling the resources for the lexical normalizer
\par {\pntext\pard\plain\f1 \'b7\tab}compiling the resources implemented via G-FST.
\par }\pard \ri100\sb80\sa80 {\lang2057 The }{\b\lang2057 test}{\lang2057  menu allows to:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 load a text contained in a file
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 run a muc like experiment (see section on MUC experiments).
\par }\pard \ri100\sb80\sa80 {\lang2057 The }{\b\lang2057 debug}{\lang2057  menu allows to:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 enable the chart inspection (unused in V3.);
\par {\pntext\pard\plain\f1 \'b7\tab}activating the trace of the semantic tests at parsing level;
\par {\pntext\pard\plain\f1 \'b7\tab}activate the tracers for all the level based on G-FST and in particular:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 tracing the names of the  successfully applied rules in a run;
\par {\pntext\pard\plain\f1 \'b7\tab}completely tracing the application of a G-FST grammar.
\par }\pard \ri100\sb80\sa80 {\lang2057 The }{\b\lang2057 option}{\lang2057  menu allows to disable some processor in the PINOCCHIO chain. }{\i\lang2057 Remember that disabling a processor also disables all the processors following it in the chain}{\lang2057 .

\par The }{\b\lang2057 emergency}{\lang2057   menu allows to recover from interface errors and in particular:
\par {\pntext\pard\plain\i\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057  \ldblquote reset processor errors\rdblquote  is to be used before reactivating PINOCCHIO 
analysis in case of software crashes. As a matter of fact some software crashes may cause a further crash in the initialization process of PINOCCHIO analysis due to some unexpected values in the setting of some parameters. }{\i\lang2057 
Always reset the processor errors after software crashes.
\par {\pntext\pard\plain\i\f1 \'b7\tab}}{\lang2057 \ldblquote Reset Pinocchio Browser\rdblquote  and \ldblquote Reset Template Browser\rdblquote  and \ldblquote Reset MUC Experiment Composer\rdblquote 
 to be used in case of crash of one of the above mentioned windows. As a matter of fact if these windows crashe it is impossible to re-open them without using this menu.}{\i\lang2057 
\par {\pntext\pard\plain\i\f1 \'b7\tab}
\par }\pard\plain \s2\ri-2\sb240\sa240\keepn \b\scaps\f8\fs28\lang1024 {\lang2057 {\*\bkmkstart _Toc433104345}The Pinocchio Browser{\*\bkmkend _Toc433104345}
\par }\pard\plain \ri100\sb80\sa80 \f8\lang1024 {\lang2057 It allows to inspect the results of the G-FST modules. For each edge it is possible to inspect:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 Show Syntactic Tree: the A-structure recognized for the edge;
\par {\pntext\pard\plain\f1 \'b7\tab}Show DAG: the DAG of the A-structure associated to the edge;
\par {\pntext\pard\plain\f1 \'b7\tab}Show Final Syntactic Tree: the syntactic tree as produced by modifier attachment;
\par {\pntext\pard\plain\f1 \'b7\tab}Show normalized instances: the instances (derived by the logical form) at the end of the first normalization step (i.e. the one after modifier attachment);
\par {\pntext\pard\plain\f1 \'b7\tab}Show Final Instances: the instances after the second step of normalizations (i.e. the one after discourse processing).
\par {\pntext\pard\plain\f1 \'b7\tab}Show sentence templates: the templates created and filled by using the final instances.
\par {\pntext\pard\plain\f1 \'b7\tab}Show Templates before Merging: shows all the templates generated for the current text as they apperaed before merging;
\par {\pntext\pard\plain\f1 \'b7\tab}Show Final Templates: same result as obtained by the Template Browser, but templates are shown as graphs.
\par }\pard \ri100\sb80\sa80 {\lang2057 The parse trees have sensitive nodes that - when clicked - show the same pop-up menus provided by the standard Geppetto interface to which the following voices have been added:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 \ldblquote Show Search Space\rdblquote 
 shows all the possible attachment for a modifier (i.e. the search space considered at modifier attachment time for the current element; this option is meaningful only for unattached constituents (identified by a \ldblquote *\rdblquote 
 near the syntactic category);
\par {\pntext\pard\plain\f1 \'b7\tab}\ldblquote Created by Rule...\rdblquote  shows which parsing rule buit the current constituent.
\par }\pard \ri100\sb80\sa80 {\lang2057 The instance graphs show sensitive nodes that - when clicked - allow to perform the following operation:
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 \ldblquote Show Text\rdblquote : the text that caused the instance creation;
\par {\pntext\pard\plain\f1 \'b7\tab}\ldblquote Show Features\rdblquote : used to inspect some characteristics of the instance as used by most of the domain-dependent modules (modifier attachment, etc.):
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1723\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 the category of the associated syntactic edge;
\par {\pntext\pard\plain\f1 \'b7\tab}the semantic type;
\par {\pntext\pard\plain\f1 \'b7\tab}the type of the preposition (for Pps only).
\par {\pntext\pard\plain\f1 \'b7\tab}}\pard \fi-283\li1003\ri100\sb80\sa80{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\lang2057 
Draw class: allows to draw the possible slots and restriction for the semantic type to which the instance belongs to. The subconcept of the class are not shown. Use the next operation for that.
\par {\pntext\pard\plain\f1 \'b7\tab}
Draw Subclass Hierarchy: same as above, but also the subconcept hierarchy is shown. For the subobjects, just the slots not contained (or with a different restriction) in the dominating hierarchy are shown (e.g. if the main object has slot X and the sub
object has slots X and Y, X is shown for the object and just Y is shown for the subobject).
\par }\pard \ri100\sb80\sa80 {\lang2057 NOTE! Al the parents of a class can be inspected by using the Allegro Lisp composer (under CLOS -> Show Class Superclasses).
\par 
\par }\pard\plain \s1\ri-483\sb720\sa240\keepn \scaps\f8\fs48\lang1024 {\lang2057 {\*\bkmkstart _Toc433104346}\page REFERENCES{\*\bkmkend _Toc433104346}}{\pard\plain \s1\ri-483\sb720\sa240\keepn \scaps\v\f8\fs48\lang2057 {\tc {\lang2057 REFERENCES\tcl1}}}{
\lang2057 
\par }\pard\plain \ri-483\sb80\sa80 \f8\lang1024 {\f3\fs18\lang2057 [Ciravegna et al. 99a] Fabio Ciravegna, Alberto Lavelli "Full Text Parsing using cascades of Rules: an Information Extraction Perspective" in P
roceedings of the Ninth Conference of the European Chapter of the Association for Computational Linguistics (EACL99), Bergen, Norway, June,1999
\par [Ciravegna et al. 99b] Fabio Ciravegna, Alberto Lavelli, Nadia Mana , Luca Gilardoni, Silvia Mazza, Johannes Matiasek, William Black, Fabio Rinaldi, David      Mowatt "Classifying Texts Integrating Pattern Matching and Information Extraction" 
in Proceedings of the Sixteenth International Joint Conference on Artificial Intelligence (IJCAI99), Stockholm, August, 1999
\par [GPT 97]  Fabio Ciravegna, Alberto Lavelli, Daniela Petrelli and Fabio Pianesi \ldblquote The }{\scaps\f3\fs18\lang2057 Geppetto}{\f3\fs18\lang2057  Development Environment - User Manual - Version 2.1\rdblquote  
Technical Report, IRST, Trento, November, 1997  available also at: http://ecate.itc.it:1024/cirave/cira-papers.html
\par [D7.2]}{\lang2057    }{\f3\fs18\lang2057 Fabio Ciravegna DAM software description for V1.2 FACILE Deliverable D7.2 (LE-2440-D7.2)
\par [D7.3]}{\lang2057    }{\f3\fs18\lang2057 Fabio Ciravegna DAM V2.0 and IDAM V2.0 user manual FACILE Deliverable D7.3 (LE-2440-D7.3)
\par [D8.1]  Valerio Fiorentino, Luca Gilardoni and Silvia Mazza \ldblquote Italrating Application: categories and templates\rdblquote  FACILE Deliverable 8.1
\par [D10.4]}{\lang2057    }{\f3\fs18\lang2057 Fabio Ciravegna and Alberto Lavelli \ldblquote DAM V2.1 user manual\rdblquote  FACILE Deliverable D10.4 (LE-2440-D10.4)
\par }\pard \ri100\sb60\sa80\nowidctlpar {\f3\fs18 [Douthat98] A. Douthat. The Message Understanding Conference Scoring Software User's Manual.  In }{\i\f3\fs18 Message Understanding Conference Proceedings (MUC-7)}{\f3\fs18 . Available
 at: http://www.muc.saic.com/
\par }\pard \ri-483\sb80\sa80 {\f3\fs18\lang2057 
\par }\pard\plain \s46\ri100\sb120\sl-160\slmult1\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 \page }{\field\fldedit{\*\fldinst {\lang2057  TOC \\o "1-3" }}{\fldrslt 
\par \pard \s46\ri100\sb360\nowidctlpar\tqr\tx8306 {\lang2057 1. PINOCCHIO Architecture}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104237  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104237 }}{\fldrslt {\caps0 4}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 1.1 FST-based Analysis}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104238  {\field{\*\fldinst  PAGEREF _Toc433104238 }{\fldrslt 4}}}}
\par {\lang2057 1.2 A task-based Architecture}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104239  {\field{\*\fldinst  PAGEREF _Toc433104239 }{\fldrslt 5}}}}
\par {\lang2057 1.3 From Preprocessor Results to the basic Chart}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104240  {\field{\*\fldinst  PAGEREF _Toc433104240 }{\fldrslt 6}}}}
\par {\lang2057 1.4 PREPARSING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104241  {\field{\*\fldinst  PAGEREF _Toc433104241 }{\fldrslt 7}}}}
\par {\lang2057 1.5 PARSING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104242  {\field{\*\fldinst  PAGEREF _Toc433104242 }{\fldrslt 8}}}}
\par {\lang2057 1.5.1 The Meaning of Modifier Attachment}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104244  {\field{\*\fldinst  PAGEREF _Toc433104244 }{\fldrslt 12}}}}
\par {\lang2057 1.6 NORMALISATION}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104245  {\field{\*\fldinst  PAGEREF _Toc433104245 }{\fldrslt 12}}}}
\par {\lang2057 1.7 DISCOURSE PROCESSING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104246  {\field{\*\fldinst  PAGEREF _Toc433104246 }{\fldrslt 13}}}}
\par \pard\plain \s48\li480\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 {\lang2057 COREFERENCE IDENTIFICATION AND  MERGING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104247  {\field{\*\fldinst  PAGEREF _Toc433104247 }{\fldrslt 14}}}}
\par {\lang2057 IMPLICIT RELATION RESOLUTION}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104248  {\field{\*\fldinst  PAGEREF _Toc433104248 }{\fldrslt 14}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 1.7.1 SOME DETAILS ON DISCOURSE PROCESSING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104249  {\field{\*\fldinst  PAGEREF _Toc433104249 }{\fldrslt 14}}}}

\par {\lang2057 1.7.1.1 Building the Focus Space}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104250  {\field{\*\fldinst  PAGEREF _Toc433104250 }{\fldrslt 15}}}}
\par {\lang2057 1.7.1.2 Coreference Resolution}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104251  {\field{\*\fldinst  PAGEREF _Toc433104251 }{\fldrslt 15}}}}
\par \pard\plain \s48\li480\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 {\lang2057 SEM-COREF:  main rules}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104252  {\field{\*\fldinst  PAGEREF _Toc433104252 }{\fldrslt 16}}}}
\par {\lang2057 SYN-COREF: syntactic compatibility tests}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104253  {\field{\*\fldinst  PAGEREF _Toc433104253 }{\fldrslt 16}}}}
\par {\lang2057 Merging}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104254  {\field{\*\fldinst  PAGEREF _Toc433104254 }{\fldrslt 16}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 1.7.1.2 Domain-Specific Implicit Relation Resolution}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104255  {\field{\*\fldinst  PAGEREF _Toc433104255 }{\fldrslt 
17}}}}
\par {\lang2057 1.8 TEMPLATE FILLING AND MERGING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104256  {\field{\*\fldinst  PAGEREF _Toc433104256 }{\fldrslt 18}}}}
\par {\lang2057 1.8 TEMPLATE PRESENTATION}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104257  {\field{\*\fldinst  PAGEREF _Toc433104257 }{\fldrslt 18}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 2. How FST are Implemented in Pinocchio}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104258  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104258 }}{\fldrslt {
\caps0 19}}}}}
\par {\lang2057 3. Non-FST Resources in Pinocchio}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104259  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104259 }}{\fldrslt {\caps0 21}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 3.1.1 Lexical Information in  the Lexicon}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104260  {\field{\*\fldinst  PAGEREF _Toc433104260 }{\fldrslt 21}}}}

\par {\lang2057 3.1.2 Lexical Information in  the Knowledge Base}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104261  {\field{\*\fldinst  PAGEREF _Toc433104261 }{\fldrslt 22}}}}
\par {\lang2057 3.1.3 Lexicon Lookup: Normal Words}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104262  {\field{\*\fldinst  PAGEREF _Toc433104262 }{\fldrslt 22}}}}
\par {\lang2057 3.1.4 Lexicon Lookup: Named Entities and Other Objects}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104263  {\field{\*\fldinst  PAGEREF _Toc433104263 }{\fldrslt 23}}}}
\par {\lang2057 3.2.1 The Need of a Simple Syntax}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104264  {\field{\*\fldinst  PAGEREF _Toc433104264 }{\fldrslt 25}}}}
\par \pard\plain \s48\li480\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 {\lang2057 3.2.1.1 The Current Situation}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104265  {\field{\*\fldinst  PAGEREF _Toc433104265 }{\fldrslt 25}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 3.2.2 The role of Geppetto}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104266  {\field{\*\fldinst  PAGEREF _Toc433104266 }{\fldrslt 26}}}}
\par {\lang2057 3.2.3 The Overall Organisation of the Grammar}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104267  {\field{\*\fldinst  PAGEREF _Toc433104267 }{\fldrslt 26}}}}
\par {\lang2057 3.3.1 Why is Knowledge shared between FSTs and the KB?}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104268  {\field{\*\fldinst  PAGEREF _Toc433104268 }{\fldrslt 28}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 4. Porting PINOCCHIO to new Applications}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104269  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104269 }}{\fldrslt 
{\caps0 33}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 4.1 DOMAIN INDEPENDENT RESOURCES}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104270  {\field{\*\fldinst  PAGEREF _Toc433104270 }{\fldrslt 34}}}}
\par {\lang2057 4.2 DOMAIN DEPENDENT RESOURCES}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104271  {\field{\*\fldinst  PAGEREF _Toc433104271 }{\fldrslt 34}}}}
\par {\lang2057 4.3 USER-DEPENDENT MODULES}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104272  {\field{\*\fldinst  PAGEREF _Toc433104272 }{\fldrslt 35}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 5. Evaluating PINOCCHIO by using the MUC scorer}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104273  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104273 }
}{\fldrslt {\caps0 35}}}}}
\par {\lang2057 6. Evaluation of IPINOCCHIO V3.0}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104274  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104274 }}{\fldrslt {\caps0 37}}}}}
\par {\lang2057 1. G-FST Syntax}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104275  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104275 }}{\fldrslt {\caps0 38}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 1.1 Syntax for  G-FST Grammars}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104276  {\field{\*\fldinst  PAGEREF _Toc433104276 }{\fldrslt 38}}}}
\par {\lang2057 1.2 Syntax for the  Generic G-FST Rule}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104277  {\field{\*\fldinst  PAGEREF _Toc433104277 }{\fldrslt 39}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 1.3 Syntax for Conditions in G-FST}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104278  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104278 }}{\fldrslt {
\caps0 41}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 1.3.1 ITERATION}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104279  {\field{\*\fldinst  PAGEREF _Toc433104279 }{\fldrslt 41}}}}
\par {\lang2057 1.3.2 TEST AT LEXICAL LEVEL}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104280  {\field{\*\fldinst  PAGEREF _Toc433104280 }{\fldrslt 42}}}}
\par {\lang2057 1.3.3 TEST AT SYNTACTIC LEVEL}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104281  {\field{\*\fldinst  PAGEREF _Toc433104281 }{\fldrslt 42}}}}
\par {\lang2057 1.3.4 TEST AT SEMANTIC LEVEL}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104282  {\field{\*\fldinst  PAGEREF _Toc433104282 }{\fldrslt 43}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 1.4 Syntax for Actions  in G-FST}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104283  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104283 }}{\fldrslt {\caps0 
45}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 1.4.1 ACTIONS AT LEXICAL LEVEL}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104284  {\field{\*\fldinst  PAGEREF _Toc433104284 }{\fldrslt 45}}}}
\par {\lang2057 1.4.2 ACTIONS AT LEXICAL AND SYNTACTIC  LEVEL}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104285  {\field{\*\fldinst  PAGEREF _Toc433104285 }{\fldrslt 47}}}}
\par {\lang2057 1.4.3 ACTIONS AT SYNTACTIC LEVEL}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104286  {\field{\*\fldinst  PAGEREF _Toc433104286 }{\fldrslt 49}}}}
\par {\lang2057 1.4.4 ACTIONS AT SEMANTIC LEVEL}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104287  {\field{\*\fldinst  PAGEREF _Toc433104287 }{\fldrslt 50}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 1.5 TRACING G-FST GRAMMARS}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104288  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104288 }}{\fldrslt {\caps0 51}}}
}}
\par {\lang2057 1.6 Examples of G-FST Rules}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104289  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104289 }}{\fldrslt {\caps0 51}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 1.6.0 Lexical normalization}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104290  {\field{\*\fldinst  PAGEREF _Toc433104290 }{\fldrslt 52}}}}
\par {\lang2057 1.6.1 PRECHUNKING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104291  {\field{\*\fldinst  PAGEREF _Toc433104291 }{\fldrslt 52}}}}
\par {\lang2057 1.6.2 PARSING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104292  {\field{\*\fldinst  PAGEREF _Toc433104292 }{\fldrslt 52}}}}
\par {\lang2057 1.6.3 MODIFIER ATTACHMENT}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104293  {\field{\*\fldinst  PAGEREF _Toc433104293 }{\fldrslt 54}}}}
\par {\lang2057 1.6.4 NORMALIZATION}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104294  {\field{\*\fldinst  PAGEREF _Toc433104294 }{\fldrslt 54}}}}
\par {\lang2057 1.6.5 COREFERENCE RESOLUTION}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104295  {\field{\*\fldinst  PAGEREF _Toc433104295 }{\fldrslt 54}}}}
\par {\lang2057 1.6.6 IMPLICIT RELATION RESOULTION}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104296  {\field{\*\fldinst  PAGEREF _Toc433104296 }{\fldrslt 55}}}}
\par {\lang2057 1.6.7 TEMPLATE CREATION}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104297  {\field{\*\fldinst  PAGEREF _Toc433104297 }{\fldrslt 56}}}}
\par {\lang2057 1.6.8 TEMPLATE FILLING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104298  {\field{\*\fldinst  PAGEREF _Toc433104298 }{\fldrslt 56}}}}
\par {\lang2057 1.6.9 TEMPLATE MERGING}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104299  {\field{\*\fldinst  PAGEREF _Toc433104299 }{\fldrslt 56}}}}
\par {\lang2057 1.6.10 TEMPLATE INFORMATION RECOVERY}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104300  {\field{\*\fldinst  PAGEREF _Toc433104300 }{\fldrslt 57}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 1.7 DECLARING TEXT CLASSES AND RELATED RESOURCES}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104301  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104301 }
}{\fldrslt {\caps0 58}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 PATHNAMES FOR G-FST RESOURCE}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104302  {\field{\*\fldinst  PAGEREF _Toc433104302 }{\fldrslt 59}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 1.7 Template Result Presentation}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104303  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104303 }}{\fldrslt {\caps0 
59}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 1.7.1 IMPLEMENTING  NEW PRESENTATIONS}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104304  {\field{\*\fldinst  PAGEREF _Toc433104304 }{\fldrslt 61}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 2. Knowledge Representation}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104305  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104305 }}{\fldrslt {\caps0 61}}}
}}
\par \pard\plain \s48\li480\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 {\lang2057 Reloading the Knowledge Base}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104306  {\field{\*\fldinst  PAGEREF _Toc433104306 }{\fldrslt 62}}}}
\par {\lang2057 Drawing the TBOX}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104307  {\field{\*\fldinst  PAGEREF _Toc433104307 }{\fldrslt 62}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 Objects in the KB}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104308  {\field{\*\fldinst  PAGEREF _Toc433104308 }{\fldrslt 62}}}}
\par {\lang2057 Roles}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104309  {\field{\*\fldinst  PAGEREF _Toc433104309 }{\fldrslt 62}}}}
\par \pard\plain \s48\li480\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 {\lang2057 Retrieving Roles by Names}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104310  {\field{\*\fldinst  PAGEREF _Toc433104310 }{\fldrslt 63}}}}
\par {\lang2057 Retrieving Names by Roles}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104311  {\field{\*\fldinst  PAGEREF _Toc433104311 }{\fldrslt 63}}}}
\par {\lang2057 Testing for an Object Identity}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104312  {\field{\*\fldinst  PAGEREF _Toc433104312 }{\fldrslt 63}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 CONCEPTS}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104313  {\field{\*\fldinst  PAGEREF _Toc433104313 }{\fldrslt 63}}}}
\par \pard\plain \s48\li480\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 {\lang2057 Retrieving Concepts  by Names}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104314  {\field{\*\fldinst  PAGEREF _Toc433104314 }{\fldrslt 64}}}}
\par {\lang2057 Retrieving  Names by Concepts}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104315  {\field{\*\fldinst  PAGEREF _Toc433104315 }{\fldrslt 64}}}}
\par {\lang2057 Testing for a Concept Identity}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104316  {\field{\*\fldinst  PAGEREF _Toc433104316 }{\fldrslt 64}}}}
\par {\lang2057 Accessing  role restriction s within concepts}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104317  {\field{\*\fldinst  PAGEREF _Toc433104317 }{\fldrslt 64}}}}
\par {\lang2057 Accessing  all the roles and their  restriction s for a  concept}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104318  {\field{\*\fldinst  PAGEREF _Toc433104318 }{\fldrslt 64}}}}
\par {\lang2057 Testing the Type Compatibility between Concepts}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104319  {\field{\*\fldinst  PAGEREF _Toc433104319 }{\fldrslt 64}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 REIFIED RELATIONS}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104320  {\field{\*\fldinst  PAGEREF _Toc433104320 }{\fldrslt 64}}}}
\par {\lang2057 INSTANCES}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104321  {\field{\*\fldinst  PAGEREF _Toc433104321 }{\fldrslt 65}}}}
\par \pard\plain \s48\li480\ri100\nowidctlpar\tqr\tx8306 \f4\fs20\lang1024 {\lang2057 Accessing Objects  by Names}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104322  {\field{\*\fldinst  PAGEREF _Toc433104322 }{\fldrslt 65}}}}
\par {\lang2057 Retrieving Names by Instances}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104323  {\field{\*\fldinst  PAGEREF _Toc433104323 }{\fldrslt 65}}}}
\par {\lang2057 Testing for an Instance Identity}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104324  {\field{\*\fldinst  PAGEREF _Toc433104324 }{\fldrslt 65}}}}
\par {\lang2057 Setting a slot in an instance}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104325  {\field{\*\fldinst  PAGEREF _Toc433104325 }{\fldrslt 65}}}}
\par {\lang2057 Resetting a slot in an instance}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104326  {\field{\*\fldinst  PAGEREF _Toc433104326 }{\fldrslt 65}}}}
\par {\lang2057 Deleting  an  instance from the knowledge base}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104327  {\field{\*\fldinst  PAGEREF _Toc433104327 }{\fldrslt 66}}}}
\par {\lang2057 Copying an  instance}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104328  {\field{\*\fldinst  PAGEREF _Toc433104328 }{\fldrslt 66}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 The KB Parameters}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104329  {\field{\*\fldinst  PAGEREF _Toc433104329 }{\fldrslt 66}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 Getting Started}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104330  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104330 }}{\fldrslt {\caps0 68}}}}}
\par {\lang2057 Defining the Lexicon}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104331  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104331 }}{\fldrslt {\caps0 69}}}}}
\par {\lang2057 Recognising Compounds}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104332  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104332 }}{\fldrslt {\caps0 69}}}}}
\par {\lang2057 Defining Concepts}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104333  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104333 }}{\fldrslt {\caps0 70}}}}}
\par {\lang2057 Defining Syntax}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104334  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104334 }}{\fldrslt {\caps0 71}}}}}
\par {\lang2057 Defining Modifier Attachment Rules}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104335  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104335 }}{\fldrslt {\caps0 72}}}}}
\par {\lang2057 NORMALIZING INSTANCES}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104336  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104336 }}{\fldrslt {\caps0 73}}}}}
\par {\lang2057 Discourse Level}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104337  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104337 }}{\fldrslt {\caps0 74}}}}}
\par {\lang2057 Template Filling}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104338  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104338 }}{\fldrslt {\caps0 75}}}}}
\par {\lang2057 Starting up PINOCCHIO V3.0}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104339  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104339 }}{\fldrslt {\caps0 77}}}}}
\par {\lang2057 PRECHUNKER}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104340  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104340 }}{\fldrslt {\caps0 78}}}}}
\par {\lang2057 COMPILING G-FST RESOURCES}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104341  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104341 }}{\fldrslt {\caps0 78}}}}}
\par {\lang2057 Changes to the User Interface}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104342  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104342 }}{\fldrslt {\caps0 79}}}}}
\par \pard\plain \s47\li240\ri100\sb240\nowidctlpar\tqr\tx8306 \b\f4\fs20\lang1024 {\lang2057 The Geppeto Window}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104343  {\field{\*\fldinst  PAGEREF _Toc433104343 }{\fldrslt 79}}}}
\par {\lang2057 The Pinocchio Window}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104344  {\field{\*\fldinst  PAGEREF _Toc433104344 }{\fldrslt 79}}}}
\par {\lang2057 The Pinocchio Browser}\tab {\field\flddirty{\*\fldinst  GOTOBUTTON _Toc433104345  {\field{\*\fldinst  PAGEREF _Toc433104345 }{\fldrslt 80}}}}
\par \pard\plain \s46\ri100\sb360\nowidctlpar\tqr\tx8306 \b\caps\f5\lang1024 {\lang2057 REFERENCES}\tab {\field\flddirty{\*\fldinst {\caps0  GOTOBUTTON _Toc433104346  }{\field{\*\fldinst {\caps0  PAGEREF _Toc433104346 }}{\fldrslt {\caps0 81}}}}}
\par \pard\plain \li1440\ri-483\sb80\sa80 \f8\lang1024 }}\pard\plain \li1440\ri-483\sb80\sa80 \f8\lang1024 {\f3\fs18\lang2057 
\par }}